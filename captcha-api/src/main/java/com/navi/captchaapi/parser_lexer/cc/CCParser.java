
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.navi.captchaapi.parser_lexer.cc;

import java_cup.runtime.*;
import java.util.*;
import java.text.DecimalFormat;
import com.navi.captchaapi.parser_lexer.*;
import com.navi.captchaapi.parser_lexer.cc.obj.*;
import com.navi.captchaapi.parser_lexer.cc.obj.node.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CCParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public CCParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CCParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CCParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0119\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\004" +
    "\000\002\005\006\000\002\006\005\000\002\007\006\000" +
    "\002\010\005\000\002\011\006\000\002\012\006\000\002" +
    "\013\006\000\002\014\007\000\002\015\006\000\002\016" +
    "\005\000\002\017\006\000\002\020\006\000\002\021\005" +
    "\000\002\022\006\000\002\023\006\000\002\024\006\000" +
    "\002\025\005\000\002\026\006\000\002\027\006\000\002" +
    "\030\006\000\002\031\006\000\002\032\006\000\002\033" +
    "\006\000\002\034\006\000\002\035\006\000\002\036\006" +
    "\000\002\037\006\000\002\040\006\000\002\041\006\000" +
    "\002\042\006\000\002\043\006\000\002\044\006\000\002" +
    "\045\006\000\002\004\005\000\002\004\003\000\002\067" +
    "\004\000\002\046\005\000\002\046\004\000\002\050\005" +
    "\000\002\051\004\000\002\066\004\000\002\066\004\000" +
    "\002\047\005\000\002\047\004\000\002\052\005\000\002" +
    "\052\004\000\002\053\005\000\002\053\004\000\002\054" +
    "\005\000\002\054\004\000\002\055\005\000\002\055\004" +
    "\000\002\056\005\000\002\056\004\000\002\057\005\000" +
    "\002\057\004\000\002\060\005\000\002\060\004\000\002" +
    "\061\003\000\002\062\005\000\002\062\004\000\002\063" +
    "\005\000\002\063\004\000\002\064\005\000\002\064\004" +
    "\000\002\065\005\000\002\070\003\000\002\070\004\000" +
    "\002\071\003\000\002\071\003\000\002\071\003\000\002" +
    "\071\003\000\002\071\003\000\002\071\003\000\002\071" +
    "\003\000\002\071\003\000\002\071\003\000\002\071\003" +
    "\000\002\071\003\000\002\071\003\000\002\071\003\000" +
    "\002\071\003\000\002\072\002\000\002\072\003\000\002" +
    "\073\003\000\002\073\004\000\002\074\003\000\002\074" +
    "\003\000\002\074\003\000\002\074\003\000\002\074\003" +
    "\000\002\074\003\000\002\074\003\000\002\074\003\000" +
    "\002\074\003\000\002\074\003\000\002\074\003\000\002" +
    "\074\003\000\002\074\003\000\002\074\003\000\002\074" +
    "\003\000\002\074\003\000\002\074\003\000\002\075\007" +
    "\000\002\076\007\000\002\077\007\000\002\100\007\000" +
    "\002\101\007\000\002\102\007\000\002\103\007\000\002" +
    "\104\007\000\002\105\007\000\002\106\007\000\002\107" +
    "\007\000\002\110\007\000\002\111\007\000\002\112\007" +
    "\000\002\113\007\000\002\114\007\000\002\115\007\000" +
    "\002\120\002\000\002\120\003\000\002\121\003\000\002" +
    "\121\004\000\002\122\005\000\002\122\004\000\002\123" +
    "\003\000\002\123\003\000\002\116\003\000\002\116\005" +
    "\000\002\117\003\000\002\124\005\000\002\125\005\000" +
    "\002\126\003\000\002\126\003\000\002\126\003\000\002" +
    "\126\003\000\002\126\003\000\002\127\006\000\002\127" +
    "\006\000\002\130\005\000\002\136\002\000\002\136\003" +
    "\000\002\137\003\000\002\137\004\000\002\140\004\000" +
    "\002\140\004\000\002\140\004\000\002\140\003\000\002" +
    "\140\003\000\002\140\003\000\002\140\003\000\002\141" +
    "\006\000\002\141\005\000\002\141\005\000\002\141\006" +
    "\000\002\142\006\000\002\142\006\000\002\142\006\000" +
    "\002\142\006\000\002\142\006\000\002\142\005\000\002" +
    "\142\005\000\002\142\006\000\002\144\003\000\002\144" +
    "\005\000\002\143\003\000\002\143\003\000\002\131\005" +
    "\000\002\132\005\000\002\135\005\000\002\133\003\000" +
    "\002\133\003\000\002\134\004\000\002\134\004\000\002" +
    "\134\004\000\002\145\010\000\002\145\011\000\002\145" +
    "\011\000\002\145\012\000\002\147\003\000\002\147\004" +
    "\000\002\150\011\000\002\146\004\000\002\151\013\000" +
    "\002\152\006\000\002\152\005\000\002\153\010\000\002" +
    "\154\003\000\002\155\003\000\002\156\003\000\002\156" +
    "\005\000\002\157\003\000\002\157\005\000\002\160\003" +
    "\000\002\160\005\000\002\161\003\000\002\161\005\000" +
    "\002\161\005\000\002\162\003\000\002\162\005\000\002" +
    "\162\005\000\002\163\003\000\002\163\003\000\002\163" +
    "\003\000\002\163\004\000\002\163\005\000\002\164\003" +
    "\000\002\164\003\000\002\164\003\000\002\164\003\000" +
    "\002\164\003\000\002\165\003\000\002\166\003\000\002" +
    "\167\003\000\002\170\003\000\002\170\003\000\002\170" +
    "\003\000\002\170\003\000\002\170\003\000\002\170\003" +
    "\000\002\170\003\000\002\170\003\000\002\170\003\000" +
    "\002\170\003\000\002\170\003\000\002\170\003\000\002" +
    "\170\003\000\002\170\003\000\002\170\003\000\002\170" +
    "\003\000\002\170\003\000\002\170\003\000\002\170\003" +
    "\000\002\170\003\000\002\170\003\000\002\170\003\000" +
    "\002\170\003\000\002\170\003\000\002\170\003\000\002" +
    "\170\003\000\002\170\003\000\002\170\003\000\002\170" +
    "\003\000\002\170\003\000\002\170\003\000\002\170\003" +
    "\000\002\170\003\000\002\170\003\000\002\170\003\000" +
    "\002\170\003\000\002\170\003\000\002\170\003\000\002" +
    "\170\003\000\002\170\003\000\002\170\003\000\002\170" +
    "\003\000\002\170\003\000\002\170\003\000\002\170\003" +
    "\000\002\170\003\000\002\170\003\000\002\170\003\000" +
    "\002\170\003\000\002\170\003\000\002\170\003\000\002" +
    "\170\003\000\002\170\003\000\002\170\003\000\002\170" +
    "\003\000\002\170\003\000\002\170\003\000\002\170\003" +
    "\000\002\171\003\000\002\171\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0225\000\006\003\013\044\014\001\002\000\004\044" +
    "\u01fa\001\002\000\010\002\000\003\013\044\u01f7\001\002" +
    "\000\010\002\ufffd\003\ufffd\044\ufffd\001\002\000\010\002" +
    "\ufffe\003\ufffe\044\ufffe\001\002\000\010\044\uff83\055\u0137" +
    "\057\u0134\001\002\000\172\003\260\044\202\046\245\047" +
    "\215\050\223\051\273\052\234\053\162\054\214\055\255" +
    "\056\302\057\265\060\231\061\274\062\172\063\262\064" +
    "\307\065\201\066\220\067\275\070\225\071\222\072\257" +
    "\073\224\074\232\075\252\076\164\077\226\100\205\101" +
    "\177\102\266\103\246\104\175\105\276\106\241\107\256" +
    "\110\305\111\210\112\306\113\272\114\204\115\176\116" +
    "\203\117\236\120\240\121\237\122\304\123\227\124\211" +
    "\125\254\126\207\127\264\130\301\131\277\132\200\133" +
    "\165\134\263\135\173\136\235\137\171\001\002\000\004" +
    "\002\uffff\001\002\000\010\002\uffd9\003\uffd9\044\uffd9\001" +
    "\002\000\010\004\021\010\017\024\020\001\002\000\004" +
    "\002\016\001\002\000\004\002\001\001\002\000\006\045" +
    "\uffa9\112\031\001\002\000\004\045\156\001\002\000\006" +
    "\045\uffa9\112\031\001\002\000\010\004\uffa1\045\uffa1\112" +
    "\uffa1\001\002\000\010\004\uff9f\045\uff9f\112\uff9f\001\002" +
    "\000\010\004\uffa7\045\uffa7\112\uffa7\001\002\000\010\004" +
    "\uffa0\045\uffa0\112\uffa0\001\002\000\010\004\uff99\045\uff99" +
    "\112\uff99\001\002\000\010\004\uffa8\045\uffa8\112\031\001" +
    "\002\000\010\004\uffa2\045\uffa2\112\uffa2\001\002\000\044" +
    "\025\070\026\057\027\064\030\060\031\050\032\053\125" +
    "\067\126\052\127\051\130\063\131\054\132\055\133\056" +
    "\134\062\135\066\136\061\137\065\001\002\000\004\045" +
    "\047\001\002\000\010\004\uff9b\045\uff9b\112\uff9b\001\002" +
    "\000\010\004\uff9c\045\uff9c\112\uff9c\001\002\000\010\004" +
    "\uff97\045\uff97\112\uff97\001\002\000\010\004\uff9e\045\uff9e" +
    "\112\uff9e\001\002\000\010\004\uff98\045\uff98\112\uff98\001" +
    "\002\000\010\004\uffa3\045\uffa3\112\uffa3\001\002\000\010" +
    "\004\uffa5\045\uffa5\112\uffa5\001\002\000\010\004\uffa4\045" +
    "\uffa4\112\uffa4\001\002\000\010\004\uff9a\045\uff9a\112\uff9a" +
    "\001\002\000\010\004\uff96\045\uff96\112\uff96\001\002\000" +
    "\010\004\uff95\045\uff95\112\uff95\001\002\000\010\004\uff9d" +
    "\045\uff9d\112\uff9d\001\002\000\004\044\ufffb\001\002\000" +
    "\004\052\152\001\002\000\004\052\147\001\002\000\004" +
    "\052\144\001\002\000\004\052\141\001\002\000\004\052" +
    "\136\001\002\000\004\052\133\001\002\000\004\052\130" +
    "\001\002\000\004\052\125\001\002\000\004\052\122\001" +
    "\002\000\004\052\117\001\002\000\004\052\114\001\002" +
    "\000\004\052\111\001\002\000\004\052\106\001\002\000" +
    "\004\052\103\001\002\000\004\052\100\001\002\000\004" +
    "\052\075\001\002\000\004\052\071\001\002\000\004\046" +
    "\073\001\002\000\004\113\074\001\002\000\026\074\uff27" +
    "\075\uff27\076\uff27\077\uff27\101\uff27\103\uff27\106\uff27\107" +
    "\uff27\110\uff27\113\uff27\001\002\000\010\004\uff89\045\uff89" +
    "\112\uff89\001\002\000\004\046\073\001\002\000\004\113" +
    "\077\001\002\000\010\004\uff94\045\uff94\112\uff94\001\002" +
    "\000\004\046\073\001\002\000\004\113\102\001\002\000" +
    "\010\004\uff8c\045\uff8c\112\uff8c\001\002\000\004\046\073" +
    "\001\002\000\004\113\105\001\002\000\010\004\uff8a\045" +
    "\uff8a\112\uff8a\001\002\000\004\046\073\001\002\000\004" +
    "\113\110\001\002\000\010\004\uff87\045\uff87\112\uff87\001" +
    "\002\000\004\046\073\001\002\000\004\113\113\001\002" +
    "\000\010\004\uff91\045\uff91\112\uff91\001\002\000\004\046" +
    "\073\001\002\000\004\113\116\001\002\000\010\004\uff8d" +
    "\045\uff8d\112\uff8d\001\002\000\004\046\073\001\002\000" +
    "\004\113\121\001\002\000\010\004\uff8b\045\uff8b\112\uff8b" +
    "\001\002\000\004\046\073\001\002\000\004\113\124\001" +
    "\002\000\010\004\uff86\045\uff86\112\uff86\001\002\000\004" +
    "\046\073\001\002\000\004\113\127\001\002\000\010\004" +
    "\uff88\045\uff88\112\uff88\001\002\000\004\046\073\001\002" +
    "\000\004\113\132\001\002\000\010\004\uff8e\045\uff8e\112" +
    "\uff8e\001\002\000\004\046\073\001\002\000\004\113\135" +
    "\001\002\000\010\004\uff8f\045\uff8f\112\uff8f\001\002\000" +
    "\004\046\073\001\002\000\004\113\140\001\002\000\010" +
    "\004\uff90\045\uff90\112\uff90\001\002\000\004\046\073\001" +
    "\002\000\004\113\143\001\002\000\010\004\uff84\045\uff84" +
    "\112\uff84\001\002\000\004\046\073\001\002\000\004\113" +
    "\146\001\002\000\010\004\uff93\045\uff93\112\uff93\001\002" +
    "\000\004\046\073\001\002\000\004\113\151\001\002\000" +
    "\010\004\uff92\045\uff92\112\uff92\001\002\000\004\046\073" +
    "\001\002\000\004\113\154\001\002\000\010\004\uff85\045" +
    "\uff85\112\uff85\001\002\000\010\004\uffa6\045\uffa6\112\uffa6" +
    "\001\002\000\010\044\uffeb\055\uffeb\057\uffeb\001\002\000" +
    "\004\045\160\001\002\000\172\003\ufff9\044\ufff9\046\ufff9" +
    "\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055" +
    "\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9" +
    "\064\ufff9\065\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9\072" +
    "\ufff9\073\ufff9\074\ufff9\075\ufff9\076\ufff9\077\ufff9\100\ufff9" +
    "\101\ufff9\102\ufff9\103\ufff9\104\ufff9\105\ufff9\106\ufff9\107" +
    "\ufff9\110\ufff9\111\ufff9\112\ufff9\113\ufff9\114\ufff9\115\ufff9" +
    "\116\ufff9\117\ufff9\120\ufff9\121\ufff9\122\ufff9\123\ufff9\124" +
    "\ufff9\125\ufff9\126\ufff9\127\ufff9\130\ufff9\131\ufff9\132\ufff9" +
    "\133\ufff9\134\ufff9\135\ufff9\136\ufff9\137\ufff9\001\002\000" +
    "\172\003\uffc1\044\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1" +
    "\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060" +
    "\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1" +
    "\067\uffc1\070\uffc1\071\uffc1\072\uffc1\073\uffc1\074\uffc1\075" +
    "\uffc1\076\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1\103\uffc1" +
    "\104\uffc1\105\uffc1\106\uffc1\107\uffc1\110\uffc1\111\uffc1\112" +
    "\uffc1\113\uffc1\114\uffc1\115\uffc1\116\uffc1\117\uffc1\120\uffc1" +
    "\121\uffc1\122\uffc1\123\uffc1\124\uffc1\125\uffc1\126\uffc1\127" +
    "\uffc1\130\uffc1\131\uffc1\132\uffc1\133\uffc1\134\uffc1\135\uffc1" +
    "\136\uffc1\137\uffc1\001\002\000\172\003\uff23\044\uff23\046" +
    "\uff23\047\uff23\050\uff23\051\uff23\052\uff23\053\uff23\054\uff23" +
    "\055\uff23\056\uff23\057\uff23\060\uff23\061\uff23\062\uff23\063" +
    "\uff23\064\uff23\065\uff23\066\uff23\067\uff23\070\uff23\071\uff23" +
    "\072\uff23\073\uff23\074\uff23\075\uff23\076\uff23\077\uff23\100" +
    "\uff23\101\uff23\102\uff23\103\uff23\104\uff23\105\uff23\106\uff23" +
    "\107\uff23\110\uff23\111\uff23\112\uff23\113\uff23\114\uff23\115" +
    "\uff23\116\uff23\117\uff23\120\uff23\121\uff23\122\uff23\123\uff23" +
    "\124\uff23\125\uff23\126\uff23\127\uff23\130\uff23\131\uff23\132" +
    "\uff23\133\uff23\134\uff23\135\uff23\136\uff23\137\uff23\001\002" +
    "\000\172\003\uffb2\044\uffb2\046\uffb2\047\uffb2\050\uffb2\051" +
    "\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2" +
    "\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2\066" +
    "\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2" +
    "\075\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2\102\uffb2\103" +
    "\uffb2\104\uffb2\105\uffb2\106\uffb2\107\uffb2\110\uffb2\111\uffb2" +
    "\112\uffb2\113\uffb2\114\uffb2\115\uffb2\116\uffb2\117\uffb2\120" +
    "\uffb2\121\uffb2\122\uffb2\123\uffb2\124\uffb2\125\uffb2\126\uffb2" +
    "\127\uffb2\130\uffb2\131\uffb2\132\uffb2\133\uffb2\134\uffb2\135" +
    "\uffb2\136\uffb2\137\uffb2\001\002\000\172\003\uff1a\044\uff1a" +
    "\046\uff1a\047\uff1a\050\uff1a\051\uff1a\052\uff1a\053\uff1a\054" +
    "\uff1a\055\uff1a\056\uff1a\057\uff1a\060\uff1a\061\uff1a\062\uff1a" +
    "\063\uff1a\064\uff1a\065\uff1a\066\uff1a\067\uff1a\070\uff1a\071" +
    "\uff1a\072\uff1a\073\uff1a\074\uff1a\075\uff1a\076\uff1a\077\uff1a" +
    "\100\uff1a\101\uff1a\102\uff1a\103\uff1a\104\uff1a\105\uff1a\106" +
    "\uff1a\107\uff1a\110\uff1a\111\uff1a\112\uff1a\113\uff1a\114\uff1a" +
    "\115\uff1a\116\uff1a\117\uff1a\120\uff1a\121\uff1a\122\uff1a\123" +
    "\uff1a\124\uff1a\125\uff1a\126\uff1a\127\uff1a\130\uff1a\131\uff1a" +
    "\132\uff1a\133\uff1a\134\uff1a\135\uff1a\136\uff1a\137\uff1a\001" +
    "\002\000\172\003\ufeef\044\ufeef\046\ufeef\047\ufeef\050\ufeef" +
    "\051\ufeef\052\ufeef\053\ufeef\054\ufeef\055\ufeef\056\ufeef\057" +
    "\ufeef\060\ufeef\061\ufeef\062\ufeef\063\ufeef\064\ufeef\065\ufeef" +
    "\066\ufeef\067\ufeef\070\ufeef\071\ufeef\072\ufeef\073\ufeef\074" +
    "\ufeef\075\ufeef\076\ufeef\077\ufeef\100\ufeef\101\ufeef\102\ufeef" +
    "\103\ufeef\104\ufeef\105\ufeef\106\ufeef\107\ufeef\110\ufeef\111" +
    "\ufeef\112\ufeef\113\ufeef\114\ufeef\115\ufeef\116\ufeef\117\ufeef" +
    "\120\ufeef\121\ufeef\122\ufeef\123\ufeef\124\ufeef\125\ufeef\126" +
    "\ufeef\127\ufeef\130\ufeef\131\ufeef\132\ufeef\133\ufeef\134\ufeef" +
    "\135\ufeef\136\ufeef\137\ufeef\001\002\000\172\003\uffb4\044" +
    "\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4" +
    "\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062" +
    "\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4" +
    "\071\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4\077" +
    "\uffb4\100\uffb4\101\uffb4\102\uffb4\103\uffb4\104\uffb4\105\uffb4" +
    "\106\uffb4\107\uffb4\110\uffb4\111\uffb4\112\uffb4\113\uffb4\114" +
    "\uffb4\115\uffb4\116\uffb4\117\uffb4\120\uffb4\121\uffb4\122\uffb4" +
    "\123\uffb4\124\uffb4\125\uffb4\126\uffb4\127\uffb4\130\uffb4\131" +
    "\uffb4\132\uffb4\133\uffb4\134\uffb4\135\uffb4\136\uffb4\137\uffb4" +
    "\001\002\000\172\003\uffb6\044\uffb6\046\uffb6\047\uffb6\050" +
    "\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6" +
    "\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065" +
    "\uffb6\066\uffb6\067\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6" +
    "\074\uffb6\075\uffb6\076\uffb6\077\uffb6\100\uffb6\101\uffb6\102" +
    "\uffb6\103\uffb6\104\uffb6\105\uffb6\106\uffb6\107\uffb6\110\uffb6" +
    "\111\uffb6\112\uffb6\113\uffb6\114\uffb6\115\uffb6\116\uffb6\117" +
    "\uffb6\120\uffb6\121\uffb6\122\uffb6\123\uffb6\124\uffb6\125\uffb6" +
    "\126\uffb6\127\uffb6\130\uffb6\131\uffb6\132\uffb6\133\uffb6\134" +
    "\uffb6\135\uffb6\136\uffb6\137\uffb6\001\002\000\172\003\uffb0" +
    "\044\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053" +
    "\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0" +
    "\062\uffb0\063\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0\070" +
    "\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0\076\uffb0" +
    "\077\uffb0\100\uffb0\101\uffb0\102\uffb0\103\uffb0\104\uffb0\105" +
    "\uffb0\106\uffb0\107\uffb0\110\uffb0\111\uffb0\112\uffb0\113\uffb0" +
    "\114\uffb0\115\uffb0\116\uffb0\117\uffb0\120\uffb0\121\uffb0\122" +
    "\uffb0\123\uffb0\124\uffb0\125\uffb0\126\uffb0\127\uffb0\130\uffb0" +
    "\131\uffb0\132\uffb0\133\uffb0\134\uffb0\135\uffb0\136\uffb0\137" +
    "\uffb0\001\002\000\172\003\ufeeb\044\ufeeb\046\ufeeb\047\ufeeb" +
    "\050\ufeeb\051\ufeeb\052\ufeeb\053\ufeeb\054\ufeeb\055\ufeeb\056" +
    "\ufeeb\057\ufeeb\060\ufeeb\061\ufeeb\062\ufeeb\063\ufeeb\064\ufeeb" +
    "\065\ufeeb\066\ufeeb\067\ufeeb\070\ufeeb\071\ufeeb\072\ufeeb\073" +
    "\ufeeb\074\ufeeb\075\ufeeb\076\ufeeb\077\ufeeb\100\ufeeb\101\ufeeb" +
    "\102\ufeeb\103\ufeeb\104\ufeeb\105\ufeeb\106\ufeeb\107\ufeeb\110" +
    "\ufeeb\111\ufeeb\112\ufeeb\113\ufeeb\114\ufeeb\115\ufeeb\116\ufeeb" +
    "\117\ufeeb\120\ufeeb\121\ufeeb\122\ufeeb\123\ufeeb\124\ufeeb\125" +
    "\ufeeb\126\ufeeb\127\ufeeb\130\ufeeb\131\ufeeb\132\ufeeb\133\ufeeb" +
    "\134\ufeeb\135\ufeeb\136\ufeeb\137\ufeeb\001\002\000\172\003" +
    "\uff06\044\uff06\046\uff06\047\uff06\050\uff06\051\uff06\052\uff06" +
    "\053\uff06\054\uff06\055\uff06\056\uff06\057\uff06\060\uff06\061" +
    "\uff06\062\uff06\063\uff06\064\uff06\065\uff06\066\uff06\067\uff06" +
    "\070\uff06\071\uff06\072\uff06\073\uff06\074\uff06\075\uff06\076" +
    "\uff06\077\uff06\100\uff06\101\uff06\102\uff06\103\uff06\104\uff06" +
    "\105\uff06\106\uff06\107\uff06\110\uff06\111\uff06\112\uff06\113" +
    "\uff06\114\uff06\115\uff06\116\uff06\117\uff06\120\uff06\121\uff06" +
    "\122\uff06\123\uff06\124\uff06\125\uff06\126\uff06\127\uff06\130" +
    "\uff06\131\uff06\132\uff06\133\uff06\134\uff06\135\uff06\136\uff06" +
    "\137\uff06\001\002\000\172\003\ufeed\044\ufeed\046\ufeed\047" +
    "\ufeed\050\ufeed\051\ufeed\052\ufeed\053\ufeed\054\ufeed\055\ufeed" +
    "\056\ufeed\057\ufeed\060\ufeed\061\ufeed\062\ufeed\063\ufeed\064" +
    "\ufeed\065\ufeed\066\ufeed\067\ufeed\070\ufeed\071\ufeed\072\ufeed" +
    "\073\ufeed\074\ufeed\075\ufeed\076\ufeed\077\ufeed\100\ufeed\101" +
    "\ufeed\102\ufeed\103\ufeed\104\ufeed\105\ufeed\106\ufeed\107\ufeed" +
    "\110\ufeed\111\ufeed\112\ufeed\113\ufeed\114\ufeed\115\ufeed\116" +
    "\ufeed\117\ufeed\120\ufeed\121\ufeed\122\ufeed\123\ufeed\124\ufeed" +
    "\125\ufeed\126\ufeed\127\ufeed\130\ufeed\131\ufeed\132\ufeed\133" +
    "\ufeed\134\ufeed\135\ufeed\136\ufeed\137\ufeed\001\002\000\172" +
    "\003\260\044\u012c\046\245\047\215\050\223\051\273\052" +
    "\234\053\162\054\214\055\255\056\302\057\265\060\231" +
    "\061\274\062\172\063\262\064\307\065\201\066\220\067" +
    "\275\070\225\071\222\072\257\073\224\074\232\075\252" +
    "\076\164\077\226\100\205\101\177\102\266\103\246\104" +
    "\175\105\276\106\241\107\256\110\305\111\210\112\306" +
    "\113\272\114\204\115\176\116\203\117\236\120\240\121" +
    "\237\122\304\123\227\124\211\125\254\126\207\127\264" +
    "\130\301\131\277\132\200\133\165\134\263\135\173\136" +
    "\235\137\171\001\002\000\172\003\uff14\044\uff14\046\uff14" +
    "\047\uff14\050\uff14\051\uff14\052\uff14\053\uff14\054\uff14\055" +
    "\uff14\056\uff14\057\uff14\060\uff14\061\uff14\062\uff14\063\uff14" +
    "\064\uff14\065\uff14\066\uff14\067\uff14\070\uff14\071\uff14\072" +
    "\uff14\073\uff14\074\uff14\075\uff14\076\uff14\077\uff14\100\uff14" +
    "\101\uff14\102\uff14\103\uff14\104\uff14\105\uff14\106\uff14\107" +
    "\uff14\110\uff14\111\uff14\112\uff14\113\uff14\114\uff14\115\uff14" +
    "\116\uff14\117\uff14\120\uff14\121\uff14\122\uff14\123\uff14\124" +
    "\uff14\125\uff14\126\uff14\127\uff14\130\uff14\131\uff14\132\uff14" +
    "\133\uff14\134\uff14\135\uff14\136\uff14\137\uff14\001\002\000" +
    "\172\003\uff0b\044\uff0b\046\uff0b\047\uff0b\050\uff0b\051\uff0b" +
    "\052\uff0b\053\uff0b\054\uff0b\055\uff0b\056\uff0b\057\uff0b\060" +
    "\uff0b\061\uff0b\062\uff0b\063\uff0b\064\uff0b\065\uff0b\066\uff0b" +
    "\067\uff0b\070\uff0b\071\uff0b\072\uff0b\073\uff0b\074\uff0b\075" +
    "\uff0b\076\uff0b\077\uff0b\100\uff0b\101\uff0b\102\uff0b\103\uff0b" +
    "\104\uff0b\105\uff0b\106\uff0b\107\uff0b\110\uff0b\111\uff0b\112" +
    "\uff0b\113\uff0b\114\uff0b\115\uff0b\116\uff0b\117\uff0b\120\uff0b" +
    "\121\uff0b\122\uff0b\123\uff0b\124\uff0b\125\uff0b\126\uff0b\127" +
    "\uff0b\130\uff0b\131\uff0b\132\uff0b\133\uff0b\134\uff0b\135\uff0b" +
    "\136\uff0b\137\uff0b\001\002\000\172\003\uff17\044\uff17\046" +
    "\uff17\047\uff17\050\uff17\051\uff17\052\uff17\053\uff17\054\uff17" +
    "\055\uff17\056\uff17\057\uff17\060\uff17\061\uff17\062\uff17\063" +
    "\uff17\064\uff17\065\uff17\066\uff17\067\uff17\070\uff17\071\uff17" +
    "\072\uff17\073\uff17\074\uff17\075\uff17\076\uff17\077\uff17\100" +
    "\uff17\101\uff17\102\uff17\103\uff17\104\uff17\105\uff17\106\uff17" +
    "\107\uff17\110\uff17\111\uff17\112\uff17\113\uff17\114\uff17\115" +
    "\uff17\116\uff17\117\uff17\120\uff17\121\uff17\122\uff17\123\uff17" +
    "\124\uff17\125\uff17\126\uff17\127\uff17\130\uff17\131\uff17\132" +
    "\uff17\133\uff17\134\uff17\135\uff17\136\uff17\137\uff17\001\002" +
    "\000\172\003\ufef0\044\ufef0\046\ufef0\047\ufef0\050\ufef0\051" +
    "\ufef0\052\ufef0\053\ufef0\054\ufef0\055\ufef0\056\ufef0\057\ufef0" +
    "\060\ufef0\061\ufef0\062\ufef0\063\ufef0\064\ufef0\065\ufef0\066" +
    "\ufef0\067\ufef0\070\ufef0\071\ufef0\072\ufef0\073\ufef0\074\ufef0" +
    "\075\ufef0\076\ufef0\077\ufef0\100\ufef0\101\ufef0\102\ufef0\103" +
    "\ufef0\104\ufef0\105\ufef0\106\ufef0\107\ufef0\110\ufef0\111\ufef0" +
    "\112\ufef0\113\ufef0\114\ufef0\115\ufef0\116\ufef0\117\ufef0\120" +
    "\ufef0\121\ufef0\122\ufef0\123\ufef0\124\ufef0\125\ufef0\126\ufef0" +
    "\127\ufef0\130\ufef0\131\ufef0\132\ufef0\133\ufef0\134\ufef0\135" +
    "\ufef0\136\ufef0\137\ufef0\001\002\000\172\003\uff03\044\uff03" +
    "\046\uff03\047\uff03\050\uff03\051\uff03\052\uff03\053\uff03\054" +
    "\uff03\055\uff03\056\uff03\057\uff03\060\uff03\061\uff03\062\uff03" +
    "\063\uff03\064\uff03\065\uff03\066\uff03\067\uff03\070\uff03\071" +
    "\uff03\072\uff03\073\uff03\074\uff03\075\uff03\076\uff03\077\uff03" +
    "\100\uff03\101\uff03\102\uff03\103\uff03\104\uff03\105\uff03\106" +
    "\uff03\107\uff03\110\uff03\111\uff03\112\uff03\113\uff03\114\uff03" +
    "\115\uff03\116\uff03\117\uff03\120\uff03\121\uff03\122\uff03\123" +
    "\uff03\124\uff03\125\uff03\126\uff03\127\uff03\130\uff03\131\uff03" +
    "\132\uff03\133\uff03\134\uff03\135\uff03\136\uff03\137\uff03\001" +
    "\002\000\034\011\327\012\326\013\322\014\320\015\324" +
    "\016\316\017\321\020\323\021\325\022\330\023\315\024" +
    "\020\077\u0129\001\002\000\172\003\ufefc\044\ufefc\046\ufefc" +
    "\047\ufefc\050\ufefc\051\ufefc\052\ufefc\053\ufefc\054\ufefc\055" +
    "\ufefc\056\ufefc\057\ufefc\060\ufefc\061\ufefc\062\ufefc\063\ufefc" +
    "\064\ufefc\065\ufefc\066\ufefc\067\ufefc\070\ufefc\071\ufefc\072" +
    "\ufefc\073\ufefc\074\ufefc\075\ufefc\076\ufefc\077\ufefc\100\ufefc" +
    "\101\ufefc\102\ufefc\103\ufefc\104\ufefc\105\ufefc\106\ufefc\107" +
    "\ufefc\110\ufefc\111\ufefc\112\ufefc\113\ufefc\114\ufefc\115\ufefc" +
    "\116\ufefc\117\ufefc\120\ufefc\121\ufefc\122\ufefc\123\ufefc\124" +
    "\ufefc\125\ufefc\126\ufefc\127\ufefc\130\ufefc\131\ufefc\132\ufefc" +
    "\133\ufefc\134\ufefc\135\ufefc\136\ufefc\137\ufefc\001\002\000" +
    "\172\003\uff0c\044\uff0c\046\uff0c\047\uff0c\050\uff0c\051\uff0c" +
    "\052\uff0c\053\uff0c\054\uff0c\055\uff0c\056\uff0c\057\uff0c\060" +
    "\uff0c\061\uff0c\062\uff0c\063\uff0c\064\uff0c\065\uff0c\066\uff0c" +
    "\067\uff0c\070\uff0c\071\uff0c\072\uff0c\073\uff0c\074\uff0c\075" +
    "\uff0c\076\uff0c\077\uff0c\100\uff0c\101\uff0c\102\uff0c\103\uff0c" +
    "\104\uff0c\105\uff0c\106\uff0c\107\uff0c\110\uff0c\111\uff0c\112" +
    "\uff0c\113\uff0c\114\uff0c\115\uff0c\116\uff0c\117\uff0c\120\uff0c" +
    "\121\uff0c\122\uff0c\123\uff0c\124\uff0c\125\uff0c\126\uff0c\127" +
    "\uff0c\130\uff0c\131\uff0c\132\uff0c\133\uff0c\134\uff0c\135\uff0c" +
    "\136\uff0c\137\uff0c\001\002\000\172\003\uff18\044\uff18\046" +
    "\uff18\047\uff18\050\uff18\051\uff18\052\uff18\053\uff18\054\uff18" +
    "\055\uff18\056\uff18\057\uff18\060\uff18\061\uff18\062\uff18\063" +
    "\uff18\064\uff18\065\uff18\066\uff18\067\uff18\070\uff18\071\uff18" +
    "\072\uff18\073\uff18\074\uff18\075\uff18\076\uff18\077\uff18\100" +
    "\uff18\101\uff18\102\uff18\103\uff18\104\uff18\105\uff18\106\uff18" +
    "\107\uff18\110\uff18\111\uff18\112\uff18\113\uff18\114\uff18\115" +
    "\uff18\116\uff18\117\uff18\120\uff18\121\uff18\122\uff18\123\uff18" +
    "\124\uff18\125\uff18\126\uff18\127\uff18\130\uff18\131\uff18\132" +
    "\uff18\133\uff18\134\uff18\135\uff18\136\uff18\137\uff18\001\002" +
    "\000\006\002\uffd0\044\uffd0\001\002\000\172\003\ufef4\044" +
    "\ufef4\046\ufef4\047\ufef4\050\ufef4\051\ufef4\052\ufef4\053\ufef4" +
    "\054\ufef4\055\ufef4\056\ufef4\057\ufef4\060\ufef4\061\ufef4\062" +
    "\ufef4\063\ufef4\064\ufef4\065\ufef4\066\ufef4\067\ufef4\070\ufef4" +
    "\071\ufef4\072\ufef4\073\ufef4\074\ufef4\075\ufef4\076\ufef4\077" +
    "\ufef4\100\ufef4\101\ufef4\102\ufef4\103\ufef4\104\ufef4\105\ufef4" +
    "\106\ufef4\107\ufef4\110\ufef4\111\ufef4\112\ufef4\113\ufef4\114" +
    "\ufef4\115\ufef4\116\ufef4\117\ufef4\120\ufef4\121\ufef4\122\ufef4" +
    "\123\ufef4\124\ufef4\125\ufef4\126\ufef4\127\ufef4\130\ufef4\131" +
    "\ufef4\132\ufef4\133\ufef4\134\ufef4\135\ufef4\136\ufef4\137\ufef4" +
    "\001\002\000\172\003\uff0f\044\uff0f\046\uff0f\047\uff0f\050" +
    "\uff0f\051\uff0f\052\uff0f\053\uff0f\054\uff0f\055\uff0f\056\uff0f" +
    "\057\uff0f\060\uff0f\061\uff0f\062\uff0f\063\uff0f\064\uff0f\065" +
    "\uff0f\066\uff0f\067\uff0f\070\uff0f\071\uff0f\072\uff0f\073\uff0f" +
    "\074\uff0f\075\uff0f\076\uff0f\077\uff0f\100\uff0f\101\uff0f\102" +
    "\uff0f\103\uff0f\104\uff0f\105\uff0f\106\uff0f\107\uff0f\110\uff0f" +
    "\111\uff0f\112\uff0f\113\uff0f\114\uff0f\115\uff0f\116\uff0f\117" +
    "\uff0f\120\uff0f\121\uff0f\122\uff0f\123\uff0f\124\uff0f\125\uff0f" +
    "\126\uff0f\127\uff0f\130\uff0f\131\uff0f\132\uff0f\133\uff0f\134" +
    "\uff0f\135\uff0f\136\uff0f\137\uff0f\001\002\000\172\003\ufef6" +
    "\044\ufef6\046\ufef6\047\ufef6\050\ufef6\051\ufef6\052\ufef6\053" +
    "\ufef6\054\ufef6\055\ufef6\056\ufef6\057\ufef6\060\ufef6\061\ufef6" +
    "\062\ufef6\063\ufef6\064\ufef6\065\ufef6\066\ufef6\067\ufef6\070" +
    "\ufef6\071\ufef6\072\ufef6\073\ufef6\074\ufef6\075\ufef6\076\ufef6" +
    "\077\ufef6\100\ufef6\101\ufef6\102\ufef6\103\ufef6\104\ufef6\105" +
    "\ufef6\106\ufef6\107\ufef6\110\ufef6\111\ufef6\112\ufef6\113\ufef6" +
    "\114\ufef6\115\ufef6\116\ufef6\117\ufef6\120\ufef6\121\ufef6\122" +
    "\ufef6\123\ufef6\124\ufef6\125\ufef6\126\ufef6\127\ufef6\130\ufef6" +
    "\131\ufef6\132\ufef6\133\ufef6\134\ufef6\135\ufef6\136\ufef6\137" +
    "\ufef6\001\002\000\172\003\uffb1\044\uffb1\046\uffb1\047\uffb1" +
    "\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056" +
    "\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1" +
    "\065\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1\073" +
    "\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1\101\uffb1" +
    "\102\uffb1\103\uffb1\104\uffb1\105\uffb1\106\uffb1\107\uffb1\110" +
    "\uffb1\111\uffb1\112\uffb1\113\uffb1\114\uffb1\115\uffb1\116\uffb1" +
    "\117\uffb1\120\uffb1\121\uffb1\122\uffb1\123\uffb1\124\uffb1\125" +
    "\uffb1\126\uffb1\127\uffb1\130\uffb1\131\uffb1\132\uffb1\133\uffb1" +
    "\134\uffb1\135\uffb1\136\uffb1\137\uffb1\001\002\000\172\003" +
    "\260\044\u0123\046\245\047\215\050\223\051\273\052\234" +
    "\053\162\054\214\055\255\056\302\057\265\060\231\061" +
    "\274\062\172\063\262\064\307\065\201\066\220\067\275" +
    "\070\225\071\222\072\257\073\224\074\232\075\252\076" +
    "\164\077\226\100\205\101\177\102\266\103\246\104\175" +
    "\105\276\106\241\107\256\110\305\111\210\112\306\113" +
    "\272\114\204\115\176\116\203\117\236\120\240\121\237" +
    "\122\304\123\227\124\211\125\254\126\207\127\264\130" +
    "\301\131\277\132\200\133\165\134\263\135\173\136\235" +
    "\137\171\001\002\000\172\003\uff24\044\uff24\046\uff24\047" +
    "\uff24\050\uff24\051\uff24\052\uff24\053\uff24\054\uff24\055\uff24" +
    "\056\uff24\057\uff24\060\uff24\061\uff24\062\uff24\063\uff24\064" +
    "\uff24\065\uff24\066\uff24\067\uff24\070\uff24\071\uff24\072\uff24" +
    "\073\uff24\074\uff24\075\uff24\076\uff24\077\uff24\100\uff24\101" +
    "\uff24\102\uff24\103\uff24\104\uff24\105\uff24\106\uff24\107\uff24" +
    "\110\uff24\111\uff24\112\uff24\113\uff24\114\uff24\115\uff24\116" +
    "\uff24\117\uff24\120\uff24\121\uff24\122\uff24\123\uff24\124\uff24" +
    "\125\uff24\126\uff24\127\uff24\130\uff24\131\uff24\132\uff24\133" +
    "\uff24\134\uff24\135\uff24\136\uff24\137\uff24\001\002\000\172" +
    "\003\uff20\044\uff20\046\uff20\047\uff20\050\uff20\051\uff20\052" +
    "\uff20\053\uff20\054\uff20\055\uff20\056\uff20\057\uff20\060\uff20" +
    "\061\uff20\062\uff20\063\uff20\064\uff20\065\uff20\066\uff20\067" +
    "\uff20\070\uff20\071\uff20\072\uff20\073\uff20\074\uff20\075\uff20" +
    "\076\uff20\077\uff20\100\uff20\101\uff20\102\uff20\103\uff20\104" +
    "\uff20\105\uff20\106\uff20\107\uff20\110\uff20\111\uff20\112\uff20" +
    "\113\uff20\114\uff20\115\uff20\116\uff20\117\uff20\120\uff20\121" +
    "\uff20\122\uff20\123\uff20\124\uff20\125\uff20\126\uff20\127\uff20" +
    "\130\uff20\131\uff20\132\uff20\133\uff20\134\uff20\135\uff20\136" +
    "\uff20\137\uff20\001\002\000\172\003\uffaf\044\uffaf\046\uffaf" +
    "\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055" +
    "\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf" +
    "\064\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf\072" +
    "\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf\100\uffaf" +
    "\101\uffaf\102\uffaf\103\uffaf\104\uffaf\105\uffaf\106\uffaf\107" +
    "\uffaf\110\uffaf\111\uffaf\112\uffaf\113\uffaf\114\uffaf\115\uffaf" +
    "\116\uffaf\117\uffaf\120\uffaf\121\uffaf\122\uffaf\123\uffaf\124" +
    "\uffaf\125\uffaf\126\uffaf\127\uffaf\130\uffaf\131\uffaf\132\uffaf" +
    "\133\uffaf\134\uffaf\135\uffaf\136\uffaf\137\uffaf\001\002\000" +
    "\172\003\260\044\u011c\046\245\047\215\050\223\051\273" +
    "\052\234\053\162\054\214\055\255\056\302\057\265\060" +
    "\231\061\274\062\172\063\262\064\307\065\201\066\220" +
    "\067\275\070\225\071\222\072\257\073\224\074\232\075" +
    "\252\076\164\077\226\100\205\101\177\102\266\103\246" +
    "\104\175\105\276\106\241\107\256\110\305\111\210\112" +
    "\306\113\272\114\204\115\176\116\203\117\236\120\240" +
    "\121\237\122\304\123\227\124\211\125\254\126\207\127" +
    "\264\130\301\131\277\132\200\133\165\134\263\135\173" +
    "\136\235\137\171\001\002\000\172\003\uff02\044\uff02\046" +
    "\uff02\047\uff02\050\uff02\051\uff02\052\uff02\053\uff02\054\uff02" +
    "\055\uff02\056\uff02\057\uff02\060\uff02\061\uff02\062\uff02\063" +
    "\uff02\064\uff02\065\uff02\066\uff02\067\uff02\070\uff02\071\uff02" +
    "\072\uff02\073\uff02\074\uff02\075\uff02\076\uff02\077\uff02\100" +
    "\uff02\101\uff02\102\uff02\103\uff02\104\uff02\105\uff02\106\uff02" +
    "\107\uff02\110\uff02\111\uff02\112\uff02\113\uff02\114\uff02\115" +
    "\uff02\116\uff02\117\uff02\120\uff02\121\uff02\122\uff02\123\uff02" +
    "\124\uff02\125\uff02\126\uff02\127\uff02\130\uff02\131\uff02\132" +
    "\uff02\133\uff02\134\uff02\135\uff02\136\uff02\137\uff02\001\002" +
    "\000\172\003\260\044\u0115\046\245\047\215\050\223\051" +
    "\273\052\234\053\162\054\214\055\255\056\302\057\265" +
    "\060\231\061\274\062\172\063\262\064\307\065\201\066" +
    "\220\067\275\070\225\071\222\072\257\073\224\074\232" +
    "\075\252\076\164\077\226\100\205\101\177\102\266\103" +
    "\246\104\175\105\276\106\241\107\256\110\305\111\210" +
    "\112\306\113\272\114\204\115\176\116\203\117\236\120" +
    "\240\121\237\122\304\123\227\124\211\125\254\126\207" +
    "\127\264\130\301\131\277\132\200\133\165\134\263\135" +
    "\173\136\235\137\171\001\002\000\172\003\ufeff\044\ufeff" +
    "\046\ufeff\047\ufeff\050\ufeff\051\ufeff\052\ufeff\053\ufeff\054" +
    "\ufeff\055\ufeff\056\ufeff\057\ufeff\060\ufeff\061\ufeff\062\ufeff" +
    "\063\ufeff\064\ufeff\065\ufeff\066\ufeff\067\ufeff\070\ufeff\071" +
    "\ufeff\072\ufeff\073\ufeff\074\ufeff\075\ufeff\076\ufeff\077\ufeff" +
    "\100\ufeff\101\ufeff\102\ufeff\103\ufeff\104\ufeff\105\ufeff\106" +
    "\ufeff\107\ufeff\110\ufeff\111\ufeff\112\ufeff\113\ufeff\114\ufeff" +
    "\115\ufeff\116\ufeff\117\ufeff\120\ufeff\121\ufeff\122\ufeff\123" +
    "\ufeff\124\ufeff\125\ufeff\126\ufeff\127\ufeff\130\ufeff\131\ufeff" +
    "\132\ufeff\133\ufeff\134\ufeff\135\ufeff\136\ufeff\137\ufeff\001" +
    "\002\000\172\003\uff1f\044\uff1f\046\uff1f\047\uff1f\050\uff1f" +
    "\051\uff1f\052\uff1f\053\uff1f\054\uff1f\055\uff1f\056\uff1f\057" +
    "\uff1f\060\uff1f\061\uff1f\062\uff1f\063\uff1f\064\uff1f\065\uff1f" +
    "\066\uff1f\067\uff1f\070\uff1f\071\uff1f\072\uff1f\073\uff1f\074" +
    "\uff1f\075\uff1f\076\uff1f\077\uff1f\100\uff1f\101\uff1f\102\uff1f" +
    "\103\uff1f\104\uff1f\105\uff1f\106\uff1f\107\uff1f\110\uff1f\111" +
    "\uff1f\112\uff1f\113\uff1f\114\uff1f\115\uff1f\116\uff1f\117\uff1f" +
    "\120\uff1f\121\uff1f\122\uff1f\123\uff1f\124\uff1f\125\uff1f\126" +
    "\uff1f\127\uff1f\130\uff1f\131\uff1f\132\uff1f\133\uff1f\134\uff1f" +
    "\135\uff1f\136\uff1f\137\uff1f\001\002\000\172\003\ufefd\044" +
    "\ufefd\046\ufefd\047\ufefd\050\ufefd\051\ufefd\052\ufefd\053\ufefd" +
    "\054\ufefd\055\ufefd\056\ufefd\057\ufefd\060\ufefd\061\ufefd\062" +
    "\ufefd\063\ufefd\064\ufefd\065\ufefd\066\ufefd\067\ufefd\070\ufefd" +
    "\071\ufefd\072\ufefd\073\ufefd\074\ufefd\075\ufefd\076\ufefd\077" +
    "\ufefd\100\ufefd\101\ufefd\102\ufefd\103\ufefd\104\ufefd\105\ufefd" +
    "\106\ufefd\107\ufefd\110\ufefd\111\ufefd\112\ufefd\113\ufefd\114" +
    "\ufefd\115\ufefd\116\ufefd\117\ufefd\120\ufefd\121\ufefd\122\ufefd" +
    "\123\ufefd\124\ufefd\125\ufefd\126\ufefd\127\ufefd\130\ufefd\131" +
    "\ufefd\132\ufefd\133\ufefd\134\ufefd\135\ufefd\136\ufefd\137\ufefd" +
    "\001\002\000\172\003\uff00\044\uff00\046\uff00\047\uff00\050" +
    "\uff00\051\uff00\052\uff00\053\uff00\054\uff00\055\uff00\056\uff00" +
    "\057\uff00\060\uff00\061\uff00\062\uff00\063\uff00\064\uff00\065" +
    "\uff00\066\uff00\067\uff00\070\uff00\071\uff00\072\uff00\073\uff00" +
    "\074\uff00\075\uff00\076\uff00\077\uff00\100\uff00\101\uff00\102" +
    "\uff00\103\uff00\104\uff00\105\uff00\106\uff00\107\uff00\110\uff00" +
    "\111\uff00\112\uff00\113\uff00\114\uff00\115\uff00\116\uff00\117" +
    "\uff00\120\uff00\121\uff00\122\uff00\123\uff00\124\uff00\125\uff00" +
    "\126\uff00\127\uff00\130\uff00\131\uff00\132\uff00\133\uff00\134" +
    "\uff00\135\uff00\136\uff00\137\uff00\001\002\000\172\003\uff19" +
    "\044\uff19\046\uff19\047\uff19\050\uff19\051\uff19\052\uff19\053" +
    "\uff19\054\uff19\055\uff19\056\uff19\057\uff19\060\uff19\061\uff19" +
    "\062\uff19\063\uff19\064\uff19\065\uff19\066\uff19\067\uff19\070" +
    "\uff19\071\uff19\072\uff19\073\uff19\074\uff19\075\uff19\076\uff19" +
    "\077\uff19\100\uff19\101\uff19\102\uff19\103\uff19\104\uff19\105" +
    "\uff19\106\uff19\107\uff19\110\uff19\111\uff19\112\uff19\113\uff19" +
    "\114\uff19\115\uff19\116\uff19\117\uff19\120\uff19\121\uff19\122" +
    "\uff19\123\uff19\124\uff19\125\uff19\126\uff19\127\uff19\130\uff19" +
    "\131\uff19\132\uff19\133\uff19\134\uff19\135\uff19\136\uff19\137" +
    "\uff19\001\002\000\172\003\ufef7\044\ufef7\046\ufef7\047\ufef7" +
    "\050\ufef7\051\ufef7\052\ufef7\053\ufef7\054\ufef7\055\ufef7\056" +
    "\ufef7\057\ufef7\060\ufef7\061\ufef7\062\ufef7\063\ufef7\064\ufef7" +
    "\065\ufef7\066\ufef7\067\ufef7\070\ufef7\071\ufef7\072\ufef7\073" +
    "\ufef7\074\ufef7\075\ufef7\076\ufef7\077\ufef7\100\ufef7\101\ufef7" +
    "\102\ufef7\103\ufef7\104\ufef7\105\ufef7\106\ufef7\107\ufef7\110" +
    "\ufef7\111\ufef7\112\ufef7\113\ufef7\114\ufef7\115\ufef7\116\ufef7" +
    "\117\ufef7\120\ufef7\121\ufef7\122\ufef7\123\ufef7\124\ufef7\125" +
    "\ufef7\126\ufef7\127\ufef7\130\ufef7\131\ufef7\132\ufef7\133\ufef7" +
    "\134\ufef7\135\ufef7\136\ufef7\137\ufef7\001\002\000\172\003" +
    "\uffae\044\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae" +
    "\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061" +
    "\uffae\062\uffae\063\uffae\064\uffae\065\uffae\066\uffae\067\uffae" +
    "\070\uffae\071\uffae\072\uffae\073\uffae\074\uffae\075\uffae\076" +
    "\uffae\077\uffae\100\uffae\101\uffae\102\uffae\103\uffae\104\uffae" +
    "\105\uffae\106\uffae\107\uffae\110\uffae\111\uffae\112\uffae\113" +
    "\uffae\114\uffae\115\uffae\116\uffae\117\uffae\120\uffae\121\uffae" +
    "\122\uffae\123\uffae\124\uffae\125\uffae\126\uffae\127\uffae\130" +
    "\uffae\131\uffae\132\uffae\133\uffae\134\uffae\135\uffae\136\uffae" +
    "\137\uffae\001\002\000\172\003\uff08\044\uff08\046\uff08\047" +
    "\uff08\050\uff08\051\uff08\052\uff08\053\uff08\054\uff08\055\uff08" +
    "\056\uff08\057\uff08\060\uff08\061\uff08\062\uff08\063\uff08\064" +
    "\uff08\065\uff08\066\uff08\067\uff08\070\uff08\071\uff08\072\uff08" +
    "\073\uff08\074\uff08\075\uff08\076\uff08\077\uff08\100\uff08\101" +
    "\uff08\102\uff08\103\uff08\104\uff08\105\uff08\106\uff08\107\uff08" +
    "\110\uff08\111\uff08\112\uff08\113\uff08\114\uff08\115\uff08\116" +
    "\uff08\117\uff08\120\uff08\121\uff08\122\uff08\123\uff08\124\uff08" +
    "\125\uff08\126\uff08\127\uff08\130\uff08\131\uff08\132\uff08\133" +
    "\uff08\134\uff08\135\uff08\136\uff08\137\uff08\001\002\000\172" +
    "\003\uff1c\044\uff1c\046\uff1c\047\uff1c\050\uff1c\051\uff1c\052" +
    "\uff1c\053\uff1c\054\uff1c\055\uff1c\056\uff1c\057\uff1c\060\uff1c" +
    "\061\uff1c\062\uff1c\063\uff1c\064\uff1c\065\uff1c\066\uff1c\067" +
    "\uff1c\070\uff1c\071\uff1c\072\uff1c\073\uff1c\074\uff1c\075\uff1c" +
    "\076\uff1c\077\uff1c\100\uff1c\101\uff1c\102\uff1c\103\uff1c\104" +
    "\uff1c\105\uff1c\106\uff1c\107\uff1c\110\uff1c\111\uff1c\112\uff1c" +
    "\113\uff1c\114\uff1c\115\uff1c\116\uff1c\117\uff1c\120\uff1c\121" +
    "\uff1c\122\uff1c\123\uff1c\124\uff1c\125\uff1c\126\uff1c\127\uff1c" +
    "\130\uff1c\131\uff1c\132\uff1c\133\uff1c\134\uff1c\135\uff1c\136" +
    "\uff1c\137\uff1c\001\002\000\172\003\260\044\u010d\046\245" +
    "\047\215\050\223\051\273\052\234\053\162\054\214\055" +
    "\255\056\302\057\265\060\231\061\274\062\172\063\262" +
    "\064\307\065\201\066\220\067\275\070\225\071\222\072" +
    "\257\073\224\074\232\075\252\076\164\077\226\100\205" +
    "\101\177\102\266\103\246\104\175\105\276\106\241\107" +
    "\256\110\305\111\210\112\306\113\272\114\204\115\176" +
    "\116\203\117\236\120\240\121\237\122\304\123\227\124" +
    "\211\125\254\126\207\127\264\130\301\131\277\132\200" +
    "\133\165\134\263\135\173\136\235\137\171\001\002\000" +
    "\172\003\uff1e\044\uff1e\046\uff1e\047\uff1e\050\uff1e\051\uff1e" +
    "\052\uff1e\053\uff1e\054\uff1e\055\uff1e\056\uff1e\057\uff1e\060" +
    "\uff1e\061\uff1e\062\uff1e\063\uff1e\064\uff1e\065\uff1e\066\uff1e" +
    "\067\uff1e\070\uff1e\071\uff1e\072\uff1e\073\uff1e\074\uff1e\075" +
    "\uff1e\076\uff1e\077\uff1e\100\uff1e\101\uff1e\102\uff1e\103\uff1e" +
    "\104\uff1e\105\uff1e\106\uff1e\107\uff1e\110\uff1e\111\uff1e\112" +
    "\uff1e\113\uff1e\114\uff1e\115\uff1e\116\uff1e\117\uff1e\120\uff1e" +
    "\121\uff1e\122\uff1e\123\uff1e\124\uff1e\125\uff1e\126\uff1e\127" +
    "\uff1e\130\uff1e\131\uff1e\132\uff1e\133\uff1e\134\uff1e\135\uff1e" +
    "\136\uff1e\137\uff1e\001\002\000\172\003\ufeec\044\ufeec\046" +
    "\ufeec\047\ufeec\050\ufeec\051\ufeec\052\ufeec\053\ufeec\054\ufeec" +
    "\055\ufeec\056\ufeec\057\ufeec\060\ufeec\061\ufeec\062\ufeec\063" +
    "\ufeec\064\ufeec\065\ufeec\066\ufeec\067\ufeec\070\ufeec\071\ufeec" +
    "\072\ufeec\073\ufeec\074\ufeec\075\ufeec\076\ufeec\077\ufeec\100" +
    "\ufeec\101\ufeec\102\ufeec\103\ufeec\104\ufeec\105\ufeec\106\ufeec" +
    "\107\ufeec\110\ufeec\111\ufeec\112\ufeec\113\ufeec\114\ufeec\115" +
    "\ufeec\116\ufeec\117\ufeec\120\ufeec\121\ufeec\122\ufeec\123\ufeec" +
    "\124\ufeec\125\ufeec\126\ufeec\127\ufeec\130\ufeec\131\ufeec\132" +
    "\ufeec\133\ufeec\134\ufeec\135\ufeec\136\ufeec\137\ufeec\001\002" +
    "\000\172\003\ufefb\044\ufefb\046\ufefb\047\ufefb\050\ufefb\051" +
    "\ufefb\052\ufefb\053\ufefb\054\ufefb\055\ufefb\056\ufefb\057\ufefb" +
    "\060\ufefb\061\ufefb\062\ufefb\063\ufefb\064\ufefb\065\ufefb\066" +
    "\ufefb\067\ufefb\070\ufefb\071\ufefb\072\ufefb\073\ufefb\074\ufefb" +
    "\075\ufefb\076\ufefb\077\ufefb\100\ufefb\101\ufefb\102\ufefb\103" +
    "\ufefb\104\ufefb\105\ufefb\106\ufefb\107\ufefb\110\ufefb\111\ufefb" +
    "\112\ufefb\113\ufefb\114\ufefb\115\ufefb\116\ufefb\117\ufefb\120" +
    "\ufefb\121\ufefb\122\ufefb\123\ufefb\124\ufefb\125\ufefb\126\ufefb" +
    "\127\ufefb\130\ufefb\131\ufefb\132\ufefb\133\ufefb\134\ufefb\135" +
    "\ufefb\136\ufefb\137\ufefb\001\002\000\172\003\ufef9\044\ufef9" +
    "\046\ufef9\047\ufef9\050\ufef9\051\ufef9\052\ufef9\053\ufef9\054" +
    "\ufef9\055\ufef9\056\ufef9\057\ufef9\060\ufef9\061\ufef9\062\ufef9" +
    "\063\ufef9\064\ufef9\065\ufef9\066\ufef9\067\ufef9\070\ufef9\071" +
    "\ufef9\072\ufef9\073\ufef9\074\ufef9\075\ufef9\076\ufef9\077\ufef9" +
    "\100\ufef9\101\ufef9\102\ufef9\103\ufef9\104\ufef9\105\ufef9\106" +
    "\ufef9\107\ufef9\110\ufef9\111\ufef9\112\ufef9\113\ufef9\114\ufef9" +
    "\115\ufef9\116\ufef9\117\ufef9\120\ufef9\121\ufef9\122\ufef9\123" +
    "\ufef9\124\ufef9\125\ufef9\126\ufef9\127\ufef9\130\ufef9\131\ufef9" +
    "\132\ufef9\133\ufef9\134\ufef9\135\ufef9\136\ufef9\137\ufef9\001" +
    "\002\000\172\003\ufefa\044\ufefa\046\ufefa\047\ufefa\050\ufefa" +
    "\051\ufefa\052\ufefa\053\ufefa\054\ufefa\055\ufefa\056\ufefa\057" +
    "\ufefa\060\ufefa\061\ufefa\062\ufefa\063\ufefa\064\ufefa\065\ufefa" +
    "\066\ufefa\067\ufefa\070\ufefa\071\ufefa\072\ufefa\073\ufefa\074" +
    "\ufefa\075\ufefa\076\ufefa\077\ufefa\100\ufefa\101\ufefa\102\ufefa" +
    "\103\ufefa\104\ufefa\105\ufefa\106\ufefa\107\ufefa\110\ufefa\111" +
    "\ufefa\112\ufefa\113\ufefa\114\ufefa\115\ufefa\116\ufefa\117\ufefa" +
    "\120\ufefa\121\ufefa\122\ufefa\123\ufefa\124\ufefa\125\ufefa\126" +
    "\ufefa\127\ufefa\130\ufefa\131\ufefa\132\ufefa\133\ufefa\134\ufefa" +
    "\135\ufefa\136\ufefa\137\ufefa\001\002\000\172\003\uff12\044" +
    "\uff12\046\uff12\047\uff12\050\uff12\051\uff12\052\uff12\053\uff12" +
    "\054\uff12\055\uff12\056\uff12\057\uff12\060\uff12\061\uff12\062" +
    "\uff12\063\uff12\064\uff12\065\uff12\066\uff12\067\uff12\070\uff12" +
    "\071\uff12\072\uff12\073\uff12\074\uff12\075\uff12\076\uff12\077" +
    "\uff12\100\uff12\101\uff12\102\uff12\103\uff12\104\uff12\105\uff12" +
    "\106\uff12\107\uff12\110\uff12\111\uff12\112\uff12\113\uff12\114" +
    "\uff12\115\uff12\116\uff12\117\uff12\120\uff12\121\uff12\122\uff12" +
    "\123\uff12\124\uff12\125\uff12\126\uff12\127\uff12\130\uff12\131" +
    "\uff12\132\uff12\133\uff12\134\uff12\135\uff12\136\uff12\137\uff12" +
    "\001\002\000\172\003\uffb3\044\uffb3\046\uffb3\047\uffb3\050" +
    "\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3" +
    "\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3\065" +
    "\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3\072\uffb3\073\uffb3" +
    "\074\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3\101\uffb3\102" +
    "\uffb3\103\uffb3\104\uffb3\105\uffb3\106\uffb3\107\uffb3\110\uffb3" +
    "\111\uffb3\112\uffb3\113\uffb3\114\uffb3\115\uffb3\116\uffb3\117" +
    "\uffb3\120\uffb3\121\uffb3\122\uffb3\123\uffb3\124\uffb3\125\uffb3" +
    "\126\uffb3\127\uffb3\130\uffb3\131\uffb3\132\uffb3\133\uffb3\134" +
    "\uffb3\135\uffb3\136\uffb3\137\uffb3\001\002\000\172\003\260" +
    "\044\u0106\046\245\047\215\050\223\051\273\052\234\053" +
    "\162\054\214\055\255\056\302\057\265\060\231\061\274" +
    "\062\172\063\262\064\307\065\201\066\220\067\275\070" +
    "\225\071\222\072\257\073\224\074\232\075\252\076\164" +
    "\077\226\100\205\101\177\102\266\103\246\104\175\105" +
    "\276\106\241\107\256\110\305\111\210\112\306\113\272" +
    "\114\204\115\176\116\203\117\236\120\240\121\237\122" +
    "\304\123\227\124\211\125\254\126\207\127\264\130\301" +
    "\131\277\132\200\133\165\134\263\135\173\136\235\137" +
    "\171\001\002\000\172\003\260\044\202\046\245\047\215" +
    "\050\223\051\273\052\234\053\162\054\214\055\255\056" +
    "\302\057\265\060\231\061\274\062\172\063\262\064\307" +
    "\065\201\066\220\067\275\070\225\071\222\072\257\073" +
    "\224\074\232\075\252\076\164\077\226\100\205\101\177" +
    "\102\266\103\246\104\175\105\276\106\241\107\256\110" +
    "\305\111\210\112\306\113\272\114\204\115\176\116\203" +
    "\117\236\120\240\121\237\122\304\123\227\124\211\125" +
    "\254\126\207\127\264\130\301\131\277\132\200\133\165" +
    "\134\263\135\173\136\235\137\171\001\002\000\172\003" +
    "\uff22\044\uff22\046\uff22\047\uff22\050\uff22\051\uff22\052\uff22" +
    "\053\uff22\054\uff22\055\uff22\056\uff22\057\uff22\060\uff22\061" +
    "\uff22\062\uff22\063\uff22\064\uff22\065\uff22\066\uff22\067\uff22" +
    "\070\uff22\071\uff22\072\uff22\073\uff22\074\uff22\075\uff22\076" +
    "\uff22\077\uff22\100\uff22\101\uff22\102\uff22\103\uff22\104\uff22" +
    "\105\uff22\106\uff22\107\uff22\110\uff22\111\uff22\112\uff22\113" +
    "\uff22\114\uff22\115\uff22\116\uff22\117\uff22\120\uff22\121\uff22" +
    "\122\uff22\123\uff22\124\uff22\125\uff22\126\uff22\127\uff22\130" +
    "\uff22\131\uff22\132\uff22\133\uff22\134\uff22\135\uff22\136\uff22" +
    "\137\uff22\001\002\000\172\003\uff15\044\uff15\046\uff15\047" +
    "\uff15\050\uff15\051\uff15\052\uff15\053\uff15\054\uff15\055\uff15" +
    "\056\uff15\057\uff15\060\uff15\061\uff15\062\uff15\063\uff15\064" +
    "\uff15\065\uff15\066\uff15\067\uff15\070\uff15\071\uff15\072\uff15" +
    "\073\uff15\074\uff15\075\uff15\076\uff15\077\uff15\100\uff15\101" +
    "\uff15\102\uff15\103\uff15\104\uff15\105\uff15\106\uff15\107\uff15" +
    "\110\uff15\111\uff15\112\uff15\113\uff15\114\uff15\115\uff15\116" +
    "\uff15\117\uff15\120\uff15\121\uff15\122\uff15\123\uff15\124\uff15" +
    "\125\uff15\126\uff15\127\uff15\130\uff15\131\uff15\132\uff15\133" +
    "\uff15\134\uff15\135\uff15\136\uff15\137\uff15\001\002\000\172" +
    "\003\uffb7\044\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052" +
    "\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7" +
    "\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\067" +
    "\uffb7\070\uffb7\071\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7" +
    "\076\uffb7\077\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7\104" +
    "\uffb7\105\uffb7\106\uffb7\107\uffb7\110\uffb7\111\uffb7\112\uffb7" +
    "\113\uffb7\114\uffb7\115\uffb7\116\uffb7\117\uffb7\120\uffb7\121" +
    "\uffb7\122\uffb7\123\uffb7\124\uffb7\125\uffb7\126\uffb7\127\uffb7" +
    "\130\uffb7\131\uffb7\132\uffb7\133\uffb7\134\uffb7\135\uffb7\136" +
    "\uffb7\137\uffb7\001\002\000\172\003\260\044\376\046\245" +
    "\047\215\050\223\051\273\052\234\053\162\054\214\055" +
    "\255\056\302\057\265\060\231\061\274\062\172\063\262" +
    "\064\307\065\201\066\220\067\275\070\225\071\222\072" +
    "\257\073\224\074\232\075\252\076\164\077\226\100\205" +
    "\101\177\102\266\103\246\104\175\105\276\106\241\107" +
    "\256\110\305\111\210\112\306\113\272\114\204\115\176" +
    "\116\203\117\236\120\240\121\237\122\304\123\227\124" +
    "\211\125\254\126\207\127\264\130\301\131\277\132\200" +
    "\133\165\134\263\135\173\136\235\137\171\001\002\000" +
    "\172\003\uffac\044\uffac\046\uffac\047\uffac\050\uffac\051\uffac" +
    "\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac\060" +
    "\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065\uffac\066\uffac" +
    "\067\uffac\070\uffac\071\uffac\072\uffac\073\uffac\074\uffac\075" +
    "\uffac\076\uffac\077\uffac\100\uffac\101\uffac\102\uffac\103\uffac" +
    "\104\uffac\105\uffac\106\uffac\107\uffac\110\uffac\111\uffac\112" +
    "\uffac\113\uffac\114\uffac\115\uffac\116\uffac\117\uffac\120\uffac" +
    "\121\uffac\122\uffac\123\uffac\124\uffac\125\uffac\126\uffac\127" +
    "\uffac\130\uffac\131\uffac\132\uffac\133\uffac\134\uffac\135\uffac" +
    "\136\uffac\137\uffac\001\002\000\172\003\uff1b\044\uff1b\046" +
    "\uff1b\047\uff1b\050\uff1b\051\uff1b\052\uff1b\053\uff1b\054\uff1b" +
    "\055\uff1b\056\uff1b\057\uff1b\060\uff1b\061\uff1b\062\uff1b\063" +
    "\uff1b\064\uff1b\065\uff1b\066\uff1b\067\uff1b\070\uff1b\071\uff1b" +
    "\072\uff1b\073\uff1b\074\uff1b\075\uff1b\076\uff1b\077\uff1b\100" +
    "\uff1b\101\uff1b\102\uff1b\103\uff1b\104\uff1b\105\uff1b\106\uff1b" +
    "\107\uff1b\110\uff1b\111\uff1b\112\uff1b\113\uff1b\114\uff1b\115" +
    "\uff1b\116\uff1b\117\uff1b\120\uff1b\121\uff1b\122\uff1b\123\uff1b" +
    "\124\uff1b\125\uff1b\126\uff1b\127\uff1b\130\uff1b\131\uff1b\132" +
    "\uff1b\133\uff1b\134\uff1b\135\uff1b\136\uff1b\137\uff1b\001\002" +
    "\000\172\003\260\044\367\046\245\047\215\050\223\051" +
    "\273\052\234\053\162\054\214\055\255\056\302\057\265" +
    "\060\231\061\274\062\172\063\262\064\307\065\201\066" +
    "\220\067\275\070\225\071\222\072\257\073\224\074\232" +
    "\075\252\076\164\077\226\100\205\101\177\102\266\103" +
    "\246\104\175\105\276\106\241\107\256\110\305\111\210" +
    "\112\306\113\272\114\204\115\176\116\203\117\236\120" +
    "\240\121\237\122\304\123\227\124\211\125\254\126\207" +
    "\127\264\130\301\131\277\132\200\133\165\134\263\135" +
    "\173\136\235\137\171\001\002\000\172\003\ufef5\044\ufef5" +
    "\046\ufef5\047\ufef5\050\ufef5\051\ufef5\052\ufef5\053\ufef5\054" +
    "\ufef5\055\ufef5\056\ufef5\057\ufef5\060\ufef5\061\ufef5\062\ufef5" +
    "\063\ufef5\064\ufef5\065\ufef5\066\ufef5\067\ufef5\070\ufef5\071" +
    "\ufef5\072\ufef5\073\ufef5\074\ufef5\075\ufef5\076\ufef5\077\ufef5" +
    "\100\ufef5\101\ufef5\102\ufef5\103\ufef5\104\ufef5\105\ufef5\106" +
    "\ufef5\107\ufef5\110\ufef5\111\ufef5\112\ufef5\113\ufef5\114\ufef5" +
    "\115\ufef5\116\ufef5\117\ufef5\120\ufef5\121\ufef5\122\ufef5\123" +
    "\ufef5\124\ufef5\125\ufef5\126\ufef5\127\ufef5\130\ufef5\131\ufef5" +
    "\132\ufef5\133\ufef5\134\ufef5\135\ufef5\136\ufef5\137\ufef5\001" +
    "\002\000\172\003\uff1d\044\uff1d\046\uff1d\047\uff1d\050\uff1d" +
    "\051\uff1d\052\uff1d\053\uff1d\054\uff1d\055\uff1d\056\uff1d\057" +
    "\uff1d\060\uff1d\061\uff1d\062\uff1d\063\uff1d\064\uff1d\065\uff1d" +
    "\066\uff1d\067\uff1d\070\uff1d\071\uff1d\072\uff1d\073\uff1d\074" +
    "\uff1d\075\uff1d\076\uff1d\077\uff1d\100\uff1d\101\uff1d\102\uff1d" +
    "\103\uff1d\104\uff1d\105\uff1d\106\uff1d\107\uff1d\110\uff1d\111" +
    "\uff1d\112\uff1d\113\uff1d\114\uff1d\115\uff1d\116\uff1d\117\uff1d" +
    "\120\uff1d\121\uff1d\122\uff1d\123\uff1d\124\uff1d\125\uff1d\126" +
    "\uff1d\127\uff1d\130\uff1d\131\uff1d\132\uff1d\133\uff1d\134\uff1d" +
    "\135\uff1d\136\uff1d\137\uff1d\001\002\000\172\003\uff11\044" +
    "\uff11\046\uff11\047\uff11\050\uff11\051\uff11\052\uff11\053\uff11" +
    "\054\uff11\055\uff11\056\uff11\057\uff11\060\uff11\061\uff11\062" +
    "\uff11\063\uff11\064\uff11\065\uff11\066\uff11\067\uff11\070\uff11" +
    "\071\uff11\072\uff11\073\uff11\074\uff11\075\uff11\076\uff11\077" +
    "\uff11\100\uff11\101\uff11\102\uff11\103\uff11\104\uff11\105\uff11" +
    "\106\uff11\107\uff11\110\uff11\111\uff11\112\uff11\113\uff11\114" +
    "\uff11\115\uff11\116\uff11\117\uff11\120\uff11\121\uff11\122\uff11" +
    "\123\uff11\124\uff11\125\uff11\126\uff11\127\uff11\130\uff11\131" +
    "\uff11\132\uff11\133\uff11\134\uff11\135\uff11\136\uff11\137\uff11" +
    "\001\002\000\172\003\ufefe\044\ufefe\046\ufefe\047\ufefe\050" +
    "\ufefe\051\ufefe\052\ufefe\053\ufefe\054\ufefe\055\ufefe\056\ufefe" +
    "\057\ufefe\060\ufefe\061\ufefe\062\ufefe\063\ufefe\064\ufefe\065" +
    "\ufefe\066\ufefe\067\ufefe\070\ufefe\071\ufefe\072\ufefe\073\ufefe" +
    "\074\ufefe\075\ufefe\076\ufefe\077\ufefe\100\ufefe\101\ufefe\102" +
    "\ufefe\103\ufefe\104\ufefe\105\ufefe\106\ufefe\107\ufefe\110\ufefe" +
    "\111\ufefe\112\ufefe\113\ufefe\114\ufefe\115\ufefe\116\ufefe\117" +
    "\ufefe\120\ufefe\121\ufefe\122\ufefe\123\ufefe\124\ufefe\125\ufefe" +
    "\126\ufefe\127\ufefe\130\ufefe\131\ufefe\132\ufefe\133\ufefe\134" +
    "\ufefe\135\ufefe\136\ufefe\137\ufefe\001\002\000\172\003\uffaa" +
    "\044\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053" +
    "\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa" +
    "\062\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa\070" +
    "\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa\075\uffaa\076\uffaa" +
    "\077\uffaa\100\uffaa\101\uffaa\102\uffaa\103\uffaa\104\uffaa\105" +
    "\uffaa\106\uffaa\107\uffaa\110\uffaa\111\uffaa\112\uffaa\113\uffaa" +
    "\114\uffaa\115\uffaa\116\uffaa\117\uffaa\120\uffaa\121\uffaa\122" +
    "\uffaa\123\uffaa\124\uffaa\125\uffaa\126\uffaa\127\uffaa\130\uffaa" +
    "\131\uffaa\132\uffaa\133\uffaa\134\uffaa\135\uffaa\136\uffaa\137" +
    "\uffaa\001\002\000\172\003\uffab\044\uffab\046\uffab\047\uffab" +
    "\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056" +
    "\uffab\057\uffab\060\uffab\061\uffab\062\uffab\063\uffab\064\uffab" +
    "\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab\072\uffab\073" +
    "\uffab\074\uffab\075\uffab\076\uffab\077\uffab\100\uffab\101\uffab" +
    "\102\uffab\103\uffab\104\uffab\105\uffab\106\uffab\107\uffab\110" +
    "\uffab\111\uffab\112\uffab\113\uffab\114\uffab\115\uffab\116\uffab" +
    "\117\uffab\120\uffab\121\uffab\122\uffab\123\uffab\124\uffab\125" +
    "\uffab\126\uffab\127\uffab\130\uffab\131\uffab\132\uffab\133\uffab" +
    "\134\uffab\135\uffab\136\uffab\137\uffab\001\002\000\172\003" +
    "\uff05\044\uff05\046\uff05\047\uff05\050\uff05\051\uff05\052\uff05" +
    "\053\uff05\054\uff05\055\uff05\056\uff05\057\uff05\060\uff05\061" +
    "\uff05\062\uff05\063\uff05\064\uff05\065\uff05\066\uff05\067\uff05" +
    "\070\uff05\071\uff05\072\uff05\073\uff05\074\uff05\075\uff05\076" +
    "\uff05\077\uff05\100\uff05\101\uff05\102\uff05\103\uff05\104\uff05" +
    "\105\uff05\106\uff05\107\uff05\110\uff05\111\uff05\112\uff05\113" +
    "\uff05\114\uff05\115\uff05\116\uff05\117\uff05\120\uff05\121\uff05" +
    "\122\uff05\123\uff05\124\uff05\125\uff05\126\uff05\127\uff05\130" +
    "\uff05\131\uff05\132\uff05\133\uff05\134\uff05\135\uff05\136\uff05" +
    "\137\uff05\001\002\000\172\003\ufeee\044\ufeee\046\ufeee\047" +
    "\ufeee\050\ufeee\051\ufeee\052\ufeee\053\ufeee\054\ufeee\055\ufeee" +
    "\056\ufeee\057\ufeee\060\ufeee\061\ufeee\062\ufeee\063\ufeee\064" +
    "\ufeee\065\ufeee\066\ufeee\067\ufeee\070\ufeee\071\ufeee\072\ufeee" +
    "\073\ufeee\074\ufeee\075\ufeee\076\ufeee\077\ufeee\100\ufeee\101" +
    "\ufeee\102\ufeee\103\ufeee\104\ufeee\105\ufeee\106\ufeee\107\ufeee" +
    "\110\ufeee\111\ufeee\112\ufeee\113\ufeee\114\ufeee\115\ufeee\116" +
    "\ufeee\117\ufeee\120\ufeee\121\ufeee\122\ufeee\123\ufeee\124\ufeee" +
    "\125\ufeee\126\ufeee\127\ufeee\130\ufeee\131\ufeee\132\ufeee\133" +
    "\ufeee\134\ufeee\135\ufeee\136\ufeee\137\ufeee\001\002\000\172" +
    "\003\ufef3\044\ufef3\046\ufef3\047\ufef3\050\ufef3\051\ufef3\052" +
    "\ufef3\053\ufef3\054\ufef3\055\ufef3\056\ufef3\057\ufef3\060\ufef3" +
    "\061\ufef3\062\ufef3\063\ufef3\064\ufef3\065\ufef3\066\ufef3\067" +
    "\ufef3\070\ufef3\071\ufef3\072\ufef3\073\ufef3\074\ufef3\075\ufef3" +
    "\076\ufef3\077\ufef3\100\ufef3\101\ufef3\102\ufef3\103\ufef3\104" +
    "\ufef3\105\ufef3\106\ufef3\107\ufef3\110\ufef3\111\ufef3\112\ufef3" +
    "\113\ufef3\114\ufef3\115\ufef3\116\ufef3\117\ufef3\120\ufef3\121" +
    "\ufef3\122\ufef3\123\ufef3\124\ufef3\125\ufef3\126\ufef3\127\ufef3" +
    "\130\ufef3\131\ufef3\132\ufef3\133\ufef3\134\ufef3\135\ufef3\136" +
    "\ufef3\137\ufef3\001\002\000\172\003\uff09\044\uff09\046\uff09" +
    "\047\uff09\050\uff09\051\uff09\052\uff09\053\uff09\054\uff09\055" +
    "\uff09\056\uff09\057\uff09\060\uff09\061\uff09\062\uff09\063\uff09" +
    "\064\uff09\065\uff09\066\uff09\067\uff09\070\uff09\071\uff09\072" +
    "\uff09\073\uff09\074\uff09\075\uff09\076\uff09\077\uff09\100\uff09" +
    "\101\uff09\102\uff09\103\uff09\104\uff09\105\uff09\106\uff09\107" +
    "\uff09\110\uff09\111\uff09\112\uff09\113\uff09\114\uff09\115\uff09" +
    "\116\uff09\117\uff09\120\uff09\121\uff09\122\uff09\123\uff09\124" +
    "\uff09\125\uff09\126\uff09\127\uff09\130\uff09\131\uff09\132\uff09" +
    "\133\uff09\134\uff09\135\uff09\136\uff09\137\uff09\001\002\000" +
    "\172\003\uff16\044\uff16\046\uff16\047\uff16\050\uff16\051\uff16" +
    "\052\uff16\053\uff16\054\uff16\055\uff16\056\uff16\057\uff16\060" +
    "\uff16\061\uff16\062\uff16\063\uff16\064\uff16\065\uff16\066\uff16" +
    "\067\uff16\070\uff16\071\uff16\072\uff16\073\uff16\074\uff16\075" +
    "\uff16\076\uff16\077\uff16\100\uff16\101\uff16\102\uff16\103\uff16" +
    "\104\uff16\105\uff16\106\uff16\107\uff16\110\uff16\111\uff16\112" +
    "\uff16\113\uff16\114\uff16\115\uff16\116\uff16\117\uff16\120\uff16" +
    "\121\uff16\122\uff16\123\uff16\124\uff16\125\uff16\126\uff16\127" +
    "\uff16\130\uff16\131\uff16\132\uff16\133\uff16\134\uff16\135\uff16" +
    "\136\uff16\137\uff16\001\002\000\172\003\260\044\360\046" +
    "\245\047\215\050\223\051\273\052\234\053\162\054\214" +
    "\055\255\056\302\057\265\060\231\061\274\062\172\063" +
    "\262\064\307\065\201\066\220\067\275\070\225\071\222" +
    "\072\257\073\224\074\232\075\252\076\164\077\226\100" +
    "\205\101\177\102\266\103\246\104\175\105\276\106\241" +
    "\107\256\110\305\111\210\112\306\113\272\114\204\115" +
    "\176\116\203\117\236\120\240\121\237\122\304\123\227" +
    "\124\211\125\254\126\207\127\264\130\301\131\277\132" +
    "\200\133\165\134\263\135\173\136\235\137\171\001\002" +
    "\000\172\003\260\044\311\046\245\047\215\050\223\051" +
    "\273\052\234\053\162\054\214\055\255\056\302\057\265" +
    "\060\231\061\274\062\172\063\262\064\307\065\201\066" +
    "\220\067\275\070\225\071\222\072\257\073\224\074\232" +
    "\075\252\076\164\077\226\100\205\101\177\102\266\103" +
    "\246\104\175\105\276\106\241\107\256\110\305\111\210" +
    "\112\306\113\272\114\204\115\176\116\203\117\236\120" +
    "\240\121\237\122\304\123\227\124\211\125\254\126\207" +
    "\127\264\130\301\131\277\132\200\133\165\134\263\135" +
    "\173\136\235\137\171\001\002\000\172\003\uffb9\044\uffb9" +
    "\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054" +
    "\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9" +
    "\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9\071" +
    "\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\076\uffb9\077\uffb9" +
    "\100\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9\105\uffb9\106" +
    "\uffb9\107\uffb9\110\uffb9\111\uffb9\112\uffb9\113\uffb9\114\uffb9" +
    "\115\uffb9\116\uffb9\117\uffb9\120\uffb9\121\uffb9\122\uffb9\123" +
    "\uffb9\124\uffb9\125\uffb9\126\uffb9\127\uffb9\130\uffb9\131\uffb9" +
    "\132\uffb9\133\uffb9\134\uffb9\135\uffb9\136\uffb9\137\uffb9\001" +
    "\002\000\172\003\uff0d\044\uff0d\046\uff0d\047\uff0d\050\uff0d" +
    "\051\uff0d\052\uff0d\053\uff0d\054\uff0d\055\uff0d\056\uff0d\057" +
    "\uff0d\060\uff0d\061\uff0d\062\uff0d\063\uff0d\064\uff0d\065\uff0d" +
    "\066\uff0d\067\uff0d\070\uff0d\071\uff0d\072\uff0d\073\uff0d\074" +
    "\uff0d\075\uff0d\076\uff0d\077\uff0d\100\uff0d\101\uff0d\102\uff0d" +
    "\103\uff0d\104\uff0d\105\uff0d\106\uff0d\107\uff0d\110\uff0d\111" +
    "\uff0d\112\uff0d\113\uff0d\114\uff0d\115\uff0d\116\uff0d\117\uff0d" +
    "\120\uff0d\121\uff0d\122\uff0d\123\uff0d\124\uff0d\125\uff0d\126" +
    "\uff0d\127\uff0d\130\uff0d\131\uff0d\132\uff0d\133\uff0d\134\uff0d" +
    "\135\uff0d\136\uff0d\137\uff0d\001\002\000\172\003\uff21\044" +
    "\uff21\046\uff21\047\uff21\050\uff21\051\uff21\052\uff21\053\uff21" +
    "\054\uff21\055\uff21\056\uff21\057\uff21\060\uff21\061\uff21\062" +
    "\uff21\063\uff21\064\uff21\065\uff21\066\uff21\067\uff21\070\uff21" +
    "\071\uff21\072\uff21\073\uff21\074\uff21\075\uff21\076\uff21\077" +
    "\uff21\100\uff21\101\uff21\102\uff21\103\uff21\104\uff21\105\uff21" +
    "\106\uff21\107\uff21\110\uff21\111\uff21\112\uff21\113\uff21\114" +
    "\uff21\115\uff21\116\uff21\117\uff21\120\uff21\121\uff21\122\uff21" +
    "\123\uff21\124\uff21\125\uff21\126\uff21\127\uff21\130\uff21\131" +
    "\uff21\132\uff21\133\uff21\134\uff21\135\uff21\136\uff21\137\uff21" +
    "\001\002\000\172\003\uff07\044\uff07\046\uff07\047\uff07\050" +
    "\uff07\051\uff07\052\uff07\053\uff07\054\uff07\055\uff07\056\uff07" +
    "\057\uff07\060\uff07\061\uff07\062\uff07\063\uff07\064\uff07\065" +
    "\uff07\066\uff07\067\uff07\070\uff07\071\uff07\072\uff07\073\uff07" +
    "\074\uff07\075\uff07\076\uff07\077\uff07\100\uff07\101\uff07\102" +
    "\uff07\103\uff07\104\uff07\105\uff07\106\uff07\107\uff07\110\uff07" +
    "\111\uff07\112\uff07\113\uff07\114\uff07\115\uff07\116\uff07\117" +
    "\uff07\120\uff07\121\uff07\122\uff07\123\uff07\124\uff07\125\uff07" +
    "\126\uff07\127\uff07\130\uff07\131\uff07\132\uff07\133\uff07\134" +
    "\uff07\135\uff07\136\uff07\137\uff07\001\002\000\172\003\uff01" +
    "\044\uff01\046\uff01\047\uff01\050\uff01\051\uff01\052\uff01\053" +
    "\uff01\054\uff01\055\uff01\056\uff01\057\uff01\060\uff01\061\uff01" +
    "\062\uff01\063\uff01\064\uff01\065\uff01\066\uff01\067\uff01\070" +
    "\uff01\071\uff01\072\uff01\073\uff01\074\uff01\075\uff01\076\uff01" +
    "\077\uff01\100\uff01\101\uff01\102\uff01\103\uff01\104\uff01\105" +
    "\uff01\106\uff01\107\uff01\110\uff01\111\uff01\112\uff01\113\uff01" +
    "\114\uff01\115\uff01\116\uff01\117\uff01\120\uff01\121\uff01\122" +
    "\uff01\123\uff01\124\uff01\125\uff01\126\uff01\127\uff01\130\uff01" +
    "\131\uff01\132\uff01\133\uff01\134\uff01\135\uff01\136\uff01\137" +
    "\uff01\001\002\000\172\003\uff13\044\uff13\046\uff13\047\uff13" +
    "\050\uff13\051\uff13\052\uff13\053\uff13\054\uff13\055\uff13\056" +
    "\uff13\057\uff13\060\uff13\061\uff13\062\uff13\063\uff13\064\uff13" +
    "\065\uff13\066\uff13\067\uff13\070\uff13\071\uff13\072\uff13\073" +
    "\uff13\074\uff13\075\uff13\076\uff13\077\uff13\100\uff13\101\uff13" +
    "\102\uff13\103\uff13\104\uff13\105\uff13\106\uff13\107\uff13\110" +
    "\uff13\111\uff13\112\uff13\113\uff13\114\uff13\115\uff13\116\uff13" +
    "\117\uff13\120\uff13\121\uff13\122\uff13\123\uff13\124\uff13\125" +
    "\uff13\126\uff13\127\uff13\130\uff13\131\uff13\132\uff13\133\uff13" +
    "\134\uff13\135\uff13\136\uff13\137\uff13\001\002\000\172\003" +
    "\ufef1\044\ufef1\046\ufef1\047\ufef1\050\ufef1\051\ufef1\052\ufef1" +
    "\053\ufef1\054\ufef1\055\ufef1\056\ufef1\057\ufef1\060\ufef1\061" +
    "\ufef1\062\ufef1\063\ufef1\064\ufef1\065\ufef1\066\ufef1\067\ufef1" +
    "\070\ufef1\071\ufef1\072\ufef1\073\ufef1\074\ufef1\075\ufef1\076" +
    "\ufef1\077\ufef1\100\ufef1\101\ufef1\102\ufef1\103\ufef1\104\ufef1" +
    "\105\ufef1\106\ufef1\107\ufef1\110\ufef1\111\ufef1\112\ufef1\113" +
    "\ufef1\114\ufef1\115\ufef1\116\ufef1\117\ufef1\120\ufef1\121\ufef1" +
    "\122\ufef1\123\ufef1\124\ufef1\125\ufef1\126\ufef1\127\ufef1\130" +
    "\ufef1\131\ufef1\132\ufef1\133\ufef1\134\ufef1\135\ufef1\136\ufef1" +
    "\137\ufef1\001\002\000\172\003\uffad\044\uffad\046\uffad\047" +
    "\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad" +
    "\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad\064" +
    "\uffad\065\uffad\066\uffad\067\uffad\070\uffad\071\uffad\072\uffad" +
    "\073\uffad\074\uffad\075\uffad\076\uffad\077\uffad\100\uffad\101" +
    "\uffad\102\uffad\103\uffad\104\uffad\105\uffad\106\uffad\107\uffad" +
    "\110\uffad\111\uffad\112\uffad\113\uffad\114\uffad\115\uffad\116" +
    "\uffad\117\uffad\120\uffad\121\uffad\122\uffad\123\uffad\124\uffad" +
    "\125\uffad\126\uffad\127\uffad\130\uffad\131\uffad\132\uffad\133" +
    "\uffad\134\uffad\135\uffad\136\uffad\137\uffad\001\002\000\172" +
    "\003\ufef2\044\ufef2\046\ufef2\047\ufef2\050\ufef2\051\ufef2\052" +
    "\ufef2\053\ufef2\054\ufef2\055\ufef2\056\ufef2\057\ufef2\060\ufef2" +
    "\061\ufef2\062\ufef2\063\ufef2\064\ufef2\065\ufef2\066\ufef2\067" +
    "\ufef2\070\ufef2\071\ufef2\072\ufef2\073\ufef2\074\ufef2\075\ufef2" +
    "\076\ufef2\077\ufef2\100\ufef2\101\ufef2\102\ufef2\103\ufef2\104" +
    "\ufef2\105\ufef2\106\ufef2\107\ufef2\110\ufef2\111\ufef2\112\ufef2" +
    "\113\ufef2\114\ufef2\115\ufef2\116\ufef2\117\ufef2\120\ufef2\121" +
    "\ufef2\122\ufef2\123\ufef2\124\ufef2\125\ufef2\126\ufef2\127\ufef2" +
    "\130\ufef2\131\ufef2\132\ufef2\133\ufef2\134\ufef2\135\ufef2\136" +
    "\ufef2\137\ufef2\001\002\000\172\003\uff0a\044\uff0a\046\uff0a" +
    "\047\uff0a\050\uff0a\051\uff0a\052\uff0a\053\uff0a\054\uff0a\055" +
    "\uff0a\056\uff0a\057\uff0a\060\uff0a\061\uff0a\062\uff0a\063\uff0a" +
    "\064\uff0a\065\uff0a\066\uff0a\067\uff0a\070\uff0a\071\uff0a\072" +
    "\uff0a\073\uff0a\074\uff0a\075\uff0a\076\uff0a\077\uff0a\100\uff0a" +
    "\101\uff0a\102\uff0a\103\uff0a\104\uff0a\105\uff0a\106\uff0a\107" +
    "\uff0a\110\uff0a\111\uff0a\112\uff0a\113\uff0a\114\uff0a\115\uff0a" +
    "\116\uff0a\117\uff0a\120\uff0a\121\uff0a\122\uff0a\123\uff0a\124" +
    "\uff0a\125\uff0a\126\uff0a\127\uff0a\130\uff0a\131\uff0a\132\uff0a" +
    "\133\uff0a\134\uff0a\135\uff0a\136\uff0a\137\uff0a\001\002\000" +
    "\172\003\uffb5\044\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5" +
    "\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060" +
    "\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5" +
    "\067\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075" +
    "\uffb5\076\uffb5\077\uffb5\100\uffb5\101\uffb5\102\uffb5\103\uffb5" +
    "\104\uffb5\105\uffb5\106\uffb5\107\uffb5\110\uffb5\111\uffb5\112" +
    "\uffb5\113\uffb5\114\uffb5\115\uffb5\116\uffb5\117\uffb5\120\uffb5" +
    "\121\uffb5\122\uffb5\123\uffb5\124\uffb5\125\uffb5\126\uffb5\127" +
    "\uffb5\130\uffb5\131\uffb5\132\uffb5\133\uffb5\134\uffb5\135\uffb5" +
    "\136\uffb5\137\uffb5\001\002\000\172\003\ufef8\044\ufef8\046" +
    "\ufef8\047\ufef8\050\ufef8\051\ufef8\052\ufef8\053\ufef8\054\ufef8" +
    "\055\ufef8\056\ufef8\057\ufef8\060\ufef8\061\ufef8\062\ufef8\063" +
    "\ufef8\064\ufef8\065\ufef8\066\ufef8\067\ufef8\070\ufef8\071\ufef8" +
    "\072\ufef8\073\ufef8\074\ufef8\075\ufef8\076\ufef8\077\ufef8\100" +
    "\ufef8\101\ufef8\102\ufef8\103\ufef8\104\ufef8\105\ufef8\106\ufef8" +
    "\107\ufef8\110\ufef8\111\ufef8\112\ufef8\113\ufef8\114\ufef8\115" +
    "\ufef8\116\ufef8\117\ufef8\120\ufef8\121\ufef8\122\ufef8\123\ufef8" +
    "\124\ufef8\125\ufef8\126\ufef8\127\ufef8\130\ufef8\131\ufef8\132" +
    "\ufef8\133\ufef8\134\ufef8\135\ufef8\136\ufef8\137\ufef8\001\002" +
    "\000\172\003\uff10\044\uff10\046\uff10\047\uff10\050\uff10\051" +
    "\uff10\052\uff10\053\uff10\054\uff10\055\uff10\056\uff10\057\uff10" +
    "\060\uff10\061\uff10\062\uff10\063\uff10\064\uff10\065\uff10\066" +
    "\uff10\067\uff10\070\uff10\071\uff10\072\uff10\073\uff10\074\uff10" +
    "\075\uff10\076\uff10\077\uff10\100\uff10\101\uff10\102\uff10\103" +
    "\uff10\104\uff10\105\uff10\106\uff10\107\uff10\110\uff10\111\uff10" +
    "\112\uff10\113\uff10\114\uff10\115\uff10\116\uff10\117\uff10\120" +
    "\uff10\121\uff10\122\uff10\123\uff10\124\uff10\125\uff10\126\uff10" +
    "\127\uff10\130\uff10\131\uff10\132\uff10\133\uff10\134\uff10\135" +
    "\uff10\136\uff10\137\uff10\001\002\000\172\003\uff0e\044\uff0e" +
    "\046\uff0e\047\uff0e\050\uff0e\051\uff0e\052\uff0e\053\uff0e\054" +
    "\uff0e\055\uff0e\056\uff0e\057\uff0e\060\uff0e\061\uff0e\062\uff0e" +
    "\063\uff0e\064\uff0e\065\uff0e\066\uff0e\067\uff0e\070\uff0e\071" +
    "\uff0e\072\uff0e\073\uff0e\074\uff0e\075\uff0e\076\uff0e\077\uff0e" +
    "\100\uff0e\101\uff0e\102\uff0e\103\uff0e\104\uff0e\105\uff0e\106" +
    "\uff0e\107\uff0e\110\uff0e\111\uff0e\112\uff0e\113\uff0e\114\uff0e" +
    "\115\uff0e\116\uff0e\117\uff0e\120\uff0e\121\uff0e\122\uff0e\123" +
    "\uff0e\124\uff0e\125\uff0e\126\uff0e\127\uff0e\130\uff0e\131\uff0e" +
    "\132\uff0e\133\uff0e\134\uff0e\135\uff0e\136\uff0e\137\uff0e\001" +
    "\002\000\172\003\uff04\044\uff04\046\uff04\047\uff04\050\uff04" +
    "\051\uff04\052\uff04\053\uff04\054\uff04\055\uff04\056\uff04\057" +
    "\uff04\060\uff04\061\uff04\062\uff04\063\uff04\064\uff04\065\uff04" +
    "\066\uff04\067\uff04\070\uff04\071\uff04\072\uff04\073\uff04\074" +
    "\uff04\075\uff04\076\uff04\077\uff04\100\uff04\101\uff04\102\uff04" +
    "\103\uff04\104\uff04\105\uff04\106\uff04\107\uff04\110\uff04\111" +
    "\uff04\112\uff04\113\uff04\114\uff04\115\uff04\116\uff04\117\uff04" +
    "\120\uff04\121\uff04\122\uff04\123\uff04\124\uff04\125\uff04\126" +
    "\uff04\127\uff04\130\uff04\131\uff04\132\uff04\133\uff04\134\uff04" +
    "\135\uff04\136\uff04\137\uff04\001\002\000\172\003\uffbf\044" +
    "\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf" +
    "\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062" +
    "\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf" +
    "\071\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\077" +
    "\uffbf\100\uffbf\101\uffbf\102\uffbf\103\uffbf\104\uffbf\105\uffbf" +
    "\106\uffbf\107\uffbf\110\uffbf\111\uffbf\112\uffbf\113\uffbf\114" +
    "\uffbf\115\uffbf\116\uffbf\117\uffbf\120\uffbf\121\uffbf\122\uffbf" +
    "\123\uffbf\124\uffbf\125\uffbf\126\uffbf\127\uffbf\130\uffbf\131" +
    "\uffbf\132\uffbf\133\uffbf\134\uffbf\135\uffbf\136\uffbf\137\uffbf" +
    "\001\002\000\034\011\327\012\326\013\322\014\320\015" +
    "\324\016\316\017\321\020\323\021\325\022\330\023\315" +
    "\024\020\077\317\001\002\000\172\003\260\044\311\046" +
    "\245\047\215\050\223\051\273\052\234\053\162\054\214" +
    "\055\255\056\302\057\265\060\231\061\274\062\172\063" +
    "\262\064\307\065\201\066\220\067\275\070\225\071\222" +
    "\072\257\073\224\074\232\075\252\076\164\077\226\100" +
    "\205\101\177\102\266\103\246\104\175\105\276\106\241" +
    "\107\256\110\305\111\210\112\306\113\272\114\204\115" +
    "\176\116\203\117\236\120\240\121\237\122\304\123\227" +
    "\124\211\125\254\126\207\127\264\130\301\131\277\132" +
    "\200\133\165\134\263\135\173\136\235\137\171\001\002" +
    "\000\172\003\uffc0\044\uffc0\046\uffc0\047\uffc0\050\uffc0\051" +
    "\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0" +
    "\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066" +
    "\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074\uffc0" +
    "\075\uffc0\076\uffc0\077\uffc0\100\uffc0\101\uffc0\102\uffc0\103" +
    "\uffc0\104\uffc0\105\uffc0\106\uffc0\107\uffc0\110\uffc0\111\uffc0" +
    "\112\uffc0\113\uffc0\114\uffc0\115\uffc0\116\uffc0\117\uffc0\120" +
    "\uffc0\121\uffc0\122\uffc0\123\uffc0\124\uffc0\125\uffc0\126\uffc0" +
    "\127\uffc0\130\uffc0\131\uffc0\132\uffc0\133\uffc0\134\uffc0\135" +
    "\uffc0\136\uffc0\137\uffc0\001\002\000\172\003\uffb8\044\uffb8" +
    "\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054" +
    "\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8" +
    "\063\uffb8\064\uffb8\065\uffb8\066\uffb8\067\uffb8\070\uffb8\071" +
    "\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8" +
    "\100\uffb8\101\uffb8\102\uffb8\103\uffb8\104\uffb8\105\uffb8\106" +
    "\uffb8\107\uffb8\110\uffb8\111\uffb8\112\uffb8\113\uffb8\114\uffb8" +
    "\115\uffb8\116\uffb8\117\uffb8\120\uffb8\121\uffb8\122\uffb8\123" +
    "\uffb8\124\uffb8\125\uffb8\126\uffb8\127\uffb8\130\uffb8\131\uffb8" +
    "\132\uffb8\133\uffb8\134\uffb8\135\uffb8\136\uffb8\137\uffb8\001" +
    "\002\000\006\045\uffa9\112\031\001\002\000\006\045\uffa9" +
    "\112\031\001\002\000\004\021\352\001\002\000\006\045" +
    "\uffa9\112\031\001\002\000\006\045\uffa9\112\031\001\002" +
    "\000\006\004\uffa9\112\031\001\002\000\004\045\342\001" +
    "\002\000\004\045\341\001\002\000\006\045\uffa9\112\031" +
    "\001\002\000\006\045\uffa9\112\031\001\002\000\006\045" +
    "\uffa9\112\031\001\002\000\006\045\uffa9\112\031\001\002" +
    "\000\004\045\332\001\002\000\172\003\uffed\044\uffed\046" +
    "\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed" +
    "\055\uffed\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed\063" +
    "\uffed\064\uffed\065\uffed\066\uffed\067\uffed\070\uffed\071\uffed" +
    "\072\uffed\073\uffed\074\uffed\075\uffed\076\uffed\077\uffed\100" +
    "\uffed\101\uffed\102\uffed\103\uffed\104\uffed\105\uffed\106\uffed" +
    "\107\uffed\110\uffed\111\uffed\112\uffed\113\uffed\114\uffed\115" +
    "\uffed\116\uffed\117\uffed\120\uffed\121\uffed\122\uffed\123\uffed" +
    "\124\uffed\125\uffed\126\uffed\127\uffed\130\uffed\131\uffed\132" +
    "\uffed\133\uffed\134\uffed\135\uffed\136\uffed\137\uffed\001\002" +
    "\000\004\045\334\001\002\000\172\003\ufff6\044\ufff6\046" +
    "\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6" +
    "\055\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\063" +
    "\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6\071\ufff6" +
    "\072\ufff6\073\ufff6\074\ufff6\075\ufff6\076\ufff6\077\ufff6\100" +
    "\ufff6\101\ufff6\102\ufff6\103\ufff6\104\ufff6\105\ufff6\106\ufff6" +
    "\107\ufff6\110\ufff6\111\ufff6\112\ufff6\113\ufff6\114\ufff6\115" +
    "\ufff6\116\ufff6\117\ufff6\120\ufff6\121\ufff6\122\ufff6\123\ufff6" +
    "\124\ufff6\125\ufff6\126\ufff6\127\ufff6\130\ufff6\131\ufff6\132" +
    "\ufff6\133\ufff6\134\ufff6\135\ufff6\136\ufff6\137\ufff6\001\002" +
    "\000\004\045\336\001\002\000\172\003\ufff5\044\ufff5\046" +
    "\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5" +
    "\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\063" +
    "\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\070\ufff5\071\ufff5" +
    "\072\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5\077\ufff5\100" +
    "\ufff5\101\ufff5\102\ufff5\103\ufff5\104\ufff5\105\ufff5\106\ufff5" +
    "\107\ufff5\110\ufff5\111\ufff5\112\ufff5\113\ufff5\114\ufff5\115" +
    "\ufff5\116\ufff5\117\ufff5\120\ufff5\121\ufff5\122\ufff5\123\ufff5" +
    "\124\ufff5\125\ufff5\126\ufff5\127\ufff5\130\ufff5\131\ufff5\132" +
    "\ufff5\133\ufff5\134\ufff5\135\ufff5\136\ufff5\137\ufff5\001\002" +
    "\000\004\045\340\001\002\000\172\003\uffee\044\uffee\046" +
    "\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee" +
    "\055\uffee\056\uffee\057\uffee\060\uffee\061\uffee\062\uffee\063" +
    "\uffee\064\uffee\065\uffee\066\uffee\067\uffee\070\uffee\071\uffee" +
    "\072\uffee\073\uffee\074\uffee\075\uffee\076\uffee\077\uffee\100" +
    "\uffee\101\uffee\102\uffee\103\uffee\104\uffee\105\uffee\106\uffee" +
    "\107\uffee\110\uffee\111\uffee\112\uffee\113\uffee\114\uffee\115" +
    "\uffee\116\uffee\117\uffee\120\uffee\121\uffee\122\uffee\123\uffee" +
    "\124\uffee\125\uffee\126\uffee\127\uffee\130\uffee\131\uffee\132" +
    "\uffee\133\uffee\134\uffee\135\uffee\136\uffee\137\uffee\001\002" +
    "\000\172\003\ufff2\044\ufff2\046\ufff2\047\ufff2\050\ufff2\051" +
    "\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2" +
    "\060\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066" +
    "\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2" +
    "\075\ufff2\076\ufff2\077\ufff2\100\ufff2\101\ufff2\102\ufff2\103" +
    "\ufff2\104\ufff2\105\ufff2\106\ufff2\107\ufff2\110\ufff2\111\ufff2" +
    "\112\ufff2\113\ufff2\114\ufff2\115\ufff2\116\ufff2\117\ufff2\120" +
    "\ufff2\121\ufff2\122\ufff2\123\ufff2\124\ufff2\125\ufff2\126\ufff2" +
    "\127\ufff2\130\ufff2\131\ufff2\132\ufff2\133\ufff2\134\ufff2\135" +
    "\ufff2\136\ufff2\137\ufff2\001\002\000\172\003\uffef\044\uffef" +
    "\046\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054" +
    "\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef\062\uffef" +
    "\063\uffef\064\uffef\065\uffef\066\uffef\067\uffef\070\uffef\071" +
    "\uffef\072\uffef\073\uffef\074\uffef\075\uffef\076\uffef\077\uffef" +
    "\100\uffef\101\uffef\102\uffef\103\uffef\104\uffef\105\uffef\106" +
    "\uffef\107\uffef\110\uffef\111\uffef\112\uffef\113\uffef\114\uffef" +
    "\115\uffef\116\uffef\117\uffef\120\uffef\121\uffef\122\uffef\123" +
    "\uffef\124\uffef\125\uffef\126\uffef\127\uffef\130\uffef\131\uffef" +
    "\132\uffef\133\uffef\134\uffef\135\uffef\136\uffef\137\uffef\001" +
    "\002\000\004\004\344\001\002\000\004\045\345\001\002" +
    "\000\172\003\ufff4\044\ufff4\046\ufff4\047\ufff4\050\ufff4\051" +
    "\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4" +
    "\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4\066" +
    "\ufff4\067\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4\074\ufff4" +
    "\075\ufff4\076\ufff4\077\ufff4\100\ufff4\101\ufff4\102\ufff4\103" +
    "\ufff4\104\ufff4\105\ufff4\106\ufff4\107\ufff4\110\ufff4\111\ufff4" +
    "\112\ufff4\113\ufff4\114\ufff4\115\ufff4\116\ufff4\117\ufff4\120" +
    "\ufff4\121\ufff4\122\ufff4\123\ufff4\124\ufff4\125\ufff4\126\ufff4" +
    "\127\ufff4\130\ufff4\131\ufff4\132\ufff4\133\ufff4\134\ufff4\135" +
    "\ufff4\136\ufff4\137\ufff4\001\002\000\004\045\347\001\002" +
    "\000\172\003\ufff0\044\ufff0\046\ufff0\047\ufff0\050\ufff0\051" +
    "\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0" +
    "\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0\066" +
    "\ufff0\067\ufff0\070\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0" +
    "\075\ufff0\076\ufff0\077\ufff0\100\ufff0\101\ufff0\102\ufff0\103" +
    "\ufff0\104\ufff0\105\ufff0\106\ufff0\107\ufff0\110\ufff0\111\ufff0" +
    "\112\ufff0\113\ufff0\114\ufff0\115\ufff0\116\ufff0\117\ufff0\120" +
    "\ufff0\121\ufff0\122\ufff0\123\ufff0\124\ufff0\125\ufff0\126\ufff0" +
    "\127\ufff0\130\ufff0\131\ufff0\132\ufff0\133\ufff0\134\ufff0\135" +
    "\ufff0\136\ufff0\137\ufff0\001\002\000\004\045\351\001\002" +
    "\000\172\003\ufff3\044\ufff3\046\ufff3\047\ufff3\050\ufff3\051" +
    "\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3" +
    "\060\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066" +
    "\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3\073\ufff3\074\ufff3" +
    "\075\ufff3\076\ufff3\077\ufff3\100\ufff3\101\ufff3\102\ufff3\103" +
    "\ufff3\104\ufff3\105\ufff3\106\ufff3\107\ufff3\110\ufff3\111\ufff3" +
    "\112\ufff3\113\ufff3\114\ufff3\115\ufff3\116\ufff3\117\ufff3\120" +
    "\ufff3\121\ufff3\122\ufff3\123\ufff3\124\ufff3\125\ufff3\126\ufff3" +
    "\127\ufff3\130\ufff3\131\ufff3\132\ufff3\133\ufff3\134\ufff3\135" +
    "\ufff3\136\ufff3\137\ufff3\001\002\000\004\045\353\001\002" +
    "\000\172\003\uffde\044\uffde\046\uffde\047\uffde\050\uffde\051" +
    "\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde" +
    "\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066" +
    "\uffde\067\uffde\070\uffde\071\uffde\072\uffde\073\uffde\074\uffde" +
    "\075\uffde\076\uffde\077\uffde\100\uffde\101\uffde\102\uffde\103" +
    "\uffde\104\uffde\105\uffde\106\uffde\107\uffde\110\uffde\111\uffde" +
    "\112\uffde\113\uffde\114\uffde\115\uffde\116\uffde\117\uffde\120" +
    "\uffde\121\uffde\122\uffde\123\uffde\124\uffde\125\uffde\126\uffde" +
    "\127\uffde\130\uffde\131\uffde\132\uffde\133\uffde\134\uffde\135" +
    "\uffde\136\uffde\137\uffde\001\002\000\004\045\355\001\002" +
    "\000\172\003\ufff1\044\ufff1\046\ufff1\047\ufff1\050\ufff1\051" +
    "\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1" +
    "\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066" +
    "\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1\073\ufff1\074\ufff1" +
    "\075\ufff1\076\ufff1\077\ufff1\100\ufff1\101\ufff1\102\ufff1\103" +
    "\ufff1\104\ufff1\105\ufff1\106\ufff1\107\ufff1\110\ufff1\111\ufff1" +
    "\112\ufff1\113\ufff1\114\ufff1\115\ufff1\116\ufff1\117\ufff1\120" +
    "\ufff1\121\ufff1\122\ufff1\123\ufff1\124\ufff1\125\ufff1\126\ufff1" +
    "\127\ufff1\130\ufff1\131\ufff1\132\ufff1\133\ufff1\134\ufff1\135" +
    "\ufff1\136\ufff1\137\ufff1\001\002\000\004\045\357\001\002" +
    "\000\172\003\uffec\044\uffec\046\uffec\047\uffec\050\uffec\051" +
    "\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec" +
    "\060\uffec\061\uffec\062\uffec\063\uffec\064\uffec\065\uffec\066" +
    "\uffec\067\uffec\070\uffec\071\uffec\072\uffec\073\uffec\074\uffec" +
    "\075\uffec\076\uffec\077\uffec\100\uffec\101\uffec\102\uffec\103" +
    "\uffec\104\uffec\105\uffec\106\uffec\107\uffec\110\uffec\111\uffec" +
    "\112\uffec\113\uffec\114\uffec\115\uffec\116\uffec\117\uffec\120" +
    "\uffec\121\uffec\122\uffec\123\uffec\124\uffec\125\uffec\126\uffec" +
    "\127\uffec\130\uffec\131\uffec\132\uffec\133\uffec\134\uffec\135" +
    "\uffec\136\uffec\137\uffec\001\002\000\034\011\327\012\326" +
    "\013\322\014\320\015\324\016\316\017\321\020\323\021" +
    "\325\022\330\023\315\024\020\077\364\001\002\000\172" +
    "\003\260\044\360\046\245\047\215\050\223\051\273\052" +
    "\234\053\162\054\214\055\255\056\302\057\265\060\231" +
    "\061\274\062\172\063\262\064\307\065\201\066\220\067" +
    "\275\070\225\071\222\072\257\073\224\074\232\075\252" +
    "\076\164\077\226\100\205\101\177\102\266\103\246\104" +
    "\175\105\276\106\241\107\256\110\305\111\210\112\306" +
    "\113\272\114\204\115\176\116\203\117\236\120\240\121" +
    "\237\122\304\123\227\124\211\125\254\126\207\127\264" +
    "\130\301\131\277\132\200\133\165\134\263\135\173\136" +
    "\235\137\171\001\002\000\172\003\uffc2\044\uffc2\046\uffc2" +
    "\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055" +
    "\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2" +
    "\064\uffc2\065\uffc2\066\uffc2\067\uffc2\070\uffc2\071\uffc2\072" +
    "\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2\100\uffc2" +
    "\101\uffc2\102\uffc2\103\uffc2\104\uffc2\105\uffc2\106\uffc2\107" +
    "\uffc2\110\uffc2\111\uffc2\112\uffc2\113\uffc2\114\uffc2\115\uffc2" +
    "\116\uffc2\117\uffc2\120\uffc2\121\uffc2\122\uffc2\123\uffc2\124" +
    "\uffc2\125\uffc2\126\uffc2\127\uffc2\130\uffc2\131\uffc2\132\uffc2" +
    "\133\uffc2\134\uffc2\135\uffc2\136\uffc2\137\uffc2\001\002\000" +
    "\172\003\uffc3\044\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3" +
    "\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060" +
    "\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3" +
    "\067\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075" +
    "\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3" +
    "\104\uffc3\105\uffc3\106\uffc3\107\uffc3\110\uffc3\111\uffc3\112" +
    "\uffc3\113\uffc3\114\uffc3\115\uffc3\116\uffc3\117\uffc3\120\uffc3" +
    "\121\uffc3\122\uffc3\123\uffc3\124\uffc3\125\uffc3\126\uffc3\127" +
    "\uffc3\130\uffc3\131\uffc3\132\uffc3\133\uffc3\134\uffc3\135\uffc3" +
    "\136\uffc3\137\uffc3\001\002\000\004\017\365\001\002\000" +
    "\004\045\366\001\002\000\172\003\uffdf\044\uffdf\046\uffdf" +
    "\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055" +
    "\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf" +
    "\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf\071\uffdf\072" +
    "\uffdf\073\uffdf\074\uffdf\075\uffdf\076\uffdf\077\uffdf\100\uffdf" +
    "\101\uffdf\102\uffdf\103\uffdf\104\uffdf\105\uffdf\106\uffdf\107" +
    "\uffdf\110\uffdf\111\uffdf\112\uffdf\113\uffdf\114\uffdf\115\uffdf" +
    "\116\uffdf\117\uffdf\120\uffdf\121\uffdf\122\uffdf\123\uffdf\124" +
    "\uffdf\125\uffdf\126\uffdf\127\uffdf\130\uffdf\131\uffdf\132\uffdf" +
    "\133\uffdf\134\uffdf\135\uffdf\136\uffdf\137\uffdf\001\002\000" +
    "\034\011\327\012\326\013\322\014\320\015\324\016\316" +
    "\017\321\020\323\021\325\022\330\023\315\024\020\077" +
    "\373\001\002\000\172\003\uffce\044\uffce\046\uffce\047\uffce" +
    "\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056" +
    "\uffce\057\uffce\060\uffce\061\uffce\062\uffce\063\uffce\064\uffce" +
    "\065\uffce\066\uffce\067\uffce\070\uffce\071\uffce\072\uffce\073" +
    "\uffce\074\uffce\075\uffce\076\uffce\077\uffce\100\uffce\101\uffce" +
    "\102\uffce\103\uffce\104\uffce\105\uffce\106\uffce\107\uffce\110" +
    "\uffce\111\uffce\112\uffce\113\uffce\114\uffce\115\uffce\116\uffce" +
    "\117\uffce\120\uffce\121\uffce\122\uffce\123\uffce\124\uffce\125" +
    "\uffce\126\uffce\127\uffce\130\uffce\131\uffce\132\uffce\133\uffce" +
    "\134\uffce\135\uffce\136\uffce\137\uffce\001\002\000\172\003" +
    "\260\044\367\046\245\047\215\050\223\051\273\052\234" +
    "\053\162\054\214\055\255\056\302\057\265\060\231\061" +
    "\274\062\172\063\262\064\307\065\201\066\220\067\275" +
    "\070\225\071\222\072\257\073\224\074\232\075\252\076" +
    "\164\077\226\100\205\101\177\102\266\103\246\104\175" +
    "\105\276\106\241\107\256\110\305\111\210\112\306\113" +
    "\272\114\204\115\176\116\203\117\236\120\240\121\237" +
    "\122\304\123\227\124\211\125\254\126\207\127\264\130" +
    "\301\131\277\132\200\133\165\134\263\135\173\136\235" +
    "\137\171\001\002\000\172\003\uffcf\044\uffcf\046\uffcf\047" +
    "\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf" +
    "\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064" +
    "\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf" +
    "\073\uffcf\074\uffcf\075\uffcf\076\uffcf\077\uffcf\100\uffcf\101" +
    "\uffcf\102\uffcf\103\uffcf\104\uffcf\105\uffcf\106\uffcf\107\uffcf" +
    "\110\uffcf\111\uffcf\112\uffcf\113\uffcf\114\uffcf\115\uffcf\116" +
    "\uffcf\117\uffcf\120\uffcf\121\uffcf\122\uffcf\123\uffcf\124\uffcf" +
    "\125\uffcf\126\uffcf\127\uffcf\130\uffcf\131\uffcf\132\uffcf\133" +
    "\uffcf\134\uffcf\135\uffcf\136\uffcf\137\uffcf\001\002\000\004" +
    "\011\374\001\002\000\004\045\375\001\002\000\172\003" +
    "\uffe5\044\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5" +
    "\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061" +
    "\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5" +
    "\070\uffe5\071\uffe5\072\uffe5\073\uffe5\074\uffe5\075\uffe5\076" +
    "\uffe5\077\uffe5\100\uffe5\101\uffe5\102\uffe5\103\uffe5\104\uffe5" +
    "\105\uffe5\106\uffe5\107\uffe5\110\uffe5\111\uffe5\112\uffe5\113" +
    "\uffe5\114\uffe5\115\uffe5\116\uffe5\117\uffe5\120\uffe5\121\uffe5" +
    "\122\uffe5\123\uffe5\124\uffe5\125\uffe5\126\uffe5\127\uffe5\130" +
    "\uffe5\131\uffe5\132\uffe5\133\uffe5\134\uffe5\135\uffe5\136\uffe5" +
    "\137\uffe5\001\002\000\034\011\327\012\326\013\322\014" +
    "\320\015\324\016\316\017\321\020\323\021\325\022\330" +
    "\023\315\024\020\077\u0102\001\002\000\172\003\260\044" +
    "\376\046\245\047\215\050\223\051\273\052\234\053\162" +
    "\054\214\055\255\056\302\057\265\060\231\061\274\062" +
    "\172\063\262\064\307\065\201\066\220\067\275\070\225" +
    "\071\222\072\257\073\224\074\232\075\252\076\164\077" +
    "\226\100\205\101\177\102\266\103\246\104\175\105\276" +
    "\106\241\107\256\110\305\111\210\112\306\113\272\114" +
    "\204\115\176\116\203\117\236\120\240\121\237\122\304" +
    "\123\227\124\211\125\254\126\207\127\264\130\301\131" +
    "\277\132\200\133\165\134\263\135\173\136\235\137\171" +
    "\001\002\000\172\003\uffc8\044\uffc8\046\uffc8\047\uffc8\050" +
    "\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8" +
    "\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065" +
    "\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8\073\uffc8" +
    "\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8\101\uffc8\102" +
    "\uffc8\103\uffc8\104\uffc8\105\uffc8\106\uffc8\107\uffc8\110\uffc8" +
    "\111\uffc8\112\uffc8\113\uffc8\114\uffc8\115\uffc8\116\uffc8\117" +
    "\uffc8\120\uffc8\121\uffc8\122\uffc8\123\uffc8\124\uffc8\125\uffc8" +
    "\126\uffc8\127\uffc8\130\uffc8\131\uffc8\132\uffc8\133\uffc8\134" +
    "\uffc8\135\uffc8\136\uffc8\137\uffc8\001\002\000\172\003\uffc9" +
    "\044\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053" +
    "\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9" +
    "\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070" +
    "\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9" +
    "\077\uffc9\100\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\105" +
    "\uffc9\106\uffc9\107\uffc9\110\uffc9\111\uffc9\112\uffc9\113\uffc9" +
    "\114\uffc9\115\uffc9\116\uffc9\117\uffc9\120\uffc9\121\uffc9\122" +
    "\uffc9\123\uffc9\124\uffc9\125\uffc9\126\uffc9\127\uffc9\130\uffc9" +
    "\131\uffc9\132\uffc9\133\uffc9\134\uffc9\135\uffc9\136\uffc9\137" +
    "\uffc9\001\002\000\004\014\u0103\001\002\000\004\045\u0104" +
    "\001\002\000\172\003\uffe2\044\uffe2\046\uffe2\047\uffe2\050" +
    "\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2" +
    "\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065" +
    "\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2\072\uffe2\073\uffe2" +
    "\074\uffe2\075\uffe2\076\uffe2\077\uffe2\100\uffe2\101\uffe2\102" +
    "\uffe2\103\uffe2\104\uffe2\105\uffe2\106\uffe2\107\uffe2\110\uffe2" +
    "\111\uffe2\112\uffe2\113\uffe2\114\uffe2\115\uffe2\116\uffe2\117" +
    "\uffe2\120\uffe2\121\uffe2\122\uffe2\123\uffe2\124\uffe2\125\uffe2" +
    "\126\uffe2\127\uffe2\130\uffe2\131\uffe2\132\uffe2\133\uffe2\134" +
    "\uffe2\135\uffe2\136\uffe2\137\uffe2\001\002\000\006\002\uffd1" +
    "\044\uffd1\001\002\000\034\011\327\012\326\013\322\014" +
    "\320\015\324\016\316\017\321\020\323\021\325\022\330" +
    "\023\315\024\020\077\u010a\001\002\000\172\003\uffc4\044" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4" +
    "\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062" +
    "\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4" +
    "\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4\077" +
    "\uffc4\100\uffc4\101\uffc4\102\uffc4\103\uffc4\104\uffc4\105\uffc4" +
    "\106\uffc4\107\uffc4\110\uffc4\111\uffc4\112\uffc4\113\uffc4\114" +
    "\uffc4\115\uffc4\116\uffc4\117\uffc4\120\uffc4\121\uffc4\122\uffc4" +
    "\123\uffc4\124\uffc4\125\uffc4\126\uffc4\127\uffc4\130\uffc4\131" +
    "\uffc4\132\uffc4\133\uffc4\134\uffc4\135\uffc4\136\uffc4\137\uffc4" +
    "\001\002\000\172\003\260\044\u0106\046\245\047\215\050" +
    "\223\051\273\052\234\053\162\054\214\055\255\056\302" +
    "\057\265\060\231\061\274\062\172\063\262\064\307\065" +
    "\201\066\220\067\275\070\225\071\222\072\257\073\224" +
    "\074\232\075\252\076\164\077\226\100\205\101\177\102" +
    "\266\103\246\104\175\105\276\106\241\107\256\110\305" +
    "\111\210\112\306\113\272\114\204\115\176\116\203\117" +
    "\236\120\240\121\237\122\304\123\227\124\211\125\254" +
    "\126\207\127\264\130\301\131\277\132\200\133\165\134" +
    "\263\135\173\136\235\137\171\001\002\000\172\003\uffc5" +
    "\044\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053" +
    "\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5" +
    "\062\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070" +
    "\uffc5\071\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5" +
    "\077\uffc5\100\uffc5\101\uffc5\102\uffc5\103\uffc5\104\uffc5\105" +
    "\uffc5\106\uffc5\107\uffc5\110\uffc5\111\uffc5\112\uffc5\113\uffc5" +
    "\114\uffc5\115\uffc5\116\uffc5\117\uffc5\120\uffc5\121\uffc5\122" +
    "\uffc5\123\uffc5\124\uffc5\125\uffc5\126\uffc5\127\uffc5\130\uffc5" +
    "\131\uffc5\132\uffc5\133\uffc5\134\uffc5\135\uffc5\136\uffc5\137" +
    "\uffc5\001\002\000\004\016\u010b\001\002\000\004\045\u010c" +
    "\001\002\000\172\003\uffe0\044\uffe0\046\uffe0\047\uffe0\050" +
    "\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0" +
    "\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065" +
    "\uffe0\066\uffe0\067\uffe0\070\uffe0\071\uffe0\072\uffe0\073\uffe0" +
    "\074\uffe0\075\uffe0\076\uffe0\077\uffe0\100\uffe0\101\uffe0\102" +
    "\uffe0\103\uffe0\104\uffe0\105\uffe0\106\uffe0\107\uffe0\110\uffe0" +
    "\111\uffe0\112\uffe0\113\uffe0\114\uffe0\115\uffe0\116\uffe0\117" +
    "\uffe0\120\uffe0\121\uffe0\122\uffe0\123\uffe0\124\uffe0\125\uffe0" +
    "\126\uffe0\127\uffe0\130\uffe0\131\uffe0\132\uffe0\133\uffe0\134" +
    "\uffe0\135\uffe0\136\uffe0\137\uffe0\001\002\000\034\011\327" +
    "\012\326\013\322\014\320\015\324\016\316\017\321\020" +
    "\323\021\325\022\330\023\315\024\020\077\u0111\001\002" +
    "\000\172\003\260\044\u010d\046\245\047\215\050\223\051" +
    "\273\052\234\053\162\054\214\055\255\056\302\057\265" +
    "\060\231\061\274\062\172\063\262\064\307\065\201\066" +
    "\220\067\275\070\225\071\222\072\257\073\224\074\232" +
    "\075\252\076\164\077\226\100\205\101\177\102\266\103" +
    "\246\104\175\105\276\106\241\107\256\110\305\111\210" +
    "\112\306\113\272\114\204\115\176\116\203\117\236\120" +
    "\240\121\237\122\304\123\227\124\211\125\254\126\207" +
    "\127\264\130\301\131\277\132\200\133\165\134\263\135" +
    "\173\136\235\137\171\001\002\000\172\003\uffcc\044\uffcc" +
    "\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054" +
    "\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc" +
    "\063\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\070\uffcc\071" +
    "\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc\077\uffcc" +
    "\100\uffcc\101\uffcc\102\uffcc\103\uffcc\104\uffcc\105\uffcc\106" +
    "\uffcc\107\uffcc\110\uffcc\111\uffcc\112\uffcc\113\uffcc\114\uffcc" +
    "\115\uffcc\116\uffcc\117\uffcc\120\uffcc\121\uffcc\122\uffcc\123" +
    "\uffcc\124\uffcc\125\uffcc\126\uffcc\127\uffcc\130\uffcc\131\uffcc" +
    "\132\uffcc\133\uffcc\134\uffcc\135\uffcc\136\uffcc\137\uffcc\001" +
    "\002\000\172\003\uffcd\044\uffcd\046\uffcd\047\uffcd\050\uffcd" +
    "\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057" +
    "\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd" +
    "\066\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\074" +
    "\uffcd\075\uffcd\076\uffcd\077\uffcd\100\uffcd\101\uffcd\102\uffcd" +
    "\103\uffcd\104\uffcd\105\uffcd\106\uffcd\107\uffcd\110\uffcd\111" +
    "\uffcd\112\uffcd\113\uffcd\114\uffcd\115\uffcd\116\uffcd\117\uffcd" +
    "\120\uffcd\121\uffcd\122\uffcd\123\uffcd\124\uffcd\125\uffcd\126" +
    "\uffcd\127\uffcd\130\uffcd\131\uffcd\132\uffcd\133\uffcd\134\uffcd" +
    "\135\uffcd\136\uffcd\137\uffcd\001\002\000\004\012\u0112\001" +
    "\002\000\004\045\u0113\001\002\000\172\003\uffe4\044\uffe4" +
    "\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054" +
    "\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4" +
    "\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\070\uffe4\071" +
    "\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4\076\uffe4\077\uffe4" +
    "\100\uffe4\101\uffe4\102\uffe4\103\uffe4\104\uffe4\105\uffe4\106" +
    "\uffe4\107\uffe4\110\uffe4\111\uffe4\112\uffe4\113\uffe4\114\uffe4" +
    "\115\uffe4\116\uffe4\117\uffe4\120\uffe4\121\uffe4\122\uffe4\123" +
    "\uffe4\124\uffe4\125\uffe4\126\uffe4\127\uffe4\130\uffe4\131\uffe4" +
    "\132\uffe4\133\uffe4\134\uffe4\135\uffe4\136\uffe4\137\uffe4\001" +
    "\002\000\172\003\uffbb\044\uffbb\046\uffbb\047\uffbb\050\uffbb" +
    "\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057" +
    "\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb" +
    "\066\uffbb\067\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074" +
    "\uffbb\075\uffbb\076\uffbb\077\uffbb\100\uffbb\101\uffbb\102\uffbb" +
    "\103\uffbb\104\uffbb\105\uffbb\106\uffbb\107\uffbb\110\uffbb\111" +
    "\uffbb\112\uffbb\113\uffbb\114\uffbb\115\uffbb\116\uffbb\117\uffbb" +
    "\120\uffbb\121\uffbb\122\uffbb\123\uffbb\124\uffbb\125\uffbb\126" +
    "\uffbb\127\uffbb\130\uffbb\131\uffbb\132\uffbb\133\uffbb\134\uffbb" +
    "\135\uffbb\136\uffbb\137\uffbb\001\002\000\034\011\327\012" +
    "\326\013\322\014\320\015\324\016\316\017\321\020\323" +
    "\021\325\022\330\023\315\024\020\077\u0118\001\002\000" +
    "\172\003\260\044\u0115\046\245\047\215\050\223\051\273" +
    "\052\234\053\162\054\214\055\255\056\302\057\265\060" +
    "\231\061\274\062\172\063\262\064\307\065\201\066\220" +
    "\067\275\070\225\071\222\072\257\073\224\074\232\075" +
    "\252\076\164\077\226\100\205\101\177\102\266\103\246" +
    "\104\175\105\276\106\241\107\256\110\305\111\210\112" +
    "\306\113\272\114\204\115\176\116\203\117\236\120\240" +
    "\121\237\122\304\123\227\124\211\125\254\126\207\127" +
    "\264\130\301\131\277\132\200\133\165\134\263\135\173" +
    "\136\235\137\171\001\002\000\172\003\uffbc\044\uffbc\046" +
    "\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc" +
    "\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063" +
    "\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc\071\uffbc" +
    "\072\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\100" +
    "\uffbc\101\uffbc\102\uffbc\103\uffbc\104\uffbc\105\uffbc\106\uffbc" +
    "\107\uffbc\110\uffbc\111\uffbc\112\uffbc\113\uffbc\114\uffbc\115" +
    "\uffbc\116\uffbc\117\uffbc\120\uffbc\121\uffbc\122\uffbc\123\uffbc" +
    "\124\uffbc\125\uffbc\126\uffbc\127\uffbc\130\uffbc\131\uffbc\132" +
    "\uffbc\133\uffbc\134\uffbc\135\uffbc\136\uffbc\137\uffbc\001\002" +
    "\000\004\023\u0119\001\002\000\004\045\u011a\001\002\000" +
    "\172\003\uffdc\044\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc" +
    "\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060" +
    "\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc" +
    "\067\uffdc\070\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc\075" +
    "\uffdc\076\uffdc\077\uffdc\100\uffdc\101\uffdc\102\uffdc\103\uffdc" +
    "\104\uffdc\105\uffdc\106\uffdc\107\uffdc\110\uffdc\111\uffdc\112" +
    "\uffdc\113\uffdc\114\uffdc\115\uffdc\116\uffdc\117\uffdc\120\uffdc" +
    "\121\uffdc\122\uffdc\123\uffdc\124\uffdc\125\uffdc\126\uffdc\127" +
    "\uffdc\130\uffdc\131\uffdc\132\uffdc\133\uffdc\134\uffdc\135\uffdc" +
    "\136\uffdc\137\uffdc\001\002\000\172\003\uffbd\044\uffbd\046" +
    "\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd" +
    "\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063" +
    "\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd" +
    "\072\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\100" +
    "\uffbd\101\uffbd\102\uffbd\103\uffbd\104\uffbd\105\uffbd\106\uffbd" +
    "\107\uffbd\110\uffbd\111\uffbd\112\uffbd\113\uffbd\114\uffbd\115" +
    "\uffbd\116\uffbd\117\uffbd\120\uffbd\121\uffbd\122\uffbd\123\uffbd" +
    "\124\uffbd\125\uffbd\126\uffbd\127\uffbd\130\uffbd\131\uffbd\132" +
    "\uffbd\133\uffbd\134\uffbd\135\uffbd\136\uffbd\137\uffbd\001\002" +
    "\000\034\011\327\012\326\013\322\014\320\015\324\016" +
    "\316\017\321\020\323\021\325\022\330\023\315\024\020" +
    "\077\u011f\001\002\000\172\003\260\044\u011c\046\245\047" +
    "\215\050\223\051\273\052\234\053\162\054\214\055\255" +
    "\056\302\057\265\060\231\061\274\062\172\063\262\064" +
    "\307\065\201\066\220\067\275\070\225\071\222\072\257" +
    "\073\224\074\232\075\252\076\164\077\226\100\205\101" +
    "\177\102\266\103\246\104\175\105\276\106\241\107\256" +
    "\110\305\111\210\112\306\113\272\114\204\115\176\116" +
    "\203\117\236\120\240\121\237\122\304\123\227\124\211" +
    "\125\254\126\207\127\264\130\301\131\277\132\200\133" +
    "\165\134\263\135\173\136\235\137\171\001\002\000\172" +
    "\003\uffbe\044\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052" +
    "\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe" +
    "\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\067" +
    "\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe" +
    "\076\uffbe\077\uffbe\100\uffbe\101\uffbe\102\uffbe\103\uffbe\104" +
    "\uffbe\105\uffbe\106\uffbe\107\uffbe\110\uffbe\111\uffbe\112\uffbe" +
    "\113\uffbe\114\uffbe\115\uffbe\116\uffbe\117\uffbe\120\uffbe\121" +
    "\uffbe\122\uffbe\123\uffbe\124\uffbe\125\uffbe\126\uffbe\127\uffbe" +
    "\130\uffbe\131\uffbe\132\uffbe\133\uffbe\134\uffbe\135\uffbe\136" +
    "\uffbe\137\uffbe\001\002\000\004\022\u0120\001\002\000\004" +
    "\045\u0121\001\002\000\172\003\uffdd\044\uffdd\046\uffdd\047" +
    "\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd" +
    "\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\064" +
    "\uffdd\065\uffdd\066\uffdd\067\uffdd\070\uffdd\071\uffdd\072\uffdd" +
    "\073\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd\100\uffdd\101" +
    "\uffdd\102\uffdd\103\uffdd\104\uffdd\105\uffdd\106\uffdd\107\uffdd" +
    "\110\uffdd\111\uffdd\112\uffdd\113\uffdd\114\uffdd\115\uffdd\116" +
    "\uffdd\117\uffdd\120\uffdd\121\uffdd\122\uffdd\123\uffdd\124\uffdd" +
    "\125\uffdd\126\uffdd\127\uffdd\130\uffdd\131\uffdd\132\uffdd\133" +
    "\uffdd\134\uffdd\135\uffdd\136\uffdd\137\uffdd\001\002\000\172" +
    "\003\uffca\044\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052" +
    "\uffca\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca" +
    "\061\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca\067" +
    "\uffca\070\uffca\071\uffca\072\uffca\073\uffca\074\uffca\075\uffca" +
    "\076\uffca\077\uffca\100\uffca\101\uffca\102\uffca\103\uffca\104" +
    "\uffca\105\uffca\106\uffca\107\uffca\110\uffca\111\uffca\112\uffca" +
    "\113\uffca\114\uffca\115\uffca\116\uffca\117\uffca\120\uffca\121" +
    "\uffca\122\uffca\123\uffca\124\uffca\125\uffca\126\uffca\127\uffca" +
    "\130\uffca\131\uffca\132\uffca\133\uffca\134\uffca\135\uffca\136" +
    "\uffca\137\uffca\001\002\000\034\011\327\012\326\013\322" +
    "\014\320\015\324\016\316\017\321\020\323\021\325\022" +
    "\330\023\315\024\020\077\u0126\001\002\000\172\003\260" +
    "\044\u0123\046\245\047\215\050\223\051\273\052\234\053" +
    "\162\054\214\055\255\056\302\057\265\060\231\061\274" +
    "\062\172\063\262\064\307\065\201\066\220\067\275\070" +
    "\225\071\222\072\257\073\224\074\232\075\252\076\164" +
    "\077\226\100\205\101\177\102\266\103\246\104\175\105" +
    "\276\106\241\107\256\110\305\111\210\112\306\113\272" +
    "\114\204\115\176\116\203\117\236\120\240\121\237\122" +
    "\304\123\227\124\211\125\254\126\207\127\264\130\301" +
    "\131\277\132\200\133\165\134\263\135\173\136\235\137" +
    "\171\001\002\000\172\003\uffcb\044\uffcb\046\uffcb\047\uffcb" +
    "\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056" +
    "\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb" +
    "\065\uffcb\066\uffcb\067\uffcb\070\uffcb\071\uffcb\072\uffcb\073" +
    "\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb\100\uffcb\101\uffcb" +
    "\102\uffcb\103\uffcb\104\uffcb\105\uffcb\106\uffcb\107\uffcb\110" +
    "\uffcb\111\uffcb\112\uffcb\113\uffcb\114\uffcb\115\uffcb\116\uffcb" +
    "\117\uffcb\120\uffcb\121\uffcb\122\uffcb\123\uffcb\124\uffcb\125" +
    "\uffcb\126\uffcb\127\uffcb\130\uffcb\131\uffcb\132\uffcb\133\uffcb" +
    "\134\uffcb\135\uffcb\136\uffcb\137\uffcb\001\002\000\004\013" +
    "\u0127\001\002\000\004\045\u0128\001\002\000\172\003\uffe3" +
    "\044\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053" +
    "\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3" +
    "\062\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\070" +
    "\uffe3\071\uffe3\072\uffe3\073\uffe3\074\uffe3\075\uffe3\076\uffe3" +
    "\077\uffe3\100\uffe3\101\uffe3\102\uffe3\103\uffe3\104\uffe3\105" +
    "\uffe3\106\uffe3\107\uffe3\110\uffe3\111\uffe3\112\uffe3\113\uffe3" +
    "\114\uffe3\115\uffe3\116\uffe3\117\uffe3\120\uffe3\121\uffe3\122" +
    "\uffe3\123\uffe3\124\uffe3\125\uffe3\126\uffe3\127\uffe3\130\uffe3" +
    "\131\uffe3\132\uffe3\133\uffe3\134\uffe3\135\uffe3\136\uffe3\137" +
    "\uffe3\001\002\000\004\010\u012a\001\002\000\004\045\u012b" +
    "\001\002\000\006\002\uffe8\044\uffe8\001\002\000\034\011" +
    "\327\012\326\013\322\014\320\015\324\016\316\017\321" +
    "\020\323\021\325\022\330\023\315\024\020\077\u0130\001" +
    "\002\000\172\003\uffc6\044\uffc6\046\uffc6\047\uffc6\050\uffc6" +
    "\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057" +
    "\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6" +
    "\066\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6\074" +
    "\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6\101\uffc6\102\uffc6" +
    "\103\uffc6\104\uffc6\105\uffc6\106\uffc6\107\uffc6\110\uffc6\111" +
    "\uffc6\112\uffc6\113\uffc6\114\uffc6\115\uffc6\116\uffc6\117\uffc6" +
    "\120\uffc6\121\uffc6\122\uffc6\123\uffc6\124\uffc6\125\uffc6\126" +
    "\uffc6\127\uffc6\130\uffc6\131\uffc6\132\uffc6\133\uffc6\134\uffc6" +
    "\135\uffc6\136\uffc6\137\uffc6\001\002\000\172\003\260\044" +
    "\u012c\046\245\047\215\050\223\051\273\052\234\053\162" +
    "\054\214\055\255\056\302\057\265\060\231\061\274\062" +
    "\172\063\262\064\307\065\201\066\220\067\275\070\225" +
    "\071\222\072\257\073\224\074\232\075\252\076\164\077" +
    "\226\100\205\101\177\102\266\103\246\104\175\105\276" +
    "\106\241\107\256\110\305\111\210\112\306\113\272\114" +
    "\204\115\176\116\203\117\236\120\240\121\237\122\304" +
    "\123\227\124\211\125\254\126\207\127\264\130\301\131" +
    "\277\132\200\133\165\134\263\135\173\136\235\137\171" +
    "\001\002\000\172\003\uffc7\044\uffc7\046\uffc7\047\uffc7\050" +
    "\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7" +
    "\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065" +
    "\uffc7\066\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7" +
    "\074\uffc7\075\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7\102" +
    "\uffc7\103\uffc7\104\uffc7\105\uffc7\106\uffc7\107\uffc7\110\uffc7" +
    "\111\uffc7\112\uffc7\113\uffc7\114\uffc7\115\uffc7\116\uffc7\117" +
    "\uffc7\120\uffc7\121\uffc7\122\uffc7\123\uffc7\124\uffc7\125\uffc7" +
    "\126\uffc7\127\uffc7\130\uffc7\131\uffc7\132\uffc7\133\uffc7\134" +
    "\uffc7\135\uffc7\136\uffc7\137\uffc7\001\002\000\004\015\u0131" +
    "\001\002\000\004\045\u0132\001\002\000\172\003\uffe1\044" +
    "\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1" +
    "\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062" +
    "\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\070\uffe1" +
    "\071\uffe1\072\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1\077" +
    "\uffe1\100\uffe1\101\uffe1\102\uffe1\103\uffe1\104\uffe1\105\uffe1" +
    "\106\uffe1\107\uffe1\110\uffe1\111\uffe1\112\uffe1\113\uffe1\114" +
    "\uffe1\115\uffe1\116\uffe1\117\uffe1\120\uffe1\121\uffe1\122\uffe1" +
    "\123\uffe1\124\uffe1\125\uffe1\126\uffe1\127\uffe1\130\uffe1\131" +
    "\uffe1\132\uffe1\133\uffe1\134\uffe1\135\uffe1\136\uffe1\137\uffe1" +
    "\001\002\000\010\044\uff81\055\uff81\057\uff81\001\002\000" +
    "\004\100\u01f4\001\002\000\004\044\u01ef\001\002\000\010" +
    "\044\uff82\055\u0137\057\u0134\001\002\000\004\100\u0138\001" +
    "\002\000\004\101\u0139\001\002\000\004\112\u013b\001\002" +
    "\000\010\044\uff71\055\uff71\057\uff71\001\002\000\040\003" +
    "\u014c\035\u0142\040\u0154\042\u0140\053\u0141\056\u0147\071\u014d" +
    "\072\u013c\073\u014a\113\uff6e\116\u0153\117\u013e\120\u0143\121" +
    "\u013f\122\u0145\001\002\000\004\100\u01ec\001\002\000\042" +
    "\003\uff65\035\uff65\040\uff65\042\uff65\053\uff65\056\uff65\071" +
    "\uff65\072\uff65\073\uff65\102\uff65\113\uff65\116\uff65\117\uff65" +
    "\120\uff65\121\uff65\122\uff65\001\002\000\006\053\uff74\061" +
    "\uff74\001\002\000\006\053\uff73\061\uff73\001\002\000\004" +
    "\100\u01e7\001\002\000\030\052\uff79\074\uff79\075\uff79\076" +
    "\uff79\077\uff79\101\uff79\103\uff79\104\uff79\106\uff79\107\uff79" +
    "\110\uff79\001\002\000\004\100\u01d5\001\002\000\006\053" +
    "\uff72\061\uff72\001\002\000\004\103\u01d4\001\002\000\006" +
    "\053\uff75\061\uff75\001\002\000\004\052\u01d2\001\002\000" +
    "\004\100\u01cc\001\002\000\042\003\uff6c\035\uff6c\040\uff6c" +
    "\042\uff6c\053\uff6c\056\uff6c\071\uff6c\072\uff6c\073\uff6c\102" +
    "\uff6c\113\uff6c\116\uff6c\117\uff6c\120\uff6c\121\uff6c\122\uff6c" +
    "\001\002\000\042\003\u014c\035\u0142\040\u0154\042\u0140\053" +
    "\u0141\056\u0147\071\u014d\072\u013c\073\u014a\102\uff6d\113\uff6d" +
    "\116\u0153\117\u013e\120\u0143\121\u013f\122\u0145\001\002\000" +
    "\004\100\u01c9\001\002\000\006\053\u0141\061\u01c0\001\002" +
    "\000\042\003\uff64\035\uff64\040\uff64\042\uff64\053\uff64\056" +
    "\uff64\071\uff64\072\uff64\073\uff64\102\uff64\113\uff64\116\uff64" +
    "\117\uff64\120\uff64\121\uff64\122\uff64\001\002\000\004\100" +
    "\u01bc\001\002\000\042\003\uff67\035\uff67\040\uff67\042\uff67" +
    "\053\uff67\056\uff67\071\uff67\072\uff67\073\uff67\102\uff67\113" +
    "\uff67\116\uff67\117\uff67\120\uff67\121\uff67\122\uff67\001\002" +
    "\000\004\103\u01bb\001\002\000\004\113\u01ba\001\002\000" +
    "\004\103\u01b9\001\002\000\042\003\uff66\035\uff66\040\uff66" +
    "\042\uff66\053\uff66\056\uff66\071\uff66\072\uff66\073\uff66\102" +
    "\uff66\113\uff66\116\uff66\117\uff66\120\uff66\121\uff66\122\uff66" +
    "\001\002\000\006\053\uff76\061\uff76\001\002\000\004\100" +
    "\u0155\001\002\000\006\053\u0141\116\u0156\001\002\000\004" +
    "\053\u0141\001\002\000\004\052\u01b4\001\002\000\004\101" +
    "\u0159\001\002\000\004\041\u015a\001\002\000\004\100\u015b" +
    "\001\002\000\042\046\073\050\u016a\051\u016f\053\u0141\060" +
    "\u015f\062\u0172\063\u015d\064\u0166\065\u015c\066\u0176\067\u0175" +
    "\070\u016d\075\u0171\100\u0164\123\u0161\124\u0170\001\002\000" +
    "\004\100\u01b1\001\002\000\004\100\u01ae\001\002\000\012" +
    "\101\uff3d\103\uff3d\107\uff3d\110\u01a4\001\002\000\004\100" +
    "\u01a8\001\002\000\024\074\uff2a\075\uff2a\076\uff2a\077\uff2a" +
    "\101\uff2a\103\uff2a\106\uff2a\107\uff2a\110\uff2a\001\002\000" +
    "\024\074\uff29\075\uff29\076\uff29\077\uff29\101\uff29\103\uff29" +
    "\106\uff29\107\uff29\110\uff29\001\002\000\024\074\uff34\075" +
    "\uff34\076\uff34\077\uff34\101\uff34\103\uff34\106\uff34\107\uff34" +
    "\110\uff34\001\002\000\006\101\uff3f\103\uff3f\001\002\000" +
    "\042\046\073\050\u016a\051\u016f\053\u0141\060\u015f\062\u0172" +
    "\063\u015d\064\u0166\065\u015c\066\u0176\067\u0175\070\u016d\075" +
    "\u0171\100\u0164\123\u0161\124\u0170\001\002\000\010\101\uff3e" +
    "\103\uff3e\107\u01a2\001\002\000\004\100\u019f\001\002\000" +
    "\004\101\u018c\001\002\000\024\074\uff30\075\uff30\076\uff30" +
    "\077\uff30\101\uff30\103\uff30\106\uff30\107\uff30\110\uff30\001" +
    "\002\000\024\074\uff31\075\uff31\076\uff31\077\uff31\101\uff31" +
    "\103\uff31\106\uff31\107\uff31\110\uff31\001\002\000\024\074" +
    "\uff2b\075\uff2b\076\uff2b\077\uff2b\101\uff2b\103\uff2b\106\uff2b" +
    "\107\uff2b\110\uff2b\001\002\000\020\074\u0188\075\u0189\101" +
    "\uff39\103\uff39\106\uff39\107\uff39\110\uff39\001\002\000\014" +
    "\101\uff3b\103\uff3b\106\u0186\107\uff3b\110\uff3b\001\002\000" +
    "\004\100\u0184\001\002\000\024\074\uff2f\075\uff2f\076\uff2f" +
    "\077\uff2f\101\uff2f\103\uff2f\106\uff2f\107\uff2f\110\uff2f\001" +
    "\002\000\024\074\uff26\075\uff26\076\uff26\077\uff26\101\uff26" +
    "\103\uff26\106\uff26\107\uff26\110\uff26\001\002\000\024\074" +
    "\uff28\075\uff28\076\uff28\077\uff28\101\uff28\103\uff28\106\uff28" +
    "\107\uff28\110\uff28\001\002\000\042\046\073\050\u016a\051" +
    "\u016f\053\u0141\060\u015f\062\u0172\063\u015d\064\u0166\065\u015c" +
    "\066\u0176\067\u0175\070\u016d\075\u0171\100\u0164\123\u0161\124" +
    "\u0170\001\002\000\004\100\u0180\001\002\000\024\074\uff37" +
    "\075\uff37\076\u017d\077\u017c\101\uff37\103\uff37\106\uff37\107" +
    "\uff37\110\uff37\001\002\000\024\074\uff2c\075\uff2c\076\uff2c" +
    "\077\uff2c\101\uff2c\103\uff2c\106\uff2c\107\uff2c\110\uff2c\001" +
    "\002\000\004\100\u017a\001\002\000\004\100\u0177\001\002" +
    "\000\042\046\073\050\u016a\051\u016f\053\u0141\060\u015f\062" +
    "\u0172\063\u015d\064\u0166\065\u015c\066\u0176\067\u0175\070\u016d" +
    "\075\u0171\100\u0164\123\u0161\124\u0170\001\002\000\004\101" +
    "\u0179\001\002\000\024\074\uff5b\075\uff5b\076\uff5b\077\uff5b" +
    "\101\uff5b\103\uff5b\106\uff5b\107\uff5b\110\uff5b\001\002\000" +
    "\004\101\u017b\001\002\000\024\074\uff5a\075\uff5a\076\uff5a" +
    "\077\uff5a\101\uff5a\103\uff5a\106\uff5a\107\uff5a\110\uff5a\001" +
    "\002\000\042\046\073\050\u016a\051\u016f\053\u0141\060\u015f" +
    "\062\u0172\063\u015d\064\u0166\065\u015c\066\u0176\067\u0175\070" +
    "\u016d\075\u0171\100\u0164\123\u0161\124\u0170\001\002\000\042" +
    "\046\073\050\u016a\051\u016f\053\u0141\060\u015f\062\u0172\063" +
    "\u015d\064\u0166\065\u015c\066\u0176\067\u0175\070\u016d\075\u0171" +
    "\100\u0164\123\u0161\124\u0170\001\002\000\024\074\uff33\075" +
    "\uff33\076\uff33\077\uff33\101\uff33\103\uff33\106\uff33\107\uff33" +
    "\110\uff33\001\002\000\024\074\uff32\075\uff32\076\uff32\077" +
    "\uff32\101\uff32\103\uff32\106\uff32\107\uff32\110\uff32\001\002" +
    "\000\042\046\073\050\u016a\051\u016f\053\u0141\060\u015f\062" +
    "\u0172\063\u015d\064\u0166\065\u015c\066\u0176\067\u0175\070\u016d" +
    "\075\u0171\100\u0164\123\u0161\124\u0170\001\002\000\004\101" +
    "\u0182\001\002\000\024\074\uff5f\075\uff5f\076\uff5f\077\uff5f" +
    "\101\uff5f\103\uff5f\106\uff5f\107\uff5f\110\uff5f\001\002\000" +
    "\024\074\uff2e\075\uff2e\076\uff2e\077\uff2e\101\uff2e\103\uff2e" +
    "\106\uff2e\107\uff2e\110\uff2e\001\002\000\004\101\u0185\001" +
    "\002\000\024\074\uff59\075\uff59\076\uff59\077\uff59\101\uff59" +
    "\103\uff59\106\uff59\107\uff59\110\uff59\001\002\000\042\046" +
    "\073\050\u016a\051\u016f\053\u0141\060\u015f\062\u0172\063\u015d" +
    "\064\u0166\065\u015c\066\u0176\067\u0175\070\u016d\075\u0171\100" +
    "\u0164\123\u0161\124\u0170\001\002\000\020\074\u0188\075\u0189" +
    "\101\uff38\103\uff38\106\uff38\107\uff38\110\uff38\001\002\000" +
    "\042\046\073\050\u016a\051\u016f\053\u0141\060\u015f\062\u0172" +
    "\063\u015d\064\u0166\065\u015c\066\u0176\067\u0175\070\u016d\075" +
    "\u0171\100\u0164\123\u0161\124\u0170\001\002\000\042\046\073" +
    "\050\u016a\051\u016f\053\u0141\060\u015f\062\u0172\063\u015d\064" +
    "\u0166\065\u015c\066\u0176\067\u0175\070\u016d\075\u0171\100\u0164" +
    "\123\u0161\124\u0170\001\002\000\024\074\uff35\075\uff35\076" +
    "\u017d\077\u017c\101\uff35\103\uff35\106\uff35\107\uff35\110\uff35" +
    "\001\002\000\024\074\uff36\075\uff36\076\u017d\077\u017c\101" +
    "\uff36\103\uff36\106\uff36\107\uff36\110\uff36\001\002\000\030" +
    "\033\u018d\053\u0141\056\u0147\071\u014d\072\u013c\073\u014a\116" +
    "\u0153\117\u013e\120\u0143\121\u013f\122\u0145\001\002\000\004" +
    "\114\u019d\001\002\000\042\003\uff43\035\uff43\040\uff43\042" +
    "\uff43\053\uff43\056\uff43\071\uff43\072\uff43\073\uff43\102\uff43" +
    "\113\uff43\116\uff43\117\uff43\120\uff43\121\uff43\122\uff43\001" +
    "\002\000\004\103\u019c\001\002\000\044\003\uff50\035\uff50" +
    "\037\uff50\040\uff50\042\uff50\053\uff50\056\uff50\071\uff50\072" +
    "\uff50\073\uff50\102\uff50\113\uff50\116\uff50\117\uff50\120\uff50" +
    "\121\uff50\122\uff50\001\002\000\044\003\uff4f\035\uff4f\037" +
    "\uff4f\040\uff4f\042\uff4f\053\uff4f\056\uff4f\071\uff4f\072\uff4f" +
    "\073\uff4f\102\uff4f\113\uff4f\116\uff4f\117\uff4f\120\uff4f\121" +
    "\uff4f\122\uff4f\001\002\000\040\003\u014c\035\u0142\040\u0154" +
    "\042\u0140\053\u0141\056\u0147\071\u014d\072\u013c\073\u014a\102" +
    "\uff6e\116\u0153\117\u013e\120\u0143\121\u013f\122\u0145\001\002" +
    "\000\004\103\u0196\001\002\000\004\103\u0195\001\002\000" +
    "\044\003\uff4e\035\uff4e\037\uff4e\040\uff4e\042\uff4e\053\uff4e" +
    "\056\uff4e\071\uff4e\072\uff4e\073\uff4e\102\uff4e\113\uff4e\116" +
    "\uff4e\117\uff4e\120\uff4e\121\uff4e\122\uff4e\001\002\000\044" +
    "\003\uff4d\035\uff4d\037\uff4d\040\uff4d\042\uff4d\053\uff4d\056" +
    "\uff4d\071\uff4d\072\uff4d\073\uff4d\102\uff4d\113\uff4d\116\uff4d" +
    "\117\uff4d\120\uff4d\121\uff4d\122\uff4d\001\002\000\004\102" +
    "\u0198\001\002\000\004\115\u019a\001\002\000\044\003\uff51" +
    "\035\uff51\037\uff51\040\uff51\042\uff51\053\uff51\056\uff51\071" +
    "\uff51\072\uff51\073\uff51\102\uff51\113\uff51\116\uff51\117\uff51" +
    "\120\uff51\121\uff51\122\uff51\001\002\000\004\034\u019b\001" +
    "\002\000\044\003\uff52\035\uff52\037\uff52\040\uff52\042\uff52" +
    "\053\uff52\056\uff52\071\uff52\072\uff52\073\uff52\102\uff52\113" +
    "\uff52\116\uff52\117\uff52\120\uff52\121\uff52\122\uff52\001\002" +
    "\000\044\003\uff4c\035\uff4c\037\uff4c\040\uff4c\042\uff4c\053" +
    "\uff4c\056\uff4c\071\uff4c\072\uff4c\073\uff4c\102\uff4c\113\uff4c" +
    "\116\uff4c\117\uff4c\120\uff4c\121\uff4c\122\uff4c\001\002\000" +
    "\004\102\u019e\001\002\000\040\003\uff53\035\uff53\040\uff53" +
    "\042\uff53\053\uff53\056\uff53\071\uff53\072\uff53\073\uff53\102" +
    "\uff53\116\uff53\117\uff53\120\uff53\121\uff53\122\uff53\001\002" +
    "\000\042\046\073\050\u016a\051\u016f\053\u0141\060\u015f\062" +
    "\u0172\063\u015d\064\u0166\065\u015c\066\u0176\067\u0175\070\u016d" +
    "\075\u0171\100\u0164\123\u0161\124\u0170\001\002\000\004\101" +
    "\u01a1\001\002\000\024\074\uff5d\075\uff5d\076\uff5d\077\uff5d" +
    "\101\uff5d\103\uff5d\106\uff5d\107\uff5d\110\uff5d\001\002\000" +
    "\042\046\073\050\u016a\051\u016f\053\u0141\060\u015f\062\u0172" +
    "\063\u015d\064\u0166\065\u015c\066\u0176\067\u0175\070\u016d\075" +
    "\u0171\100\u0164\123\u0161\124\u0170\001\002\000\012\101\uff3c" +
    "\103\uff3c\107\uff3c\110\u01a4\001\002\000\042\046\073\050" +
    "\u016a\051\u016f\053\u0141\060\u015f\062\u0172\063\u015d\064\u0166" +
    "\065\u015c\066\u0176\067\u0175\070\u016d\075\u0171\100\u0164\123" +
    "\u0161\124\u0170\001\002\000\014\101\uff3a\103\uff3a\106\u0186" +
    "\107\uff3a\110\uff3a\001\002\000\004\101\u01a7\001\002\000" +
    "\024\074\uff2d\075\uff2d\076\uff2d\077\uff2d\101\uff2d\103\uff2d" +
    "\106\uff2d\107\uff2d\110\uff2d\001\002\000\006\047\u01ab\053" +
    "\u0141\001\002\000\006\101\uff55\104\uff55\001\002\000\006" +
    "\101\uff54\104\uff54\001\002\000\006\101\uff25\104\uff25\001" +
    "\002\000\004\101\u01ad\001\002\000\024\074\uff58\075\uff58" +
    "\076\uff58\077\uff58\101\uff58\103\uff58\106\uff58\107\uff58\110" +
    "\uff58\001\002\000\042\046\073\050\u016a\051\u016f\053\u0141" +
    "\060\u015f\062\u0172\063\u015d\064\u0166\065\u015c\066\u0176\067" +
    "\u0175\070\u016d\075\u0171\100\u0164\123\u0161\124\u0170\001\002" +
    "\000\004\101\u01b0\001\002\000\024\074\uff5e\075\uff5e\076" +
    "\uff5e\077\uff5e\101\uff5e\103\uff5e\106\uff5e\107\uff5e\110\uff5e" +
    "\001\002\000\042\046\073\050\u016a\051\u016f\053\u0141\060" +
    "\u015f\062\u0172\063\u015d\064\u0166\065\u015c\066\u0176\067\u0175" +
    "\070\u016d\075\u0171\100\u0164\123\u0161\124\u0170\001\002\000" +
    "\004\101\u01b3\001\002\000\024\074\uff5c\075\uff5c\076\uff5c" +
    "\077\uff5c\101\uff5c\103\uff5c\106\uff5c\107\uff5c\110\uff5c\001" +
    "\002\000\042\046\073\050\u016a\051\u016f\053\u0141\060\u015f" +
    "\062\u0172\063\u015d\064\u0166\065\u015c\066\u0176\067\u0175\070" +
    "\u016d\075\u0171\100\u0164\123\u0161\124\u0170\001\002\000\004" +
    "\101\uff41\001\002\000\004\052\u01b7\001\002\000\042\046" +
    "\073\050\u016a\051\u016f\053\u0141\060\u015f\062\u0172\063\u015d" +
    "\064\u0166\065\u015c\066\u0176\067\u0175\070\u016d\075\u0171\100" +
    "\u0164\123\u0161\124\u0170\001\002\000\004\101\uff42\001\002" +
    "\000\042\003\uff6a\035\uff6a\040\uff6a\042\uff6a\053\uff6a\056" +
    "\uff6a\071\uff6a\072\uff6a\073\uff6a\102\uff6a\113\uff6a\116\uff6a" +
    "\117\uff6a\120\uff6a\121\uff6a\122\uff6a\001\002\000\010\044" +
    "\uff6f\055\uff6f\057\uff6f\001\002\000\042\003\uff69\035\uff69" +
    "\040\uff69\042\uff69\053\uff69\056\uff69\071\uff69\072\uff69\073" +
    "\uff69\102\uff69\113\uff69\116\uff69\117\uff69\120\uff69\121\uff69" +
    "\122\uff69\001\002\000\042\046\073\050\u016a\051\u016f\053" +
    "\u0141\060\u015f\062\u0172\063\u015d\064\u0166\065\u015c\066\u0176" +
    "\067\u0175\070\u016d\075\u0171\100\u0164\123\u0161\124\u0170\001" +
    "\002\000\004\101\u01be\001\002\000\004\103\uff63\001\002" +
    "\000\010\052\uff7b\103\uff7d\104\uff7b\001\002\000\004\053" +
    "\u0141\001\002\000\004\103\uff7e\001\002\000\006\052\u01c5" +
    "\104\u01c4\001\002\000\004\103\uff7c\001\002\000\004\053" +
    "\u0141\001\002\000\042\046\073\050\u016a\051\u016f\053\u0141" +
    "\060\u015f\062\u0172\063\u015d\064\u0166\065\u015c\066\u0176\067" +
    "\u0175\070\u016d\075\u0171\100\u0164\123\u0161\124\u0170\001\002" +
    "\000\004\103\uff78\001\002\000\006\052\uff7a\104\uff7a\001" +
    "\002\000\004\103\uff7f\001\002\000\004\101\u01ca\001\002" +
    "\000\004\103\uff61\001\002\000\042\003\uff6b\035\uff6b\040" +
    "\uff6b\042\uff6b\053\uff6b\056\uff6b\071\uff6b\072\uff6b\073\uff6b" +
    "\102\uff6b\113\uff6b\116\uff6b\117\uff6b\120\uff6b\121\uff6b\122" +
    "\uff6b\001\002\000\006\047\u01ab\053\u0141\001\002\000\006" +
    "\101\u01d0\104\u01cf\001\002\000\006\101\uff57\104\uff57\001" +
    "\002\000\006\047\u01ab\053\u0141\001\002\000\004\103\uff60" +
    "\001\002\000\006\101\uff56\104\uff56\001\002\000\042\046" +
    "\073\050\u016a\051\u016f\053\u0141\060\u015f\062\u0172\063\u015d" +
    "\064\u0166\065\u015c\066\u0176\067\u0175\070\u016d\075\u0171\100" +
    "\u0164\123\u0161\124\u0170\001\002\000\004\103\uff77\001\002" +
    "\000\042\003\uff68\035\uff68\040\uff68\042\uff68\053\uff68\056" +
    "\uff68\071\uff68\072\uff68\073\uff68\102\uff68\113\uff68\116\uff68" +
    "\117\uff68\120\uff68\121\uff68\122\uff68\001\002\000\042\046" +
    "\073\050\u016a\051\u016f\053\u0141\060\u015f\062\u0172\063\u015d" +
    "\064\u0166\065\u015c\066\u0176\067\u0175\070\u016d\075\u0171\100" +
    "\u0164\123\u0161\124\u0170\001\002\000\004\101\u01d7\001\002" +
    "\000\004\036\u01d8\001\002\000\030\033\u018d\053\u0141\056" +
    "\u0147\071\u014d\072\u013c\073\u014a\116\u0153\117\u013e\120\u0143" +
    "\121\u013f\122\u0145\001\002\000\044\003\uff4b\035\uff4b\037" +
    "\u01db\040\uff4b\042\uff4b\053\uff4b\056\uff4b\071\uff4b\072\uff4b" +
    "\073\uff4b\102\uff4b\113\uff4b\116\uff4b\117\uff4b\120\uff4b\121" +
    "\uff4b\122\uff4b\001\002\000\042\003\uff49\035\uff49\040\uff49" +
    "\042\uff49\053\uff49\056\uff49\071\uff49\072\uff49\073\uff49\102" +
    "\uff49\113\uff49\116\uff49\117\uff49\120\uff49\121\uff49\122\uff49" +
    "\001\002\000\032\033\u018d\035\u01e0\053\u0141\056\u0147\071" +
    "\u014d\072\u013c\073\u014a\116\u0153\117\u013e\120\u0143\121\u013f" +
    "\122\u0145\001\002\000\044\003\uff4a\035\uff4a\037\u01db\040" +
    "\uff4a\042\uff4a\053\uff4a\056\uff4a\071\uff4a\072\uff4a\073\uff4a" +
    "\102\uff4a\113\uff4a\116\uff4a\117\uff4a\120\uff4a\121\uff4a\122" +
    "\uff4a\001\002\000\044\003\uff47\035\uff47\037\uff47\040\uff47" +
    "\042\uff47\053\uff47\056\uff47\071\uff47\072\uff47\073\uff47\102" +
    "\uff47\113\uff47\116\uff47\117\uff47\120\uff47\121\uff47\122\uff47" +
    "\001\002\000\042\003\uff48\035\uff48\040\uff48\042\uff48\053" +
    "\uff48\056\uff48\071\uff48\072\uff48\073\uff48\102\uff48\113\uff48" +
    "\116\uff48\117\uff48\120\uff48\121\uff48\122\uff48\001\002\000" +
    "\044\003\uff46\035\uff46\037\uff46\040\uff46\042\uff46\053\uff46" +
    "\056\uff46\071\uff46\072\uff46\073\uff46\102\uff46\113\uff46\116" +
    "\uff46\117\uff46\120\uff46\121\uff46\122\uff46\001\002\000\004" +
    "\100\u01e2\001\002\000\042\003\uff44\035\uff44\040\uff44\042" +
    "\uff44\053\uff44\056\uff44\071\uff44\072\uff44\073\uff44\102\uff44" +
    "\113\uff44\116\uff44\117\uff44\120\uff44\121\uff44\122\uff44\001" +
    "\002\000\042\046\073\050\u016a\051\u016f\053\u0141\060\u015f" +
    "\062\u0172\063\u015d\064\u0166\065\u015c\066\u0176\067\u0175\070" +
    "\u016d\075\u0171\100\u0164\123\u0161\124\u0170\001\002\000\004" +
    "\101\u01e4\001\002\000\004\036\u01e5\001\002\000\030\033" +
    "\u018d\053\u0141\056\u0147\071\u014d\072\u013c\073\u014a\116\u0153" +
    "\117\u013e\120\u0143\121\u013f\122\u0145\001\002\000\044\003" +
    "\uff45\035\uff45\037\uff45\040\uff45\042\uff45\053\uff45\056\uff45" +
    "\071\uff45\072\uff45\073\uff45\102\uff45\113\uff45\116\uff45\117" +
    "\uff45\120\uff45\121\uff45\122\uff45\001\002\000\042\046\073" +
    "\050\u016a\051\u016f\053\u0141\060\u015f\062\u0172\063\u015d\064" +
    "\u0166\065\u015c\066\u0176\067\u0175\070\u016d\075\u0171\100\u0164" +
    "\123\u0161\124\u0170\001\002\000\004\101\u01e9\001\002\000" +
    "\004\043\u01ea\001\002\000\030\033\u018d\053\u0141\056\u0147" +
    "\071\u014d\072\u013c\073\u014a\116\u0153\117\u013e\120\u0143\121" +
    "\u013f\122\u0145\001\002\000\042\003\uff40\035\uff40\040\uff40" +
    "\042\uff40\053\uff40\056\uff40\071\uff40\072\uff40\073\uff40\102" +
    "\uff40\113\uff40\116\uff40\117\uff40\120\uff40\121\uff40\122\uff40" +
    "\001\002\000\004\101\u01ed\001\002\000\004\103\uff62\001" +
    "\002\000\010\044\uff80\055\uff80\057\uff80\001\002\000\004" +
    "\077\u01f1\001\002\000\174\002\uffba\003\uffba\044\uffba\046" +
    "\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba" +
    "\055\uffba\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063" +
    "\uffba\064\uffba\065\uffba\066\uffba\067\uffba\070\uffba\071\uffba" +
    "\072\uffba\073\uffba\074\uffba\075\uffba\076\uffba\077\uffba\100" +
    "\uffba\101\uffba\102\uffba\103\uffba\104\uffba\105\uffba\106\uffba" +
    "\107\uffba\110\uffba\111\uffba\112\uffba\113\uffba\114\uffba\115" +
    "\uffba\116\uffba\117\uffba\120\uffba\121\uffba\122\uffba\123\uffba" +
    "\124\uffba\125\uffba\126\uffba\127\uffba\130\uffba\131\uffba\132" +
    "\uffba\133\uffba\134\uffba\135\uffba\136\uffba\137\uffba\001\002" +
    "\000\004\024\u01f2\001\002\000\004\045\u01f3\001\002\000" +
    "\174\002\uffdb\003\uffdb\044\uffdb\046\uffdb\047\uffdb\050\uffdb" +
    "\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057" +
    "\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb" +
    "\066\uffdb\067\uffdb\070\uffdb\071\uffdb\072\uffdb\073\uffdb\074" +
    "\uffdb\075\uffdb\076\uffdb\077\uffdb\100\uffdb\101\uffdb\102\uffdb" +
    "\103\uffdb\104\uffdb\105\uffdb\106\uffdb\107\uffdb\110\uffdb\111" +
    "\uffdb\112\uffdb\113\uffdb\114\uffdb\115\uffdb\116\uffdb\117\uffdb" +
    "\120\uffdb\121\uffdb\122\uffdb\123\uffdb\124\uffdb\125\uffdb\126" +
    "\uffdb\127\uffdb\130\uffdb\131\uffdb\132\uffdb\133\uffdb\134\uffdb" +
    "\135\uffdb\136\uffdb\137\uffdb\001\002\000\004\101\u01f5\001" +
    "\002\000\004\112\u013b\001\002\000\010\044\uff70\055\uff70" +
    "\057\uff70\001\002\000\004\004\021\001\002\000\010\002" +
    "\ufffc\003\ufffc\044\ufffc\001\002\000\004\044\u0224\001\002" +
    "\000\004\005\u0221\001\002\000\004\044\u0220\001\002\000" +
    "\004\044\u01fd\001\002\000\010\006\u0215\007\u0206\077\u020b" +
    "\001\002\000\166\046\245\047\215\050\223\051\273\052" +
    "\234\053\162\054\214\055\255\056\302\057\265\060\231" +
    "\061\274\062\172\063\262\064\307\065\201\066\220\067" +
    "\275\070\225\071\222\072\257\073\224\074\232\075\252" +
    "\076\164\077\226\100\205\101\177\102\266\103\246\104" +
    "\175\105\276\106\241\107\256\110\305\111\210\112\306" +
    "\113\272\114\204\115\176\116\203\117\236\120\240\121" +
    "\237\122\304\123\227\124\211\125\254\126\207\127\264" +
    "\130\301\131\277\132\200\133\165\134\263\135\173\136" +
    "\235\137\171\001\002\000\004\044\u0213\001\002\000\004" +
    "\044\uffd6\001\002\000\004\044\u020e\001\002\000\004\044" +
    "\u0209\001\002\000\004\044\u0204\001\002\000\004\007\u0206" +
    "\001\002\000\004\044\uffd3\001\002\000\006\045\uffa9\112" +
    "\031\001\002\000\004\045\u0208\001\002\000\004\044\ufff7" +
    "\001\002\000\004\077\u020b\001\002\000\004\044\uffd7\001" +
    "\002\000\004\005\u020c\001\002\000\004\045\u020d\001\002" +
    "\000\004\044\uffe9\001\002\000\004\077\u0210\001\002\000" +
    "\004\044\uffd4\001\002\000\004\007\u0211\001\002\000\004" +
    "\045\u0212\001\002\000\004\044\uffe6\001\002\000\004\006" +
    "\u0215\001\002\000\004\044\uffd2\001\002\000\004\045\u0216" +
    "\001\002\000\166\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052" +
    "\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8" +
    "\061\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8\067" +
    "\ufff8\070\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075\ufff8" +
    "\076\ufff8\077\ufff8\100\ufff8\101\ufff8\102\ufff8\103\ufff8\104" +
    "\ufff8\105\ufff8\106\ufff8\107\ufff8\110\ufff8\111\ufff8\112\ufff8" +
    "\113\ufff8\114\ufff8\115\ufff8\116\ufff8\117\ufff8\120\ufff8\121" +
    "\ufff8\122\ufff8\123\ufff8\124\ufff8\125\ufff8\126\ufff8\127\ufff8" +
    "\130\ufff8\131\ufff8\132\ufff8\133\ufff8\134\ufff8\135\ufff8\136" +
    "\ufff8\137\ufff8\001\002\000\170\044\u0219\046\245\047\215" +
    "\050\223\051\273\052\234\053\162\054\214\055\255\056" +
    "\302\057\265\060\231\061\274\062\172\063\262\064\307" +
    "\065\201\066\220\067\275\070\225\071\222\072\257\073" +
    "\224\074\232\075\252\076\164\077\226\100\205\101\177" +
    "\102\266\103\246\104\175\105\276\106\241\107\256\110" +
    "\305\111\210\112\306\113\272\114\204\115\176\116\203" +
    "\117\236\120\240\121\237\122\304\123\227\124\211\125" +
    "\254\126\207\127\264\130\301\131\277\132\200\133\165" +
    "\134\263\135\173\136\235\137\171\001\002\000\170\044" +
    "\ufeea\046\ufeea\047\ufeea\050\ufeea\051\ufeea\052\ufeea\053\ufeea" +
    "\054\ufeea\055\ufeea\056\ufeea\057\ufeea\060\ufeea\061\ufeea\062" +
    "\ufeea\063\ufeea\064\ufeea\065\ufeea\066\ufeea\067\ufeea\070\ufeea" +
    "\071\ufeea\072\ufeea\073\ufeea\074\ufeea\075\ufeea\076\ufeea\077" +
    "\ufeea\100\ufeea\101\ufeea\102\ufeea\103\ufeea\104\ufeea\105\ufeea" +
    "\106\ufeea\107\ufeea\110\ufeea\111\ufeea\112\ufeea\113\ufeea\114" +
    "\ufeea\115\ufeea\116\ufeea\117\ufeea\120\ufeea\121\ufeea\122\ufeea" +
    "\123\ufeea\124\ufeea\125\ufeea\126\ufeea\127\ufeea\130\ufeea\131" +
    "\ufeea\132\ufeea\133\ufeea\134\ufeea\135\ufeea\136\ufeea\137\ufeea" +
    "\001\002\000\004\077\u021c\001\002\000\170\044\ufee9\046" +
    "\ufee9\047\ufee9\050\ufee9\051\ufee9\052\ufee9\053\ufee9\054\ufee9" +
    "\055\ufee9\056\ufee9\057\ufee9\060\ufee9\061\ufee9\062\ufee9\063" +
    "\ufee9\064\ufee9\065\ufee9\066\ufee9\067\ufee9\070\ufee9\071\ufee9" +
    "\072\ufee9\073\ufee9\074\ufee9\075\ufee9\076\ufee9\077\ufee9\100" +
    "\ufee9\101\ufee9\102\ufee9\103\ufee9\104\ufee9\105\ufee9\106\ufee9" +
    "\107\ufee9\110\ufee9\111\ufee9\112\ufee9\113\ufee9\114\ufee9\115" +
    "\ufee9\116\ufee9\117\ufee9\120\ufee9\121\ufee9\122\ufee9\123\ufee9" +
    "\124\ufee9\125\ufee9\126\ufee9\127\ufee9\130\ufee9\131\ufee9\132" +
    "\ufee9\133\ufee9\134\ufee9\135\ufee9\136\ufee9\137\ufee9\001\002" +
    "\000\004\044\uffd5\001\002\000\004\006\u021d\001\002\000" +
    "\004\045\u021e\001\002\000\004\044\uffe7\001\002\000\004" +
    "\044\uffd8\001\002\000\004\010\017\001\002\000\004\045" +
    "\u0222\001\002\000\004\044\ufffa\001\002\000\010\002\uffda" +
    "\003\uffda\044\uffda\001\002\000\004\077\u0225\001\002\000" +
    "\004\004\u0226\001\002\000\004\045\u0227\001\002\000\010" +
    "\002\uffea\003\uffea\044\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0225\000\022\002\014\003\004\004\006\005\003\007" +
    "\010\025\007\047\011\065\005\001\001\000\010\006\u01fb" +
    "\046\u01fa\067\u01f8\001\001\000\006\004\u01f7\005\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\120\u0134" +
    "\121\u0135\127\u0132\001\001\000\072\012\252\013\232\014" +
    "\212\015\247\016\173\017\242\020\266\021\160\022\267" +
    "\023\216\024\220\025\007\030\205\052\246\053\166\054" +
    "\302\055\165\056\241\057\162\060\211\061\167\062\215" +
    "\063\227\064\277\065\250\070\243\071\270\170\260\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\072\156\073" +
    "\026\074\023\075\040\076\041\077\037\100\027\101\021" +
    "\102\024\103\022\104\035\105\045\106\033\107\032\110" +
    "\042\111\025\112\036\113\034\114\043\115\044\001\001" +
    "\000\002\001\001\000\052\072\031\073\026\074\023\075" +
    "\040\076\041\077\037\100\027\101\021\102\024\103\022" +
    "\104\035\105\045\106\033\107\032\110\042\111\025\112" +
    "\036\113\034\114\043\115\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\074\154\075\040\076\041\077\037" +
    "\100\027\101\021\102\024\103\022\104\035\105\045\106" +
    "\033\107\032\110\042\111\025\112\036\113\034\114\043" +
    "\115\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\165\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\165\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\165\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\165\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\165\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\165\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\165\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\165\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\165\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\165\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\165\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\165\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\165\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\165" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\165\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\165\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\165\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\072\012\252" +
    "\013\232\014\212\015\247\016\173\017\242\020\266\021" +
    "\160\022\267\023\216\024\220\025\007\037\u012c\052\246" +
    "\053\166\054\302\055\165\056\241\057\162\060\211\061" +
    "\167\062\215\063\227\064\277\065\250\070\u012d\071\270" +
    "\170\260\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\072\012\252\013" +
    "\232\014\212\015\247\016\173\017\242\020\266\021\160" +
    "\022\267\023\216\024\220\025\007\035\u0121\052\246\053" +
    "\166\054\302\055\165\056\241\057\162\060\211\061\167" +
    "\062\215\063\227\064\277\065\250\070\u0123\071\270\170" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\072\012\252\013\232\014\212\015\247\016" +
    "\173\017\242\020\266\021\160\022\267\023\216\024\220" +
    "\025\007\043\u011a\052\246\053\166\054\302\055\165\056" +
    "\241\057\162\060\211\061\167\062\215\063\227\064\277" +
    "\065\250\070\u011c\071\270\170\260\001\001\000\002\001" +
    "\001\000\072\012\252\013\232\014\212\015\247\016\173" +
    "\017\242\020\266\021\160\022\267\023\216\024\220\025" +
    "\007\044\u0113\052\246\053\166\054\302\055\165\056\241" +
    "\057\162\060\211\061\167\062\215\063\227\064\277\065" +
    "\250\070\u0115\071\270\170\260\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\072\012\252\013\232\014" +
    "\212\015\247\016\173\017\242\020\266\021\160\022\267" +
    "\023\216\024\220\025\007\034\u010e\052\246\053\166\054" +
    "\302\055\165\056\241\057\162\060\211\061\167\062\215" +
    "\063\227\064\277\065\250\070\u010d\071\270\170\260\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\072\012\252\013\232\014\212\015\247" +
    "\016\173\017\242\020\266\021\160\022\267\023\216\024" +
    "\220\025\007\040\u0106\052\246\053\166\054\302\055\165" +
    "\056\241\057\162\060\211\061\167\062\215\063\227\064" +
    "\277\065\250\070\u0107\071\270\170\260\001\001\000\070" +
    "\012\252\013\232\014\212\015\247\016\173\017\242\020" +
    "\266\021\160\022\267\023\216\024\220\025\007\030\u0104" +
    "\052\246\053\166\054\302\055\165\056\241\057\162\060" +
    "\211\061\167\062\215\063\227\064\277\065\250\071\313" +
    "\170\260\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\072\012\252\013\232\014\212\015\247" +
    "\016\173\017\242\020\266\021\160\022\267\023\216\024" +
    "\220\025\007\036\377\052\246\053\166\054\302\055\165" +
    "\056\241\057\162\060\211\061\167\062\215\063\227\064" +
    "\277\065\250\070\376\071\270\170\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\072\012\252\013\232\014" +
    "\212\015\247\016\173\017\242\020\266\021\160\022\267" +
    "\023\216\024\220\025\007\033\367\052\246\053\166\054" +
    "\302\055\165\056\241\057\162\060\211\061\167\062\215" +
    "\063\227\064\277\065\250\070\370\071\270\170\260\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\072\012\252\013\232\014" +
    "\212\015\247\016\173\017\242\020\266\021\160\022\267" +
    "\023\216\024\220\025\007\041\361\052\246\053\166\054" +
    "\302\055\165\056\241\057\162\060\211\061\167\062\215" +
    "\063\227\064\277\065\250\070\360\071\270\170\260\001" +
    "\001\000\072\012\252\013\232\014\212\015\247\016\173" +
    "\017\242\020\266\021\160\022\267\023\216\024\220\025" +
    "\007\042\307\052\246\053\166\054\302\055\165\056\241" +
    "\057\162\060\211\061\167\062\215\063\227\064\277\065" +
    "\250\070\311\071\270\170\260\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\070\012\252\013\232\014\212\015\247\016\173\017\242" +
    "\020\266\021\160\022\267\023\216\024\220\025\007\042" +
    "\312\052\246\053\166\054\302\055\165\056\241\057\162" +
    "\060\211\061\167\062\215\063\227\064\277\065\250\071" +
    "\313\170\260\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\072\355\073\026\074\023\075\040\076\041\077" +
    "\037\100\027\101\021\102\024\103\022\104\035\105\045" +
    "\106\033\107\032\110\042\111\025\112\036\113\034\114" +
    "\043\115\044\001\001\000\052\072\353\073\026\074\023" +
    "\075\040\076\041\077\037\100\027\101\021\102\024\103" +
    "\022\104\035\105\045\106\033\107\032\110\042\111\025" +
    "\112\036\113\034\114\043\115\044\001\001\000\002\001" +
    "\001\000\052\072\347\073\026\074\023\075\040\076\041" +
    "\077\037\100\027\101\021\102\024\103\022\104\035\105" +
    "\045\106\033\107\032\110\042\111\025\112\036\113\034" +
    "\114\043\115\044\001\001\000\052\072\345\073\026\074" +
    "\023\075\040\076\041\077\037\100\027\101\021\102\024" +
    "\103\022\104\035\105\045\106\033\107\032\110\042\111" +
    "\025\112\036\113\034\114\043\115\044\001\001\000\052" +
    "\072\342\073\026\074\023\075\040\076\041\077\037\100" +
    "\027\101\021\102\024\103\022\104\035\105\045\106\033" +
    "\107\032\110\042\111\025\112\036\113\034\114\043\115" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\072\336\073\026\074\023\075\040\076\041\077\037\100" +
    "\027\101\021\102\024\103\022\104\035\105\045\106\033" +
    "\107\032\110\042\111\025\112\036\113\034\114\043\115" +
    "\044\001\001\000\052\072\334\073\026\074\023\075\040" +
    "\076\041\077\037\100\027\101\021\102\024\103\022\104" +
    "\035\105\045\106\033\107\032\110\042\111\025\112\036" +
    "\113\034\114\043\115\044\001\001\000\052\072\332\073" +
    "\026\074\023\075\040\076\041\077\037\100\027\101\021" +
    "\102\024\103\022\104\035\105\045\106\033\107\032\110" +
    "\042\111\025\112\036\113\034\114\043\115\044\001\001" +
    "\000\052\072\330\073\026\074\023\075\040\076\041\077" +
    "\037\100\027\101\021\102\024\103\022\104\035\105\045" +
    "\106\033\107\032\110\042\111\025\112\036\113\034\114" +
    "\043\115\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\070\012" +
    "\252\013\232\014\212\015\247\016\173\017\242\020\266" +
    "\021\160\022\267\023\216\024\220\025\007\041\362\052" +
    "\246\053\166\054\302\055\165\056\241\057\162\060\211" +
    "\061\167\062\215\063\227\064\277\065\250\071\313\170" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\070\012\252\013\232\014\212" +
    "\015\247\016\173\017\242\020\266\021\160\022\267\023" +
    "\216\024\220\025\007\033\371\052\246\053\166\054\302" +
    "\055\165\056\241\057\162\060\211\061\167\062\215\063" +
    "\227\064\277\065\250\071\313\170\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\070\012\252\013\232\014\212" +
    "\015\247\016\173\017\242\020\266\021\160\022\267\023" +
    "\216\024\220\025\007\036\u0100\052\246\053\166\054\302" +
    "\055\165\056\241\057\162\060\211\061\167\062\215\063" +
    "\227\064\277\065\250\071\313\170\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\070\012\252\013\232\014\212\015" +
    "\247\016\173\017\242\020\266\021\160\022\267\023\216" +
    "\024\220\025\007\040\u0108\052\246\053\166\054\302\055" +
    "\165\056\241\057\162\060\211\061\167\062\215\063\227" +
    "\064\277\065\250\071\313\170\260\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\070\012\252\013\232\014\212\015" +
    "\247\016\173\017\242\020\266\021\160\022\267\023\216" +
    "\024\220\025\007\034\u010f\052\246\053\166\054\302\055" +
    "\165\056\241\057\162\060\211\061\167\062\215\063\227" +
    "\064\277\065\250\071\313\170\260\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\070\012\252\013\232\014\212\015\247\016\173\017\242" +
    "\020\266\021\160\022\267\023\216\024\220\025\007\044" +
    "\u0116\052\246\053\166\054\302\055\165\056\241\057\162" +
    "\060\211\061\167\062\215\063\227\064\277\065\250\071" +
    "\313\170\260\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\012\252\013\232\014\212\015\247" +
    "\016\173\017\242\020\266\021\160\022\267\023\216\024" +
    "\220\025\007\043\u011d\052\246\053\166\054\302\055\165" +
    "\056\241\057\162\060\211\061\167\062\215\063\227\064" +
    "\277\065\250\071\313\170\260\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\070\012\252\013\232" +
    "\014\212\015\247\016\173\017\242\020\266\021\160\022" +
    "\267\023\216\024\220\025\007\035\u0124\052\246\053\166" +
    "\054\302\055\165\056\241\057\162\060\211\061\167\062" +
    "\215\063\227\064\277\065\250\071\313\170\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\070\012" +
    "\252\013\232\014\212\015\247\016\173\017\242\020\266" +
    "\021\160\022\267\023\216\024\220\025\007\037\u012e\052" +
    "\246\053\166\054\302\055\165\056\241\057\162\060\211" +
    "\061\167\062\215\063\227\064\277\065\250\071\313\170" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\u01ef\001\001\000\004\127\u01ed\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\130\u0139\001" +
    "\001\000\002\001\001\000\030\117\u0145\122\u0150\125\u014e" +
    "\126\u014a\136\u014f\137\u0148\140\u0147\141\u0143\145\u014d\151" +
    "\u0151\153\u013c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\117\u0145\122\u0150\125\u014e" +
    "\126\u014a\140\u01ca\141\u0143\145\u014d\151\u0151\153\u013c\001" +
    "\001\000\002\001\001\000\012\116\u01c1\117\u01be\123\u01c0" +
    "\124\u01c2\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\117\u0156\152\u0157\001\001\000\004\117\u01b5" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\117\u0167\142\u016d\154\u0166" +
    "\155\u0162\156\u0164\157\u015d\160\u016b\161\u016a\162\u0172\163" +
    "\u0161\164\u0168\165\u0173\166\u015f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\117\u0167\142\u016d\154\u01a5\155\u0162\156" +
    "\u0164\157\u015d\160\u016b\161\u016a\162\u0172\163\u0161\164\u0168" +
    "\165\u0173\166\u015f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\117\u0167\142\u016d\163\u0182\164\u0168\165" +
    "\u0173\166\u015f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\117\u0167\142\u016d\154\u0177\155\u0162\156\u0164\157\u015d" +
    "\160\u016b\161\u016a\162\u0172\163\u0161\164\u0168\165\u0173\166" +
    "\u015f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\117\u0167\142\u016d\163" +
    "\u017e\164\u0168\165\u0173\166\u015f\001\001\000\016\117\u0167" +
    "\142\u016d\163\u017d\164\u0168\165\u0173\166\u015f\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\117\u0167\142\u016d" +
    "\154\u0180\155\u0162\156\u0164\157\u015d\160\u016b\161\u016a\162" +
    "\u0172\163\u0161\164\u0168\165\u0173\166\u015f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\117\u0167\142\u016d\161\u0186" +
    "\162\u0172\163\u0161\164\u0168\165\u0173\166\u015f\001\001\000" +
    "\002\001\001\000\020\117\u0167\142\u016d\162\u018a\163\u0161" +
    "\164\u0168\165\u0173\166\u015f\001\001\000\020\117\u0167\142" +
    "\u016d\162\u0189\163\u0161\164\u0168\165\u0173\166\u015f\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\117\u0145\122" +
    "\u0193\125\u0192\126\u014a\131\u0191\133\u018d\134\u0190\135\u018f" +
    "\141\u018e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\117\u0145\122\u0150\125\u014e\126\u014a\136\u0196\137\u0148\140" +
    "\u0147\141\u0143\145\u014d\151\u0151\153\u013c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\132\u0198\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\117\u0167" +
    "\142\u016d\154\u019f\155\u0162\156\u0164\157\u015d\160\u016b\161" +
    "\u016a\162\u0172\163\u0161\164\u0168\165\u0173\166\u015f\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\117\u0167\142" +
    "\u016d\157\u01a2\160\u016b\161\u016a\162\u0172\163\u0161\164\u0168" +
    "\165\u0173\166\u015f\001\001\000\002\001\001\000\024\117" +
    "\u0167\142\u016d\160\u01a4\161\u016a\162\u0172\163\u0161\164\u0168" +
    "\165\u0173\166\u015f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\117\u01a8\143\u01ab\167\u01a9" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\117\u0167" +
    "\142\u016d\154\u01ae\155\u0162\156\u0164\157\u015d\160\u016b\161" +
    "\u016a\162\u0172\163\u0161\164\u0168\165\u0173\166\u015f\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\117\u0167\142" +
    "\u016d\154\u01b1\155\u0162\156\u0164\157\u015d\160\u016b\161\u016a" +
    "\162\u0172\163\u0161\164\u0168\165\u0173\166\u015f\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\117\u0167\142\u016d" +
    "\154\u01b4\155\u0162\156\u0164\157\u015d\160\u016b\161\u016a\162" +
    "\u0172\163\u0161\164\u0168\165\u0173\166\u015f\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\117\u0167\142\u016d\154" +
    "\u01b7\155\u0162\156\u0164\157\u015d\160\u016b\161\u016a\162\u0172" +
    "\163\u0161\164\u0168\165\u0173\166\u015f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\117\u0167\142\u016d\154\u01bc\155\u0162\156\u0164\157" +
    "\u015d\160\u016b\161\u016a\162\u0172\163\u0161\164\u0168\165\u0173" +
    "\166\u015f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\116\u01c1\117\u01be\123\u01c7\124\u01c2" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\117\u01c6\001\001\000\034\117\u0167\142\u016d" +
    "\154\u01c5\155\u0162\156\u0164\157\u015d\160\u016b\161\u016a\162" +
    "\u0172\163\u0161\164\u0168\165\u0173\166\u015f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\117\u01a8" +
    "\143\u01cd\144\u01cc\167\u01a9\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\117\u01a8\143\u01d0\167\u01a9\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\117\u0167\142" +
    "\u016d\154\u01d2\155\u0162\156\u0164\157\u015d\160\u016b\161\u016a" +
    "\162\u0172\163\u0161\164\u0168\165\u0173\166\u015f\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\117\u0167\142\u016d" +
    "\154\u01d5\155\u0162\156\u0164\157\u015d\160\u016b\161\u016a\162" +
    "\u0172\163\u0161\164\u0168\165\u0173\166\u015f\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\117\u0145\122\u0193\125" +
    "\u0192\126\u014a\131\u0191\133\u01d8\134\u0190\135\u018f\141\u018e" +
    "\001\001\000\010\146\u01d9\147\u01db\150\u01dc\001\001\000" +
    "\002\001\001\000\024\117\u0145\122\u0193\125\u0192\126\u014a" +
    "\131\u0191\133\u01e0\134\u0190\135\u018f\141\u018e\001\001\000" +
    "\006\146\u01dd\150\u01de\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\117\u0167\142\u016d\154\u01e2\155\u0162\156\u0164" +
    "\157\u015d\160\u016b\161\u016a\162\u0172\163\u0161\164\u0168\165" +
    "\u0173\166\u015f\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\117\u0145\122\u0193\125\u0192\126\u014a\131\u0191\133" +
    "\u01e5\134\u0190\135\u018f\141\u018e\001\001\000\002\001\001" +
    "\000\034\117\u0167\142\u016d\154\u01e7\155\u0162\156\u0164\157" +
    "\u015d\160\u016b\161\u016a\162\u0172\163\u0161\164\u0168\165\u0173" +
    "\166\u015f\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\117\u0145\122\u0193\125\u0192\126\u014a\131\u0191\133\u01ea" +
    "\134\u0190\135\u018f\141\u018e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\130\u01f5" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\u0222\001\001\000\002\001\001\000\006" +
    "\007\010\047\u021e\001\001\000\016\010\u01fd\011\u0200\027" +
    "\u01ff\050\u0202\051\u01fe\066\u0201\001\001\000\002\001\001" +
    "\000\006\170\u0217\171\u0216\001\001\000\006\010\u01fd\050" +
    "\u0213\001\001\000\002\001\001\000\004\032\u020e\001\001" +
    "\000\004\027\u0209\001\001\000\006\011\u0200\051\u0204\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\072\u0206" +
    "\073\026\074\023\075\040\076\041\077\037\100\027\101" +
    "\021\102\024\103\022\104\035\105\045\106\033\107\032" +
    "\110\042\111\025\112\036\113\034\114\043\115\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\u021a\170\u0219\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CCParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CCParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CCParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public Label label = new Label();
    public Program program = new Program(new Location(0,0), new ArrayList<>());

    boolean hasHref, hasBackground, hasColor, hasFontSize, hasFontFamily, hasTextAlign, hasType, hasId, hasName, hasCols, hasRows, hasClass, hasSrc, hasWidth, hasHeight, hasAlt, hasOnclick;

    public void resetBooleans(){
        hasHref = false;
        hasBackground = false;
        hasColor = false;
        hasFontSize = false;
        hasFontFamily = false;
        hasTextAlign = false;
        hasType = false;
        hasId = false;
        hasName = false;
        hasCols = false;
        hasRows = false;
        hasClass = false;
        hasSrc = false;
        hasWidth = false;
        hasHeight = false;
        hasAlt = false;
        hasOnclick = false;
    }
    public boolean validateCC(){
        boolean possibleCondition = hasId || hasName;
        boolean other = !(hasHref || hasBackground || hasColor || hasFontSize || hasFontFamily ||
                hasTextAlign || hasType || hasCols || hasRows ||
                hasClass || hasSrc || hasWidth || hasHeight || hasAlt || hasOnclick);

        return (possibleCondition && other) || allFalse();
    }
    public void errorsCC(ArrayList<Parameter> parameters){
      for(Parameter p: parameters){
        if(p.getType() != Parameter.ID && p.getType() != Parameter.NAME){
          addPError(p.getTypeStr(), p.getLoc());
        }
      }
    }
    public boolean validateBody(){
      boolean possibleCondition = hasBackground;
      boolean other = !(hasHref || hasColor || hasFontSize || hasFontFamily ||
              hasTextAlign || hasType || hasId || hasName || hasCols || hasRows ||
              hasClass || hasSrc || hasWidth || hasHeight || hasAlt || hasOnclick);

      return (possibleCondition && other) || allFalse();
    }
    public void errorsBody(ArrayList<Parameter> parameters){
      for(Parameter p: parameters){
        if(p.getType() != Parameter.BACKGROUND){
          addPError(p.getTypeStr(), p.getLoc());
        }
      }
    }
    public boolean validateLink(){
      boolean possibleCondition = hasHref;
      boolean other = !(hasBackground || hasColor || hasFontSize || hasFontFamily ||
              hasTextAlign || hasType || hasId || hasName || hasCols || hasRows ||
              hasClass || hasSrc || hasWidth || hasHeight || hasAlt || hasOnclick);

      return (possibleCondition && other) || allFalse();
    }
    public void errorsLink(ArrayList<Parameter> parameters){
      for(Parameter p: parameters){
        if(p.getType() != Parameter.HREF){
          addPError(p.getTypeStr(), p.getLoc());
        }
      }
    }
    public boolean validateSpanSelectH1P(){
      boolean possibleCondition = hasColor || hasFontFamily || hasFontSize || hasTextAlign || hasId;
      boolean other = !(hasHref || hasBackground ||
              hasType || hasName || hasCols || hasRows ||
              hasClass || hasSrc || hasWidth || hasHeight || hasAlt || hasOnclick);

      return (possibleCondition && other) || allFalse();
    }
    public void errorsSpanSelectH1P(ArrayList<Parameter> parameters){
      for(Parameter p: parameters){
        switch (p.getType()){
          case Parameter.COLOR, Parameter.FONT_FAMILY, Parameter.FONT_SIZE, Parameter.TEXT_ALIGN, Parameter.ID -> {}
          default -> { addPError(p.getTypeStr(), p.getLoc());}
        }
      }
    }
    public boolean validateInput(){
      boolean possibleCondition = hasColor || hasFontFamily || hasFontSize || hasTextAlign || hasId || hasType;
      boolean other = !(hasHref || hasBackground ||
              hasName || hasCols || hasRows ||
              hasClass || hasSrc || hasWidth || hasHeight || hasAlt || hasOnclick);

      return (possibleCondition && other) || allFalse();
    }
    public void errorsInput(ArrayList<Parameter> parameters){
      for(Parameter p: parameters){
        switch (p.getType()){
          case Parameter.COLOR, Parameter.FONT_FAMILY, Parameter.FONT_SIZE, Parameter.TEXT_ALIGN, Parameter.ID, Parameter.TYPE -> {}
          default -> { addPError(p.getTypeStr(), p.getLoc());}
        }
      }
    }
    public boolean validateTextArea(){
      boolean possibleCondition = hasFontFamily || hasFontSize || hasTextAlign || hasId || hasCols || hasRows;
      boolean other = !(hasHref || hasBackground || hasColor ||
              hasType || hasName ||
              hasClass || hasSrc || hasWidth || hasHeight || hasAlt || hasOnclick);

      return (possibleCondition && other) || allFalse();
    }
    public void errorsTextArea(ArrayList<Parameter> parameters){
      for(Parameter p: parameters){
        switch (p.getType()){
          case Parameter.FONT_FAMILY, Parameter.FONT_SIZE, Parameter.TEXT_ALIGN, Parameter.ID, Parameter.COLS, Parameter.ROWS -> {}
          default -> { addPError(p.getTypeStr(), p.getLoc());}
        }
      }
    }
    public boolean validateDiv(){
      boolean possibleCondition = hasBackground || hasFontFamily || hasFontSize || hasTextAlign || hasId || hasClass || hasColor;
      boolean other = !(hasHref ||
              hasType || hasName || hasCols || hasRows ||
              hasSrc || hasWidth || hasHeight || hasAlt || hasOnclick);

      return (possibleCondition && other) || allFalse();
    }
    public void errorsDiv(ArrayList<Parameter> parameters){
      for(Parameter p: parameters){
        switch (p.getType()){
          case Parameter.BACKGROUND, Parameter.FONT_FAMILY, Parameter.FONT_SIZE, Parameter.TEXT_ALIGN, Parameter.ID, Parameter.CLASS, Parameter.COLOR -> {}
          default -> { addPError(p.getTypeStr(), p.getLoc());}
        }
      }
    }
    public boolean validateImg(){
      boolean possibleCondition = hasSrc || hasWidth || hasHeight || hasAlt || hasId;
      boolean other = !(hasHref || hasBackground || hasColor || hasFontSize || hasFontFamily ||
              hasTextAlign || hasType || hasName || hasCols || hasRows ||
              hasClass || hasOnclick);

      return (possibleCondition && other) || allFalse();
    }
    public void errorsImg(ArrayList<Parameter> parameters){
      for(Parameter p: parameters){
        switch (p.getType()){
          case Parameter.SRC, Parameter.WIDTH, Parameter.HEIGHT, Parameter.ALT, Parameter.ID -> {}
          default -> { addPError(p.getTypeStr(), p.getLoc());}
        }
      }
    }
    public boolean validateButton(){
      boolean possibleCondition = hasFontSize || hasFontFamily || hasTextAlign || hasId || hasColor || hasBackground || hasOnclick;
      boolean other = !(hasHref ||
              hasType || hasName || hasCols || hasRows ||
              hasClass || hasSrc || hasWidth || hasHeight || hasAlt);

      return (possibleCondition && other) || allFalse();
    }
    public void errorsButton(ArrayList<Parameter> parameters){
      for(Parameter p: parameters){
        switch (p.getType()){
          case Parameter.COLOR, Parameter.FONT_FAMILY, Parameter.FONT_SIZE, Parameter.TEXT_ALIGN, Parameter.ID, Parameter.BACKGROUND, Parameter.ONCLICK -> {}
          default -> { addPError(p.getTypeStr(), p.getLoc());}
        }
      }
    }
    private boolean allFalse(){
        return !(hasHref || hasBackground || hasColor || hasFontSize || hasFontFamily ||
                hasTextAlign || hasType || hasId || hasName || hasCols || hasRows ||
              hasClass || hasSrc || hasWidth || hasHeight || hasAlt || hasOnclick);
    }
    public CCParser(CCLexer lex) {
        super(lex);
        //resetBooleans();
    }
    public List<String> ids = new ArrayList<>();
    //Metodo al que se llama ante algun error sintactico
    public void syntax_error(Symbol s){
        String lexeme = "";
        if(s.value != null) lexeme = s.value.toString();
        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTÁCTICO RECUPERADO");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        HashMap<String, String> symbolNames = Validate.getSymbolNames();
        List<Integer> tokens = expected_token_ids();
        String des = "Se esperaba: ";
        for(Integer i : tokens) {
            String fromId = symbl_name_from_id(i);
            String symbolName = symbolNames.get(fromId);
            if(symbolName != null){
                des += "'"+symbolName+ "' o ";
            }
            else{
                if(!fromId.equals("error") && !fromId.equals("EOF")){
                    des += fromId +" o ";
                }
            }
        }
        if(des.length() > 3) des = des.substring(0, des.length() - 3);
        addError(lexeme, line, col, des);
    }

    //Metodo que se llama en el momento en que ya no es posible una recuperacion
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexeme = "";
        if(s.value != null) lexeme = s.value.toString();
        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTACTICO NO RECUPERABLE");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        HashMap<String, String> symbolNames = Validate.getSymbolNames();
        List<Integer> tokens = expected_token_ids();
        String des = "Se esperaba: ";
        for(Integer i : tokens) {
            String fromId = symbl_name_from_id(i);
            String symbolName = symbolNames.get(fromId);
            if(symbolName != null){
                des += "'"+symbolName+ "' o ";
            }
            else{
                if(!fromId.equals("error") && !fromId.equals("EOF")){
                    des += fromId +" o ";
                }
            }
        }
        if(des.length() > 3) des = des.substring(0, des.length() - 3);
        addError(lexeme, line, col, des);
    }
    private static final String ID_PATTERN = "^[\\w$-][\\w\\d$-]*$";
    private void addId(String id, Location loc) {
            if (!id.matches(ID_PATTERN)) {
                ErrorsLP.addError(id, loc.line, loc.col, "Error Sintáctico", "El id no cumple con el formato requerido");
                return;
            }
            if (ids.contains(id)) ErrorsLP.addError(id, loc.line, loc.col, "Error Sintáctico", "El id de la etiqueta está repetido");
            else ids.add(id);

        }

    private void addError(String lexeme, int line, int col, String description){
        ErrorsLP.addError(lexeme, line, col, "Error Sintáctico", description);
    }

    private void addParameterError(String type, int line, int col){
        ErrorsLP.addError(type, line, col, "Semántico", "Parametro " + type + " duplicado");
    }
    private void addPError(String type, Location loc){
        ErrorsLP.addError(type, loc.line, loc.col, "Semántico", "Parametro " + type + " no esperado");
    }
    protected int error_sync_size() {
            return 1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CCParser$actions {
  private final CCParser parser;

  /** Constructor */
  CUP$CCParser$actions(CCParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CCParser$do_action_part00000000(
    int                        CUP$CCParser$act_num,
    java_cup.runtime.lr_parser CUP$CCParser$parser,
    java.util.Stack            CUP$CCParser$stack,
    int                        CUP$CCParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CCParser$result;

      /* select the action based on the action number */
      switch (CUP$CCParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		RESULT = start_val;
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CCParser$parser.done_parsing();
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= s_otp 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label c = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
    label = c;
    
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= c_body 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
    label = (Label) l;
    
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // s_otp ::= cc 
            {
              Label RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label cc = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = cc; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("s_otp",1, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s_otp ::= c_scripting 
            {
              Label RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("s_otp",1, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // s_otp ::= s_otp cc 
            {
              Label RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("s_otp",1, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // open_cc ::= LT C_CC parameters_opt GT 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 if(!validateCC()) errorsCC(p);
resetBooleans(); RESULT = p; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_cc",3, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // open_head ::= LT C_HEAD GT 
            {
              ArrayList<Parameter> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_head",4, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // open_body ::= LT C_BODY parameters_opt GT 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 if(!validateBody()) errorsBody(p);
resetBooleans(); RESULT = p; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_body",5, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // open_title ::= LT C_TITLE GT 
            {
              ArrayList<Parameter> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_title",6, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // open_link ::= LT C_LINK parameters_opt GT 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 if(!validateLink()) errorsLink(p);
resetBooleans(); RESULT = p; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_link",7, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // open_spam ::= LT C_SPAM parameters_opt GT 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 if(!validateSpanSelectH1P()) errorsSpanSelectH1P(p);
resetBooleans(); RESULT = p; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_spam",8, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // open_input ::= LT C_INPUT parameters_opt GT 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 if(!validateInput()) errorsInput(p);
resetBooleans(); RESULT = p; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_input",9, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // open_textarea ::= LT C_TEXTAREA parameters_opt C_CC GT 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		 if(!validateTextArea()) errorsTextArea(p);
resetBooleans(); RESULT = p; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_textarea",10, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // open_select ::= LT C_SELECT parameters_opt GT 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 if(!validateSpanSelectH1P()) errorsSpanSelectH1P(p);
resetBooleans(); RESULT = p; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_select",11, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // open_option ::= LT C_OPTION GT 
            {
              ArrayList<Parameter> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_option",12, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // open_div ::= LT C_DIV parameters_opt GT 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 if(!validateDiv()) errorsDiv(p);
resetBooleans(); RESULT = p; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_div",13, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // open_img ::= LT C_IMG parameters_opt GT 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 if(!validateImg()) errorsImg(p);
resetBooleans(); RESULT = p; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_img",14, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // open_br ::= LT C_BR GT 
            {
              ArrayList<Parameter> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_br",15, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // open_button ::= LT C_BUTTON parameters_opt GT 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 if(!validateButton()) errorsButton(p);
resetBooleans(); RESULT = p; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_button",16, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // open_h1 ::= LT C_H1 parameters_opt GT 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 if(!validateSpanSelectH1P()) errorsSpanSelectH1P(p);
resetBooleans(); RESULT = p; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_h1",17, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // open_p ::= LT C_P parameters_opt GT 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 if(!validateSpanSelectH1P()) errorsSpanSelectH1P(p);
resetBooleans(); RESULT = p; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_p",18, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // open_scripting ::= LT C_SCRIPTING GT 
            {
              ArrayList<Parameter> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_scripting",19, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // close_cc ::= LT SLASH C_CC GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_cc",20, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // close_head ::= LT SLASH C_HEAD GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_head",21, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // close_body ::= LT SLASH C_BODY GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_body",22, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // close_title ::= LT SLASH C_TITLE GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_title",23, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // close_link ::= LT SLASH C_LINK GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_link",24, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // close_spam ::= LT SLASH C_SPAM GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_spam",25, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // close_input ::= LT SLASH C_INPUT GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_input",26, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // close_textarea ::= LT SLASH C_TEXTAREA GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_textarea",27, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // close_select ::= LT SLASH C_SELECT GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_select",28, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // close_option ::= LT SLASH C_OPTION GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_option",29, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // close_div ::= LT SLASH C_DIV GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_div",30, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // close_img ::= LT SLASH C_IMG GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_img",31, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // close_button ::= LT SLASH C_BUTTON GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_button",32, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // close_h1 ::= LT SLASH C_H1 GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_h1",33, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // close_p ::= LT SLASH C_P GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_p",34, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // close_scripting ::= LT SLASH C_SCRIPTING GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_scripting",35, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cc ::= open_cc c_cc_body close_cc 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Object> l = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.HTML, p, l);
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("cc",2, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cc ::= error 
            {
              Label RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("cc",2, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // c_cc_body ::= c_head c_body 
            {
              ArrayList<Object> RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		Label h = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label b = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            var labels = new ArrayList<Object>();
            labels.add(h);
            labels.add(b);
            RESULT = labels;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_cc_body",53, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // c_head ::= open_head head_labels close_head 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Object> l = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
            RESULT = new Label(pleft, pright, Label.HEAD, l);
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_head",36, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // c_head ::= open_head close_head 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
            RESULT = new Label(pleft, pright, Label.HEAD);
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_head",36, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // c_title ::= open_title string_text close_title 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
            var text = new ArrayList<Object>();
            text.add(t);
            RESULT = new Label(pleft, pright, Label.TITLE, text);
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_title",38, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // c_link ::= open_link close_link 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
            RESULT = new Label(pleft, pright, Label.LINK, p, new ArrayList<>());
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_link",39, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // head_labels ::= c_title c_link 
            {
              ArrayList<Object> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                var labels = new ArrayList<Object>();
                labels.add(t);
                labels.add(l);
                RESULT = labels;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("head_labels",52, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // head_labels ::= c_link c_title 
            {
              ArrayList<Object> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                var labels = new ArrayList<Object>();
                labels.add(l);
                labels.add(t);
                RESULT = labels;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("head_labels",52, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // c_body ::= open_body body_labels close_body 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Object> l = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.BODY, l);
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_body",37, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // c_body ::= open_body close_body 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.BODY);
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_body",37, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // c_spam ::= open_spam body_labels close_spam 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Object> l = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.SPAN, p, l);
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_spam",40, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // c_spam ::= open_spam close_spam 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.SPAN, p, new ArrayList<>());
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_spam",40, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // c_input ::= open_input body_labels close_input 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Object> l = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.INPUT, p, l);
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_input",41, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // c_input ::= open_input close_input 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.INPUT, p, new ArrayList<>());
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_input",41, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // c_textarea ::= open_textarea body_labels close_textarea 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Object> l = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.TEXTAREA, p, l);
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_textarea",42, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // c_textarea ::= open_textarea close_textarea 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.TEXTAREA, p, new ArrayList<>());
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_textarea",42, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // c_select ::= open_select body_labels close_select 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Object> l = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.SELECT, p, l);
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_select",43, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // c_select ::= open_select close_select 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.SELECT, p, new ArrayList<>());
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_select",43, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // c_option ::= open_option body_labels close_option 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Object> l = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.OPTION, p, l);
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_option",44, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // c_option ::= open_option close_option 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.OPTION, p, new ArrayList<>());
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_option",44, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // c_div ::= open_div body_labels close_div 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Object> l = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.DIV, p, l);
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_div",45, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // c_div ::= open_div close_div 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.DIV, p, new ArrayList<>());
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_div",45, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // c_img ::= open_img body_labels close_img 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Object> l = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.IMG, p, l);
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_img",46, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // c_img ::= open_img close_img 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.IMG, p, new ArrayList<>());
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_img",46, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // c_br ::= open_br 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
        RESULT = new Label(pleft, pright, Label.BR);
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_br",47, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // c_button ::= open_button body_labels close_button 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Object> l = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.BUTTON, p, l);
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_button",48, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // c_button ::= open_button close_button 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.BUTTON, p, new ArrayList<>());
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_button",48, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // c_h1 ::= open_h1 body_labels close_h1 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Object> l = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.H1, p, l);
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_h1",49, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // c_h1 ::= open_h1 close_h1 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.H1, p, new ArrayList<>());
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_h1",49, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // c_p ::= open_p body_labels close_p 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Object> l = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.P, p, l);
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_p",50, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // c_p ::= open_p close_p 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.P, p, new ArrayList<>());
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_p",50, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // c_scripting ::= open_scripting global_stmt_opt close_scripting 
            {
              Label RESULT =null;
		
        //RESULT = new Label(pleft, pright, Label.SCRIPTING, p, l);
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_scripting",51, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // body_labels ::= body_label 
            {
              ArrayList<Object> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            var labels = new ArrayList<Object>();
            labels.add(l);
            RESULT = labels;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_labels",54, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // body_labels ::= body_labels body_label 
            {
              ArrayList<Object> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Object> ls = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            ls.add(l);
            RESULT = ls;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_labels",54, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // body_label ::= c_spam 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                RESULT = l;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_label",55, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // body_label ::= c_input 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                 RESULT = l;
                 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_label",55, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // body_label ::= c_textarea 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                RESULT = l;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_label",55, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // body_label ::= c_select 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                RESULT = l;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_label",55, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // body_label ::= c_option 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                RESULT = l;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_label",55, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // body_label ::= c_div 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                RESULT = l;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_label",55, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // body_label ::= c_img 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                RESULT = l;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_label",55, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // body_label ::= c_br 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                RESULT = l;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_label",55, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // body_label ::= c_button 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                RESULT = l;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_label",55, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // body_label ::= c_h1 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                RESULT = l;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_label",55, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // body_label ::= c_p 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                RESULT = l;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_label",55, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // body_label ::= c_scripting 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                RESULT = l;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_label",55, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // body_label ::= text 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                RESULT = t;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_label",55, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // body_label ::= error 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_label",55, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parameters_opt ::= 
            {
              ArrayList<Parameter> RESULT =null;
		
                RESULT = new ArrayList<>();
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameters_opt",56, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // parameters_opt ::= parameters 
            {
              ArrayList<Parameter> RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		ArrayList<Parameter> ps = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                RESULT = ps;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameters_opt",56, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parameters ::= parameter 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            var parameters = new ArrayList<Parameter>();
            parameters.add(p);
            RESULT = parameters;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameters",57, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parameters ::= parameters parameter 
            {
              ArrayList<Parameter> RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> ps = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            ps.add(p);
            RESULT = ps;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameters",57, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parameter ::= href 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            if(!hasHref) hasHref = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",58, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parameter ::= background 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            if(!hasBackground) hasBackground = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",58, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // parameter ::= color 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            if(!hasColor) hasColor = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",58, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // parameter ::= font_size 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            if(!hasFontSize) hasFontSize = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",58, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // parameter ::= font_family 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            if(!hasFontFamily) hasFontFamily = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",58, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parameter ::= text_align 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            if(!hasTextAlign) hasTextAlign = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",58, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parameter ::= type 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            if(!hasType) hasType = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",58, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parameter ::= id 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            if(!hasId) {
                addId(p.getValue(), p.getLoc());
                hasId = true;
            }
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",58, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parameter ::= name 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            if(!hasName) hasName = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",58, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // parameter ::= cols 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            if(!hasCols) hasCols = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",58, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // parameter ::= rows 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            if(!hasRows) hasRows = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",58, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // parameter ::= clase 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            if(!hasClass) hasClass = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",58, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parameter ::= src 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            if(!hasSrc) hasSrc = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",58, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parameter ::= width 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            if(!hasWidth) hasWidth = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",58, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // parameter ::= height 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            if(!hasHeight) hasHeight = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",58, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // parameter ::= alt 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            if(!hasAlt) hasAlt = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",58, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // parameter ::= onclick 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            if(!hasOnclick) hasOnclick = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",58, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // href ::= LBRACKET HREF EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 StaticVariables.variables.add("var url = '" + s + "'");
        RESULT = new Parameter(sleft, sright, Parameter.HREF, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("href",59, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // background ::= LBRACKET BACKGROUND EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.BACKGROUND, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("background",60, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // color ::= LBRACKET COLOR EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.COLOR, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("color",61, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // font_size ::= LBRACKET FONT_SIZE EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.FONT_SIZE, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("font_size",62, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // font_family ::= LBRACKET FONT_FAMILY EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.FONT_FAMILY, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("font_family",63, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // text_align ::= LBRACKET TEXT_ALIGN EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.TEXT_ALIGN, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text_align",64, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // type ::= LBRACKET TYPE EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.TYPE, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("type",65, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // id ::= LBRACKET ID EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.ID, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("id",66, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // name ::= LBRACKET NAME EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.NAME, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("name",67, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // cols ::= LBRACKET COLS EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.COLS, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("cols",68, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // rows ::= LBRACKET ROWS EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.ROWS, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("rows",69, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // clase ::= LBRACKET CLASS EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.CLASS, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("clase",70, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // src ::= LBRACKET SRC EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.SRC, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("src",71, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // width ::= LBRACKET WIDTH EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.WIDTH, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("width",72, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // height ::= LBRACKET HEIGHT EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.HEIGHT, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("height",73, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // alt ::= LBRACKET ALT EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.ALT, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("alt",74, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // onclick ::= LBRACKET ONCLICK EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.ONCLICK, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("onclick",75, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // global_stmt_opt ::= 
            {
              List<FunctionDeclaration> RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("global_stmt_opt",78, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // global_stmt_opt ::= global_stmt 
            {
              List<FunctionDeclaration> RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<FunctionDeclaration> g = (List<FunctionDeclaration>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                program.getBody().addAll(g);
                RESULT = g;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("global_stmt_opt",78, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // global_stmt ::= method_declarator 
            {
              List<FunctionDeclaration> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		FunctionDeclaration f = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(f)); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("global_stmt",79, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // global_stmt ::= global_stmt method_declarator 
            {
              List<FunctionDeclaration> RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		List<FunctionDeclaration> g = (List<FunctionDeclaration>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		FunctionDeclaration f = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                g.add(f);
                RESULT = g;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("global_stmt",79, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // variable_declarators ::= variable_type GLOBAL variable_declarator 
            {
              List<VariableDeclarator> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<VariableDeclarator> vs = (List<VariableDeclarator>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                        for(VariableDeclarator v: vs){
                            v.setType(t);
                            v.setGlobal(true);
                            //StaticVariables.variables.add("let "+v.getText());
                            v.setText("");
                        }
                        RESULT = vs;
                        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("variable_declarators",80, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // variable_declarators ::= variable_type variable_declarator 
            {
              List<VariableDeclarator> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<VariableDeclarator> vs = (List<VariableDeclarator>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                        for(VariableDeclarator v: vs){
                            v.setType(t);
                            v.setText("let "+v.getText());
                        }
                        RESULT = vs;
                        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("variable_declarators",80, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // variable_declarator ::= variable_id 
            {
              List<VariableDeclarator> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Identifier s = (Identifier)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(new VariableDeclarator(new Location(sleft, sright), s, null))); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("variable_declarator",81, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // variable_declarator ::= variable_assignment_declarator 
            {
              List<VariableDeclarator> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Assignment> s = (List<Assignment>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                    ArrayList<VariableDeclarator> v = new ArrayList<>();
                    for(Assignment a: s){
                        v.add(new VariableDeclarator(a.getLoc(), a.getId(), a.getExpression()));
                    }
                    RESULT = v;
                    
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("variable_declarator",81, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // listIds ::= variable_id 
            {
              List<Identifier> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(i)); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("listIds",76, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // listIds ::= listIds COMMA variable_id 
            {
              List<Identifier> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		List<Identifier> ids = (List<Identifier>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            ids.add(i);
            RESULT = ids;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("listIds",76, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // variable_id ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new Identifier(new Location(ileft, iright), i); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("variable_id",77, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // variable_assignment_declarator ::= listIds EQUAL expression 
            {
              List<Assignment> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		List<Identifier> i = (List<Identifier>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                               ArrayList<Assignment> as = new ArrayList<>();
                               for(Identifier id: i){
                                   as.add(new Assignment(id.getLoc(), id, e));
                               }
                               RESULT = as;
                               
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("variable_assignment_declarator",82, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // variable_assignment ::= variable_id EQUAL expression 
            {
              Assignment RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new Assignment(new Location(ileft, iright), i, e); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("variable_assignment",83, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // variable_type ::= INTEGER 
            {
              Type RESULT =null;
		RESULT = Type.INT;
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("variable_type",84, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // variable_type ::= STRING 
            {
              Type RESULT =null;
		RESULT = Type.STRING;
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("variable_type",84, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // variable_type ::= DECIMAL 
            {
              Type RESULT =null;
		RESULT = Type.DECIMAL;
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("variable_type",84, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // variable_type ::= CHAR 
            {
              Type RESULT =null;
		RESULT = Type.CHAR;
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("variable_type",84, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // variable_type ::= BOOLEAN 
            {
              Type RESULT =null;
		RESULT = Type.BOOLEAN;
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("variable_type",84, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // method_declarator ::= FUNCTION_ID LPAREN RPAREN method_block 
            {
              FunctionDeclaration RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new FunctionDeclaration(new Location(fleft, fright), f, new ArrayList<>(), Type.VOID, b); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("method_declarator",85, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // method_declarator ::= ON_LOAD LPAREN RPAREN method_block 
            {
              FunctionDeclaration RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new FunctionDeclaration(new Location(fleft, fright), f, new ArrayList<>(), Type.VOID, b); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("method_declarator",85, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // method_block ::= LBRACKET body_block_opt RBRACKET 
            {
              List<Node> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		RESULT = b; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("method_block",86, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // body_block_opt ::= 
            {
              List<Node> RESULT =null;
		RESULT = new ArrayList<>(); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_block_opt",92, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // body_block_opt ::= body_block 
            {
              List<Node> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = b; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_block_opt",92, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // body_block ::= body_stmt 
            {
              List<Node> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = b; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_block",93, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // body_block ::= body_block body_stmt 
            {
              List<Node> RESULT =null;
		int bbleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int bbright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		List<Node> bb = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                bb.addAll(b);
                RESULT = bb; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_block",93, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // body_stmt ::= variable_declarators SEMICOLON 
            {
              List<Node> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		List<VariableDeclarator> b = (List<VariableDeclarator>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
            b.forEach(v->{
              if(v.isGlobal()) v.setText("");
              else v.setText(v.getText()+";");
            });
            List<Node> c = new ArrayList<>();
            c.addAll(b);
            RESULT = c;  
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_stmt",94, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // body_stmt ::= variable_assignment SEMICOLON 
            {
              List<Node> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		Assignment b = (Assignment)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 b.setText(b.getText()+";");
            RESULT = new ArrayList<>(Arrays.asList(b)); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_stmt",94, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // body_stmt ::= function_call_stmt SEMICOLON 
            {
              List<Node> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		CallFunction b = (CallFunction)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 b.setText(b.getText()+";");
            RESULT = new ArrayList<>(Arrays.asList(b)); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_stmt",94, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // body_stmt ::= if_stmt 
            {
              List<Node> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		IfStmt b = (IfStmt)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(b)); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_stmt",94, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // body_stmt ::= for_stmt 
            {
              List<Node> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		ForStmt b = (ForStmt)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(b)); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_stmt",94, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // body_stmt ::= while_stmt 
            {
              List<Node> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		WhileStmt b = (WhileStmt)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(b)); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_stmt",94, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // body_stmt ::= error 
            {
              List<Node> RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_stmt",94, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // function_call_stmt ::= ALERT_INFO LPAREN expression RPAREN 
            {
              CallFunction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		RESULT = new CallFunction(new Location(fleft, fright), f, new ArrayList<>(Arrays.asList(p)));
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("function_call_stmt",95, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // function_call_stmt ::= EXIT LPAREN RPAREN 
            {
              CallFunction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		RESULT = new CallFunction(new Location(fleft, fright), f, new ArrayList<>());
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("function_call_stmt",95, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // function_call_stmt ::= REDIRECT LPAREN RPAREN 
            {
              CallFunction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		RESULT = new CallFunction(new Location(fleft, fright), f, new ArrayList<>());
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("function_call_stmt",95, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // function_call_stmt ::= INSERT LPAREN params RPAREN 
            {
              CallFunction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		List<Expr> p = (List<Expr>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		RESULT = new CallFunction(new Location(fleft, fright), f, p);
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("function_call_stmt",95, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // function_call_return ::= ASC LPAREN expression RPAREN 
            {
              CallFunction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		RESULT = new CallFunction(new Location(fleft, fright), f, new ArrayList<>(Arrays.asList(p)));
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("function_call_return",96, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // function_call_return ::= DESC LPAREN expression RPAREN 
            {
              CallFunction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		RESULT = new CallFunction(new Location(fleft, fright), f, new ArrayList<>(Arrays.asList(p)));
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("function_call_return",96, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // function_call_return ::= LETPAR_NUM LPAREN expression RPAREN 
            {
              CallFunction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		RESULT = new CallFunction(new Location(fleft, fright), f, new ArrayList<>(Arrays.asList(p)));
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("function_call_return",96, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // function_call_return ::= LETIMPAR_NUM LPAREN expression RPAREN 
            {
              CallFunction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		RESULT = new CallFunction(new Location(fleft, fright), f, new ArrayList<>(Arrays.asList(p)));
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("function_call_return",96, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // function_call_return ::= REVERSE LPAREN expression RPAREN 
            {
              CallFunction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		RESULT = new CallFunction(new Location(fleft, fright), f, new ArrayList<>(Arrays.asList(p)));
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("function_call_return",96, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // function_call_return ::= CARACTER_ALEATORIO LPAREN RPAREN 
            {
              CallFunction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		RESULT = new CallFunction(new Location(fleft, fright), f, new ArrayList<>());
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("function_call_return",96, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // function_call_return ::= NUM_ALEATORIO LPAREN RPAREN 
            {
              CallFunction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		RESULT = new CallFunction(new Location(fleft, fright), f, new ArrayList<>());
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("function_call_return",96, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // function_call_return ::= GET_ELEMENT_BY_ID LPAREN param RPAREN 
            {
              CallFunction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		List<Expr> p = (List<Expr>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
                        var xd = new CallFunction(new Location(fleft, fright), "document.getElementById", p);
                        xd.setText(xd.getText() + ".value");
                        RESULT = xd;
                        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("function_call_return",96, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // params ::= param 
            {
              List<Expr> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Expr> p = (List<Expr>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = p; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("params",98, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // params ::= params COMMA param 
            {
              List<Expr> RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		List<Expr> ps = (List<Expr>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Expr> p = (List<Expr>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
        ps.addAll(p);
        RESULT = ps;
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("params",98, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // param ::= variable_id 
            {
              List<Expr> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Identifier v = (Identifier)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(new UnaryExpression(new Location(vleft, vright), v.getText(), Type.STRING, null, v))); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("param",97, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // param ::= simple_string 
            {
              List<Expr> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(new UnaryExpression(new Location(vleft, vright), "'"+v+"'", Type.STRING, null, v))); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("param",97, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // init_block ::= INIT LBRACE COLON 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("init_block",87, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // end_block ::= COLON RBRACE END 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("end_block",88, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // block_opt ::= init_block body_block_opt end_block 
            {
              List<Node> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		RESULT = b; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("block_opt",91, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // block ::= block_opt 
            {
              List<Node> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = b; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("block",89, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // block ::= block_stmt 
            {
              List<Node> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = b; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("block",89, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // block_stmt ::= variable_declarators SEMICOLON 
            {
              List<Node> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		List<VariableDeclarator> v = (List<VariableDeclarator>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
            v.forEach(b->{
              if(b.isGlobal()) b.setText("");
              else b.setText(b.getText()+";");
            });
            List<Node> c = new ArrayList<>();
            c.addAll(v);
            RESULT = c; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("block_stmt",90, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // block_stmt ::= variable_assignment SEMICOLON 
            {
              List<Node> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		Assignment v = (Assignment)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 v.setText(v.getText()+";");
            RESULT = new ArrayList<>(Arrays.asList(v)); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("block_stmt",90, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // block_stmt ::= function_call_stmt SEMICOLON 
            {
              List<Node> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		CallFunction v = (CallFunction)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 v.setText(v.getText()+";");
            RESULT = new ArrayList<>(Arrays.asList(v)); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("block_stmt",90, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // if_stmt ::= IF LPAREN expression RPAREN THEN block 
            {
              IfStmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-5)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new IfStmt(new Location(rleft, rright), e, b, new ArrayList<>(), new ArrayList<>()); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("if_stmt",99, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-5)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // if_stmt ::= IF LPAREN expression RPAREN THEN block else_if_stmts 
            {
              IfStmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-6)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<IfStmt> elif = (List<IfStmt>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new IfStmt(new Location(rleft, rright), e, b, elif, new ArrayList<>()); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("if_stmt",99, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-6)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // if_stmt ::= IF LPAREN expression RPAREN THEN block else_stmt 
            {
              IfStmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-6)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Node> els = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new IfStmt(new Location(rleft, rright), e, b, new ArrayList<>(), els); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("if_stmt",99, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-6)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // if_stmt ::= IF LPAREN expression RPAREN THEN block else_if_stmts else_stmt 
            {
              IfStmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-7)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-5)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		List<IfStmt> elif = (List<IfStmt>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Node> els = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new IfStmt(new Location(rleft, rright), e, b, elif, els); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("if_stmt",99, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-7)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // else_if_stmts ::= else_if_stmt 
            {
              List<IfStmt> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		IfStmt b = (IfStmt)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(b)); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("else_if_stmts",101, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // else_if_stmts ::= else_if_stmts else_if_stmt 
            {
              List<IfStmt> RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		List<IfStmt> bs = (List<IfStmt>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		IfStmt b = (IfStmt)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                bs.add(b);
                RESULT = bs;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("else_if_stmts",101, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // else_if_stmt ::= ELSE IF LPAREN expression RPAREN THEN block 
            {
              IfStmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-6)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new IfStmt(new Location(rleft, rright), e, b); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("else_if_stmt",102, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-6)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // else_stmt ::= ELSE block 
            {
              List<Node> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = b; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("else_stmt",100, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // for_stmt ::= REPEAT LPAREN init_for RPAREN HUNTIL LPAREN expression RPAREN block 
            {
              ForStmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-8)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-8)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-6)).right;
		VariableDeclarator i = (VariableDeclarator)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new ForStmt(new Location(rleft, rright), b, i, e, "++"); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("for_stmt",103, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-8)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // init_for ::= INTEGER variable_id EQUAL expression 
            {
              VariableDeclarator RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new VariableDeclarator(new Location(ileft, iright), id, ex); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("init_for",104, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // init_for ::= variable_id EQUAL expression 
            {
              VariableDeclarator RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new VariableDeclarator(new Location(idleft, idright), id, ex); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("init_for",104, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // while_stmt ::= WHILE LPAREN expression RPAREN THENWHILE block 
            {
              WhileStmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-5)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new WhileStmt(new Location(wleft, wright), b, e);
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("while_stmt",105, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-5)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // expression ::= conditional_expression 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = v; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("expression",106, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // conditional_expression ::= conditional_or_expression 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = v; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("conditional_expression",107, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // conditional_or_expression ::= conditional_and_expression 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = v; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("conditional_or_expression",108, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // conditional_or_expression ::= conditional_or_expression OR conditional_and_expression 
            {
              Expr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		Expr v1 = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr v3 = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new BinaryExpression(new Location(v1left, v1right), Type.BOOLEAN, v1, v2, v3); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("conditional_or_expression",108, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // conditional_and_expression ::= relational_expression 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = v; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("conditional_and_expression",109, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // conditional_and_expression ::= conditional_and_expression AND relational_expression 
            {
              Expr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		Expr v1 = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr v3 = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new BinaryExpression(new Location(v1left, v1right), Type.BOOLEAN, v1, v2, v3); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("conditional_and_expression",109, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // relational_expression ::= additive_expression 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = v; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("relational_expression",110, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // relational_expression ::= relational_expression REL_OP additive_expression 
            {
              Expr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		Expr v1 = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr v3 = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new BinaryExpression(new Location(v1left, v1right), Type.BOOLEAN, v1, v2, v3); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("relational_expression",110, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // additive_expression ::= multiplicative_expression 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = v; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("additive_expression",111, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // additive_expression ::= additive_expression PLUS multiplicative_expression 
            {
              Expr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		Expr v1 = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr v3 = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new BinaryExpression(new Location(v1left, v1right), null, v1, v2, v3); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("additive_expression",111, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // additive_expression ::= additive_expression MINUS multiplicative_expression 
            {
              Expr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		Expr v1 = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr v3 = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new BinaryExpression(new Location(v1left, v1right), null, v1, v2, v3); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("additive_expression",111, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // multiplicative_expression ::= unary_expression 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = v; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",112, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // multiplicative_expression ::= multiplicative_expression TIMES unary_expression 
            {
              Expr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		Expr v1 = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr v3 = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new BinaryExpression(new Location(v1left, v1right), null, v1, v2, v3); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",112, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // multiplicative_expression ::= multiplicative_expression SLASH unary_expression 
            {
              Expr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		Expr v1 = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr v3 = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new BinaryExpression(new Location(v1left, v1right), null, v1, v2, v3); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",112, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // unary_expression ::= value_literal 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		UnaryExpression v = (UnaryExpression)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = v; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("unary_expression",113, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // unary_expression ::= variable_id 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Identifier v = (Identifier)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new UnaryExpression(new Location(vleft, vright), v.getText(), null, null, v); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("unary_expression",113, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // unary_expression ::= function_call_return 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		CallFunction v = (CallFunction)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new UnaryExpression(new Location(vleft, vright), v.getText(), null, null, v); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("unary_expression",113, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // unary_expression ::= MINUS unary_expression 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                    if(v instanceof UnaryExpression unary){
                        unary.setOperator("-");
                        unary.setText("-"+unary.getText());
                        RESULT = unary;
                    }
                    else if(v instanceof BinaryExpression binary){
                        binary.setOp("-");
                        binary.setText("-"+v.getText());
                        RESULT = binary;
                    }
                    
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("unary_expression",113, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // unary_expression ::= LPAREN expression RPAREN 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
                    v.setText("("+v.getText()+")");
                    RESULT = v;
                    
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("unary_expression",113, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // value_literal ::= string_literal 
            {
              UnaryExpression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new UnaryExpression(new Location(vleft, vright), "\""+v+"\"", Type.STRING, null, v);
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("value_literal",114, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // value_literal ::= NUMBER 
            {
              UnaryExpression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                double num = Double.parseDouble(v.toString());
                Type tp;
                if(num % 1 != 0) tp = Type.DECIMAL;
                else tp = Type.INT;
                RESULT = new UnaryExpression(new Location(vleft, vright), v, tp, null, num);
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("value_literal",114, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // value_literal ::= char_literal 
            {
              UnaryExpression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new UnaryExpression(new Location(vleft, vright), v, Type.CHAR, null, v);
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("value_literal",114, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // value_literal ::= TRUE 
            {
              UnaryExpression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new UnaryExpression(new Location(vleft, vright), "true", Type.BOOLEAN, null, false);
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("value_literal",114, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // value_literal ::= FALSE 
            {
              UnaryExpression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new UnaryExpression(new Location(vleft, vright), "false", Type.BOOLEAN, null, false);
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("value_literal",114, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // string_literal ::= STRING_LITERAL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = s.replaceAll("\"", "").replaceAll("\n", "\\\n"); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("string_literal",115, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // char_literal ::= CHAR_LITERAL 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = c.replaceAll("'", ""); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("char_literal",116, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // simple_string ::= SIMPLE_STRING 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = s.replaceAll("'", "")/*.replaceAll("\n", "\\\\n")*/; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("simple_string",117, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // text ::= TEXT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // text ::= IDENTIFIER 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // text ::= STRING_LITERAL 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // text ::= CHAR_LITERAL 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // text ::= SIMPLE_STRING 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // text ::= NUMBER 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // text ::= EQUAL 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // text ::= FUNCTION_ID 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // text ::= PLUS 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // text ::= MINUS 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // text ::= TIMES 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // text ::= SLASH 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // text ::= LPAREN 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // text ::= RPAREN 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // text ::= COLON 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // text ::= SEMICOLON 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // text ::= COMMA 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // text ::= VERTICAL_BAR 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // text ::= REL_OP 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // text ::= OR 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // text ::= AND 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // text ::= NOT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // text ::= LBRACKET 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // text ::= RBRACKET 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // text ::= LBRACE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // text ::= RBRACE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // text ::= INSERT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // text ::= ON_LOAD 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // text ::= GET_ELEMENT_BY_ID 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // text ::= GLOBAL 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // text ::= ASC 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // text ::= DESC 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // text ::= LETPAR_NUM 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // text ::= LETIMPAR_NUM 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // text ::= REVERSE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // text ::= CARACTER_ALEATORIO 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // text ::= NUM_ALEATORIO 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // text ::= ALERT_INFO 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // text ::= EXIT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // text ::= REDIRECT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // text ::= INTEGER 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // text ::= DECIMAL 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // text ::= BOOLEAN 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // text ::= CHAR 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // text ::= STRING 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // text ::= TRUE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // text ::= FALSE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // text ::= HREF 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // text ::= BACKGROUND 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // text ::= COLOR 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // text ::= FONT_SIZE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // text ::= FONT_FAMILY 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // text ::= TEXT_ALIGN 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // text ::= TYPE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // text ::= ID 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // text ::= NAME 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // text ::= COLS 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // text ::= ROWS 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // string_text ::= text 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                RESULT = t;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("string_text",119, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // string_text ::= string_text text 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                RESULT = s + " " + t;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("string_text",119, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CCParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CCParser$do_action(
    int                        CUP$CCParser$act_num,
    java_cup.runtime.lr_parser CUP$CCParser$parser,
    java.util.Stack            CUP$CCParser$stack,
    int                        CUP$CCParser$top)
    throws java.lang.Exception
    {
              return CUP$CCParser$do_action_part00000000(
                               CUP$CCParser$act_num,
                               CUP$CCParser$parser,
                               CUP$CCParser$stack,
                               CUP$CCParser$top);
    }
}

}
