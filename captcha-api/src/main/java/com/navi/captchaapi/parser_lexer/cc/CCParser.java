
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.navi.captchaapi.parser_lexer.cc;

import java_cup.runtime.*;
import java.util.*;
import java.text.DecimalFormat;
import com.navi.captchaapi.parser_lexer.*;
import com.navi.captchaapi.parser_lexer.cc.obj.*;
import com.navi.captchaapi.parser_lexer.cc.obj.node.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CCParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public CCParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CCParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CCParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\364\000\002\002\004\000\002\002\003\000\002\004" +
    "\006\000\002\005\005\000\002\006\006\000\002\007\005" +
    "\000\002\010\006\000\002\011\006\000\002\012\006\000" +
    "\002\013\007\000\002\014\006\000\002\015\006\000\002" +
    "\016\006\000\002\017\006\000\002\020\005\000\002\021" +
    "\006\000\002\022\006\000\002\023\006\000\002\024\005" +
    "\000\002\025\006\000\002\026\006\000\002\027\006\000" +
    "\002\030\006\000\002\031\006\000\002\032\006\000\002" +
    "\033\006\000\002\034\006\000\002\035\006\000\002\036" +
    "\006\000\002\037\006\000\002\040\006\000\002\041\006" +
    "\000\002\042\006\000\002\043\006\000\002\044\006\000" +
    "\002\003\005\000\002\066\004\000\002\045\005\000\002" +
    "\045\004\000\002\047\005\000\002\050\004\000\002\065" +
    "\004\000\002\065\004\000\002\046\005\000\002\046\004" +
    "\000\002\051\005\000\002\051\004\000\002\052\005\000" +
    "\002\052\004\000\002\053\005\000\002\053\004\000\002" +
    "\054\005\000\002\054\004\000\002\055\005\000\002\055" +
    "\004\000\002\056\005\000\002\056\004\000\002\057\005" +
    "\000\002\057\004\000\002\060\003\000\002\061\005\000" +
    "\002\061\004\000\002\062\005\000\002\062\004\000\002" +
    "\063\005\000\002\063\004\000\002\064\005\000\002\067" +
    "\003\000\002\067\004\000\002\070\003\000\002\070\003" +
    "\000\002\070\003\000\002\070\003\000\002\070\003\000" +
    "\002\070\003\000\002\070\003\000\002\070\003\000\002" +
    "\070\003\000\002\070\003\000\002\070\003\000\002\070" +
    "\003\000\002\070\003\000\002\070\003\000\002\071\002" +
    "\000\002\071\003\000\002\072\003\000\002\072\004\000" +
    "\002\073\003\000\002\073\003\000\002\073\003\000\002" +
    "\073\003\000\002\073\003\000\002\073\003\000\002\073" +
    "\003\000\002\073\003\000\002\073\003\000\002\073\003" +
    "\000\002\073\003\000\002\073\003\000\002\073\003\000" +
    "\002\073\003\000\002\073\003\000\002\073\003\000\002" +
    "\073\003\000\002\074\007\000\002\075\007\000\002\076" +
    "\007\000\002\077\007\000\002\100\007\000\002\101\007" +
    "\000\002\102\007\000\002\103\007\000\002\104\007\000" +
    "\002\105\007\000\002\106\007\000\002\107\007\000\002" +
    "\110\007\000\002\111\007\000\002\112\007\000\002\113" +
    "\007\000\002\114\007\000\002\117\002\000\002\117\003" +
    "\000\002\120\003\000\002\120\004\000\002\121\005\000" +
    "\002\121\004\000\002\122\003\000\002\122\003\000\002" +
    "\115\003\000\002\115\005\000\002\116\003\000\002\123" +
    "\005\000\002\124\005\000\002\125\003\000\002\125\003" +
    "\000\002\125\003\000\002\125\003\000\002\125\003\000" +
    "\002\126\006\000\002\126\006\000\002\127\005\000\002" +
    "\135\002\000\002\135\003\000\002\136\003\000\002\136" +
    "\004\000\002\137\004\000\002\137\004\000\002\137\004" +
    "\000\002\137\003\000\002\137\003\000\002\137\003\000" +
    "\002\137\003\000\002\140\006\000\002\140\005\000\002" +
    "\140\005\000\002\140\006\000\002\141\006\000\002\141" +
    "\006\000\002\141\006\000\002\141\006\000\002\141\006" +
    "\000\002\141\005\000\002\141\005\000\002\141\006\000" +
    "\002\143\003\000\002\143\005\000\002\142\003\000\002" +
    "\142\003\000\002\130\005\000\002\131\005\000\002\134" +
    "\005\000\002\132\003\000\002\132\003\000\002\133\004" +
    "\000\002\133\004\000\002\133\004\000\002\144\010\000" +
    "\002\144\011\000\002\144\011\000\002\144\012\000\002" +
    "\146\003\000\002\146\004\000\002\147\011\000\002\145" +
    "\004\000\002\150\013\000\002\151\006\000\002\151\005" +
    "\000\002\152\010\000\002\153\003\000\002\154\003\000" +
    "\002\155\003\000\002\155\005\000\002\156\003\000\002" +
    "\156\005\000\002\157\003\000\002\157\005\000\002\160" +
    "\003\000\002\160\005\000\002\160\005\000\002\161\003" +
    "\000\002\161\005\000\002\161\005\000\002\162\003\000" +
    "\002\162\003\000\002\162\003\000\002\162\004\000\002" +
    "\162\005\000\002\163\003\000\002\163\003\000\002\163" +
    "\003\000\002\163\003\000\002\163\003\000\002\164\003" +
    "\000\002\165\003\000\002\166\003\000\002\167\003\000" +
    "\002\167\003\000\002\167\003\000\002\167\003\000\002" +
    "\167\003\000\002\167\003\000\002\167\003\000\002\167" +
    "\003\000\002\167\003\000\002\167\003\000\002\167\003" +
    "\000\002\167\003\000\002\167\003\000\002\167\003\000" +
    "\002\167\003\000\002\167\003\000\002\167\003\000\002" +
    "\167\003\000\002\167\003\000\002\167\003\000\002\167" +
    "\003\000\002\167\003\000\002\167\003\000\002\167\003" +
    "\000\002\167\003\000\002\167\003\000\002\170\003\000" +
    "\002\170\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0200\000\004\066\005\001\002\000\004\066\146\001" +
    "\002\000\004\004\011\001\002\000\004\002\010\001\002" +
    "\000\004\002\000\001\002\000\004\002\001\001\002\000" +
    "\006\067\uffae\134\021\001\002\000\010\004\uffa6\067\uffa6" +
    "\134\uffa6\001\002\000\010\004\uffa4\067\uffa4\134\uffa4\001" +
    "\002\000\010\004\uffac\067\uffac\134\uffac\001\002\000\010" +
    "\004\uffa5\067\uffa5\134\uffa5\001\002\000\010\004\uff9e\067" +
    "\uff9e\134\uff9e\001\002\000\010\004\uffad\067\uffad\134\021" +
    "\001\002\000\010\004\uffa7\067\uffa7\134\uffa7\001\002\000" +
    "\044\025\060\026\042\027\041\030\053\031\044\032\045" +
    "\033\047\034\052\035\056\036\051\037\055\040\057\041" +
    "\050\042\054\043\046\044\040\045\043\001\002\000\004" +
    "\067\037\001\002\000\010\004\uffa0\067\uffa0\134\uffa0\001" +
    "\002\000\010\004\uffa1\067\uffa1\134\uffa1\001\002\000\010" +
    "\004\uff9c\067\uff9c\134\uff9c\001\002\000\010\004\uffa3\067" +
    "\uffa3\134\uffa3\001\002\000\010\004\uff9d\067\uff9d\134\uff9d" +
    "\001\002\000\010\004\uffa8\067\uffa8\134\uffa8\001\002\000" +
    "\010\004\uffaa\067\uffaa\134\uffaa\001\002\000\010\004\uffa9" +
    "\067\uffa9\134\uffa9\001\002\000\010\004\uff9f\067\uff9f\134" +
    "\uff9f\001\002\000\010\004\uff9b\067\uff9b\134\uff9b\001\002" +
    "\000\010\004\uffa2\067\uffa2\134\uffa2\001\002\000\010\004" +
    "\uff9a\067\uff9a\134\uff9a\001\002\000\004\066\uffff\001\002" +
    "\000\004\074\142\001\002\000\004\074\137\001\002\000" +
    "\004\074\134\001\002\000\004\074\131\001\002\000\004" +
    "\074\126\001\002\000\004\074\123\001\002\000\004\074" +
    "\120\001\002\000\004\074\115\001\002\000\004\074\112" +
    "\001\002\000\004\074\107\001\002\000\004\074\104\001" +
    "\002\000\004\074\101\001\002\000\004\074\076\001\002" +
    "\000\004\074\073\001\002\000\004\074\070\001\002\000" +
    "\004\074\065\001\002\000\004\074\061\001\002\000\004" +
    "\070\063\001\002\000\004\135\064\001\002\000\026\116" +
    "\uff2c\117\uff2c\120\uff2c\121\uff2c\123\uff2c\125\uff2c\130\uff2c" +
    "\131\uff2c\132\uff2c\135\uff2c\001\002\000\010\004\uff99\067" +
    "\uff99\134\uff99\001\002\000\004\070\063\001\002\000\004" +
    "\135\067\001\002\000\010\004\uff8e\067\uff8e\134\uff8e\001" +
    "\002\000\004\070\063\001\002\000\004\135\072\001\002" +
    "\000\010\004\uff91\067\uff91\134\uff91\001\002\000\004\070" +
    "\063\001\002\000\004\135\075\001\002\000\010\004\uff8f" +
    "\067\uff8f\134\uff8f\001\002\000\004\070\063\001\002\000" +
    "\004\135\100\001\002\000\010\004\uff8c\067\uff8c\134\uff8c" +
    "\001\002\000\004\070\063\001\002\000\004\135\103\001" +
    "\002\000\010\004\uff96\067\uff96\134\uff96\001\002\000\004" +
    "\070\063\001\002\000\004\135\106\001\002\000\010\004" +
    "\uff92\067\uff92\134\uff92\001\002\000\004\070\063\001\002" +
    "\000\004\135\111\001\002\000\010\004\uff90\067\uff90\134" +
    "\uff90\001\002\000\004\070\063\001\002\000\004\135\114" +
    "\001\002\000\010\004\uff8d\067\uff8d\134\uff8d\001\002\000" +
    "\004\070\063\001\002\000\004\135\117\001\002\000\010" +
    "\004\uff93\067\uff93\134\uff93\001\002\000\004\070\063\001" +
    "\002\000\004\135\122\001\002\000\010\004\uff8b\067\uff8b" +
    "\134\uff8b\001\002\000\004\070\063\001\002\000\004\135" +
    "\125\001\002\000\010\004\uff94\067\uff94\134\uff94\001\002" +
    "\000\004\070\063\001\002\000\004\135\130\001\002\000" +
    "\010\004\uff95\067\uff95\134\uff95\001\002\000\004\070\063" +
    "\001\002\000\004\135\133\001\002\000\010\004\uff89\067" +
    "\uff89\134\uff89\001\002\000\004\070\063\001\002\000\004" +
    "\135\136\001\002\000\010\004\uff98\067\uff98\134\uff98\001" +
    "\002\000\004\070\063\001\002\000\004\135\141\001\002" +
    "\000\010\004\uff97\067\uff97\134\uff97\001\002\000\004\070" +
    "\063\001\002\000\004\135\144\001\002\000\010\004\uff8a" +
    "\067\uff8a\134\uff8a\001\002\000\010\004\uffab\067\uffab\134" +
    "\uffab\001\002\000\004\005\u0201\001\002\000\004\066\u01fd" +
    "\001\002\000\004\066\247\001\002\000\004\066\152\001" +
    "\002\000\010\006\202\007\163\121\170\001\002\000\066" +
    "\070\227\071\211\072\233\073\234\074\214\075\220\076" +
    "\237\077\216\116\207\117\235\120\204\121\215\122\223" +
    "\123\213\124\221\125\206\126\231\127\236\130\232\131" +
    "\210\132\205\133\217\134\224\135\226\136\225\137\212" +
    "\001\002\000\004\066\200\001\002\000\004\066\uffdb\001" +
    "\002\000\004\066\173\001\002\000\004\066\166\001\002" +
    "\000\004\066\161\001\002\000\004\007\163\001\002\000" +
    "\004\066\uffd8\001\002\000\006\067\uffae\134\021\001\002" +
    "\000\004\067\165\001\002\000\004\066\ufffb\001\002\000" +
    "\004\121\170\001\002\000\004\066\uffdc\001\002\000\004" +
    "\005\171\001\002\000\004\067\172\001\002\000\004\066" +
    "\uffed\001\002\000\004\121\175\001\002\000\004\066\uffd9" +
    "\001\002\000\004\007\176\001\002\000\004\067\177\001" +
    "\002\000\004\066\uffea\001\002\000\004\006\202\001\002" +
    "\000\004\066\uffd7\001\002\000\004\067\203\001\002\000" +
    "\066\070\ufffc\071\ufffc\072\ufffc\073\ufffc\074\ufffc\075\ufffc" +
    "\076\ufffc\077\ufffc\116\ufffc\117\ufffc\120\ufffc\121\ufffc\122" +
    "\ufffc\123\ufffc\124\ufffc\125\ufffc\126\ufffc\127\ufffc\130\ufffc" +
    "\131\ufffc\132\ufffc\133\ufffc\134\ufffc\135\ufffc\136\ufffc\137" +
    "\ufffc\001\002\000\072\003\uff1f\066\uff1f\070\uff1f\071\uff1f" +
    "\072\uff1f\073\uff1f\074\uff1f\075\uff1f\076\uff1f\077\uff1f\116" +
    "\uff1f\117\uff1f\120\uff1f\121\uff1f\122\uff1f\123\uff1f\124\uff1f" +
    "\125\uff1f\126\uff1f\127\uff1f\130\uff1f\131\uff1f\132\uff1f\133" +
    "\uff1f\134\uff1f\135\uff1f\136\uff1f\137\uff1f\001\002\000\072" +
    "\003\uff15\066\uff15\070\uff15\071\uff15\072\uff15\073\uff15\074" +
    "\uff15\075\uff15\076\uff15\077\uff15\116\uff15\117\uff15\120\uff15" +
    "\121\uff15\122\uff15\123\uff15\124\uff15\125\uff15\126\uff15\127" +
    "\uff15\130\uff15\131\uff15\132\uff15\133\uff15\134\uff15\135\uff15" +
    "\136\uff15\137\uff15\001\002\000\072\003\uff1a\066\uff1a\070" +
    "\uff1a\071\uff1a\072\uff1a\073\uff1a\074\uff1a\075\uff1a\076\uff1a" +
    "\077\uff1a\116\uff1a\117\uff1a\120\uff1a\121\uff1a\122\uff1a\123" +
    "\uff1a\124\uff1a\125\uff1a\126\uff1a\127\uff1a\130\uff1a\131\uff1a" +
    "\132\uff1a\133\uff1a\134\uff1a\135\uff1a\136\uff1a\137\uff1a\001" +
    "\002\000\072\003\uff21\066\uff21\070\uff21\071\uff21\072\uff21" +
    "\073\uff21\074\uff21\075\uff21\076\uff21\077\uff21\116\uff21\117" +
    "\uff21\120\uff21\121\uff21\122\uff21\123\uff21\124\uff21\125\uff21" +
    "\126\uff21\127\uff21\130\uff21\131\uff21\132\uff21\133\uff21\134" +
    "\uff21\135\uff21\136\uff21\137\uff21\001\002\000\072\003\uff16" +
    "\066\uff16\070\uff16\071\uff16\072\uff16\073\uff16\074\uff16\075" +
    "\uff16\076\uff16\077\uff16\116\uff16\117\uff16\120\uff16\121\uff16" +
    "\122\uff16\123\uff16\124\uff16\125\uff16\126\uff16\127\uff16\130" +
    "\uff16\131\uff16\132\uff16\133\uff16\134\uff16\135\uff16\136\uff16" +
    "\137\uff16\001\002\000\072\003\uff25\066\uff25\070\uff25\071" +
    "\uff25\072\uff25\073\uff25\074\uff25\075\uff25\076\uff25\077\uff25" +
    "\116\uff25\117\uff25\120\uff25\121\uff25\122\uff25\123\uff25\124" +
    "\uff25\125\uff25\126\uff25\127\uff25\130\uff25\131\uff25\132\uff25" +
    "\133\uff25\134\uff25\135\uff25\136\uff25\137\uff25\001\002\000" +
    "\072\003\uff10\066\uff10\070\uff10\071\uff10\072\uff10\073\uff10" +
    "\074\uff10\075\uff10\076\uff10\077\uff10\116\uff10\117\uff10\120" +
    "\uff10\121\uff10\122\uff10\123\uff10\124\uff10\125\uff10\126\uff10" +
    "\127\uff10\130\uff10\131\uff10\132\uff10\133\uff10\134\uff10\135" +
    "\uff10\136\uff10\137\uff10\001\002\000\072\003\uff1c\066\uff1c" +
    "\070\uff1c\071\uff1c\072\uff1c\073\uff1c\074\uff1c\075\uff1c\076" +
    "\uff1c\077\uff1c\116\uff1c\117\uff1c\120\uff1c\121\uff1c\122\uff1c" +
    "\123\uff1c\124\uff1c\125\uff1c\126\uff1c\127\uff1c\130\uff1c\131" +
    "\uff1c\132\uff1c\133\uff1c\134\uff1c\135\uff1c\136\uff1c\137\uff1c" +
    "\001\002\000\072\003\uff23\066\uff23\070\uff23\071\uff23\072" +
    "\uff23\073\uff23\074\uff23\075\uff23\076\uff23\077\uff23\116\uff23" +
    "\117\uff23\120\uff23\121\uff23\122\uff23\123\uff23\124\uff23\125" +
    "\uff23\126\uff23\127\uff23\130\uff23\131\uff23\132\uff23\133\uff23" +
    "\134\uff23\135\uff23\136\uff23\137\uff23\001\002\000\072\003" +
    "\uff1e\066\uff1e\070\uff1e\071\uff1e\072\uff1e\073\uff1e\074\uff1e" +
    "\075\uff1e\076\uff1e\077\uff1e\116\uff1e\117\uff1e\120\uff1e\121" +
    "\uff1e\122\uff1e\123\uff1e\124\uff1e\125\uff1e\126\uff1e\127\uff1e" +
    "\130\uff1e\131\uff1e\132\uff1e\133\uff1e\134\uff1e\135\uff1e\136" +
    "\uff1e\137\uff1e\001\002\000\072\003\uff22\066\uff22\070\uff22" +
    "\071\uff22\072\uff22\073\uff22\074\uff22\075\uff22\076\uff22\077" +
    "\uff22\116\uff22\117\uff22\120\uff22\121\uff22\122\uff22\123\uff22" +
    "\124\uff22\125\uff22\126\uff22\127\uff22\130\uff22\131\uff22\132" +
    "\uff22\133\uff22\134\uff22\135\uff22\136\uff22\137\uff22\001\002" +
    "\000\072\003\uff14\066\uff14\070\uff14\071\uff14\072\uff14\073" +
    "\uff14\074\uff14\075\uff14\076\uff14\077\uff14\116\uff14\117\uff14" +
    "\120\uff14\121\uff14\122\uff14\123\uff14\124\uff14\125\uff14\126" +
    "\uff14\127\uff14\130\uff14\131\uff14\132\uff14\133\uff14\134\uff14" +
    "\135\uff14\136\uff14\137\uff14\001\002\000\072\003\uff28\066" +
    "\uff28\070\uff28\071\uff28\072\uff28\073\uff28\074\uff28\075\uff28" +
    "\076\uff28\077\uff28\116\uff28\117\uff28\120\uff28\121\uff28\122" +
    "\uff28\123\uff28\124\uff28\125\uff28\126\uff28\127\uff28\130\uff28" +
    "\131\uff28\132\uff28\133\uff28\134\uff28\135\uff28\136\uff28\137" +
    "\uff28\001\002\000\072\003\uff1b\066\uff1b\070\uff1b\071\uff1b" +
    "\072\uff1b\073\uff1b\074\uff1b\075\uff1b\076\uff1b\077\uff1b\116" +
    "\uff1b\117\uff1b\120\uff1b\121\uff1b\122\uff1b\123\uff1b\124\uff1b" +
    "\125\uff1b\126\uff1b\127\uff1b\130\uff1b\131\uff1b\132\uff1b\133" +
    "\uff1b\134\uff1b\135\uff1b\136\uff1b\137\uff1b\001\002\000\070" +
    "\066\240\070\227\071\211\072\233\073\234\074\214\075" +
    "\220\076\237\077\216\116\207\117\235\120\204\121\215" +
    "\122\223\123\213\124\221\125\206\126\231\127\236\130" +
    "\232\131\210\132\205\133\217\134\224\135\226\136\225" +
    "\137\212\001\002\000\072\003\uff1d\066\uff1d\070\uff1d\071" +
    "\uff1d\072\uff1d\073\uff1d\074\uff1d\075\uff1d\076\uff1d\077\uff1d" +
    "\116\uff1d\117\uff1d\120\uff1d\121\uff1d\122\uff1d\123\uff1d\124" +
    "\uff1d\125\uff1d\126\uff1d\127\uff1d\130\uff1d\131\uff1d\132\uff1d" +
    "\133\uff1d\134\uff1d\135\uff1d\136\uff1d\137\uff1d\001\002\000" +
    "\072\003\uff13\066\uff13\070\uff13\071\uff13\072\uff13\073\uff13" +
    "\074\uff13\075\uff13\076\uff13\077\uff13\116\uff13\117\uff13\120" +
    "\uff13\121\uff13\122\uff13\123\uff13\124\uff13\125\uff13\126\uff13" +
    "\127\uff13\130\uff13\131\uff13\132\uff13\133\uff13\134\uff13\135" +
    "\uff13\136\uff13\137\uff13\001\002\000\072\003\uff11\066\uff11" +
    "\070\uff11\071\uff11\072\uff11\073\uff11\074\uff11\075\uff11\076" +
    "\uff11\077\uff11\116\uff11\117\uff11\120\uff11\121\uff11\122\uff11" +
    "\123\uff11\124\uff11\125\uff11\126\uff11\127\uff11\130\uff11\131" +
    "\uff11\132\uff11\133\uff11\134\uff11\135\uff11\136\uff11\137\uff11" +
    "\001\002\000\072\003\uff12\066\uff12\070\uff12\071\uff12\072" +
    "\uff12\073\uff12\074\uff12\075\uff12\076\uff12\077\uff12\116\uff12" +
    "\117\uff12\120\uff12\121\uff12\122\uff12\123\uff12\124\uff12\125" +
    "\uff12\126\uff12\127\uff12\130\uff12\131\uff12\132\uff12\133\uff12" +
    "\134\uff12\135\uff12\136\uff12\137\uff12\001\002\000\072\003" +
    "\uff27\066\uff27\070\uff27\071\uff27\072\uff27\073\uff27\074\uff27" +
    "\075\uff27\076\uff27\077\uff27\116\uff27\117\uff27\120\uff27\121" +
    "\uff27\122\uff27\123\uff27\124\uff27\125\uff27\126\uff27\127\uff27" +
    "\130\uff27\131\uff27\132\uff27\133\uff27\134\uff27\135\uff27\136" +
    "\uff27\137\uff27\001\002\000\070\066\uff0f\070\uff0f\071\uff0f" +
    "\072\uff0f\073\uff0f\074\uff0f\075\uff0f\076\uff0f\077\uff0f\116" +
    "\uff0f\117\uff0f\120\uff0f\121\uff0f\122\uff0f\123\uff0f\124\uff0f" +
    "\125\uff0f\126\uff0f\127\uff0f\130\uff0f\131\uff0f\132\uff0f\133" +
    "\uff0f\134\uff0f\135\uff0f\136\uff0f\137\uff0f\001\002\000\072" +
    "\003\uff19\066\uff19\070\uff19\071\uff19\072\uff19\073\uff19\074" +
    "\uff19\075\uff19\076\uff19\077\uff19\116\uff19\117\uff19\120\uff19" +
    "\121\uff19\122\uff19\123\uff19\124\uff19\125\uff19\126\uff19\127" +
    "\uff19\130\uff19\131\uff19\132\uff19\133\uff19\134\uff19\135\uff19" +
    "\136\uff19\137\uff19\001\002\000\072\003\uff17\066\uff17\070" +
    "\uff17\071\uff17\072\uff17\073\uff17\074\uff17\075\uff17\076\uff17" +
    "\077\uff17\116\uff17\117\uff17\120\uff17\121\uff17\122\uff17\123" +
    "\uff17\124\uff17\125\uff17\126\uff17\127\uff17\130\uff17\131\uff17" +
    "\132\uff17\133\uff17\134\uff17\135\uff17\136\uff17\137\uff17\001" +
    "\002\000\072\003\uff24\066\uff24\070\uff24\071\uff24\072\uff24" +
    "\073\uff24\074\uff24\075\uff24\076\uff24\077\uff24\116\uff24\117" +
    "\uff24\120\uff24\121\uff24\122\uff24\123\uff24\124\uff24\125\uff24" +
    "\126\uff24\127\uff24\130\uff24\131\uff24\132\uff24\133\uff24\134" +
    "\uff24\135\uff24\136\uff24\137\uff24\001\002\000\072\003\uff26" +
    "\066\uff26\070\uff26\071\uff26\072\uff26\073\uff26\074\uff26\075" +
    "\uff26\076\uff26\077\uff26\116\uff26\117\uff26\120\uff26\121\uff26" +
    "\122\uff26\123\uff26\124\uff26\125\uff26\126\uff26\127\uff26\130" +
    "\uff26\131\uff26\132\uff26\133\uff26\134\uff26\135\uff26\136\uff26" +
    "\137\uff26\001\002\000\072\003\uff20\066\uff20\070\uff20\071" +
    "\uff20\072\uff20\073\uff20\074\uff20\075\uff20\076\uff20\077\uff20" +
    "\116\uff20\117\uff20\120\uff20\121\uff20\122\uff20\123\uff20\124" +
    "\uff20\125\uff20\126\uff20\127\uff20\130\uff20\131\uff20\132\uff20" +
    "\133\uff20\134\uff20\135\uff20\136\uff20\137\uff20\001\002\000" +
    "\072\003\uff18\066\uff18\070\uff18\071\uff18\072\uff18\073\uff18" +
    "\074\uff18\075\uff18\076\uff18\077\uff18\116\uff18\117\uff18\120" +
    "\uff18\121\uff18\122\uff18\123\uff18\124\uff18\125\uff18\126\uff18" +
    "\127\uff18\130\uff18\131\uff18\132\uff18\133\uff18\134\uff18\135" +
    "\uff18\136\uff18\137\uff18\001\002\000\072\003\uff29\066\uff29" +
    "\070\uff29\071\uff29\072\uff29\073\uff29\074\uff29\075\uff29\076" +
    "\uff29\077\uff29\116\uff29\117\uff29\120\uff29\121\uff29\122\uff29" +
    "\123\uff29\124\uff29\125\uff29\126\uff29\127\uff29\130\uff29\131" +
    "\uff29\132\uff29\133\uff29\134\uff29\135\uff29\136\uff29\137\uff29" +
    "\001\002\000\004\121\243\001\002\000\004\066\uffda\001" +
    "\002\000\070\066\uff0e\070\uff0e\071\uff0e\072\uff0e\073\uff0e" +
    "\074\uff0e\075\uff0e\076\uff0e\077\uff0e\116\uff0e\117\uff0e\120" +
    "\uff0e\121\uff0e\122\uff0e\123\uff0e\124\uff0e\125\uff0e\126\uff0e" +
    "\127\uff0e\130\uff0e\131\uff0e\132\uff0e\133\uff0e\134\uff0e\135" +
    "\uff0e\136\uff0e\137\uff0e\001\002\000\004\006\244\001\002" +
    "\000\004\067\245\001\002\000\004\066\uffeb\001\002\000" +
    "\004\066\uffdd\001\002\000\004\010\u01f9\001\002\000\072" +
    "\003\275\066\262\070\227\071\211\072\233\073\234\074" +
    "\214\075\220\076\237\077\216\116\207\117\235\120\204" +
    "\121\215\122\223\123\213\124\221\125\206\126\231\127" +
    "\236\130\232\131\210\132\205\133\217\134\224\135\226" +
    "\136\225\137\212\001\002\000\072\003\uffb1\066\uffb1\070" +
    "\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1" +
    "\077\uffb1\116\uffb1\117\uffb1\120\uffb1\121\uffb1\122\uffb1\123" +
    "\uffb1\124\uffb1\125\uffb1\126\uffb1\127\uffb1\130\uffb1\131\uffb1" +
    "\132\uffb1\133\uffb1\134\uffb1\135\uffb1\136\uffb1\137\uffb1\001" +
    "\002\000\072\003\275\066\u01f3\070\227\071\211\072\233" +
    "\073\234\074\214\075\220\076\237\077\216\116\207\117" +
    "\235\120\204\121\215\122\223\123\213\124\221\125\206" +
    "\126\231\127\236\130\232\131\210\132\205\133\217\134" +
    "\224\135\226\136\225\137\212\001\002\000\072\003\uffb6" +
    "\066\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6\074\uffb6\075" +
    "\uffb6\076\uffb6\077\uffb6\116\uffb6\117\uffb6\120\uffb6\121\uffb6" +
    "\122\uffb6\123\uffb6\124\uffb6\125\uffb6\126\uffb6\127\uffb6\130" +
    "\uffb6\131\uffb6\132\uffb6\133\uffb6\134\uffb6\135\uffb6\136\uffb6" +
    "\137\uffb6\001\002\000\072\003\275\066\u01eb\070\227\071" +
    "\211\072\233\073\234\074\214\075\220\076\237\077\216" +
    "\116\207\117\235\120\204\121\215\122\223\123\213\124" +
    "\221\125\206\126\231\127\236\130\232\131\210\132\205" +
    "\133\217\134\224\135\226\136\225\137\212\001\002\000" +
    "\004\066\uffd5\001\002\000\072\003\275\066\u01e4\070\227" +
    "\071\211\072\233\073\234\074\214\075\220\076\237\077" +
    "\216\116\207\117\235\120\204\121\215\122\223\123\213" +
    "\124\221\125\206\126\231\127\236\130\232\131\210\132" +
    "\205\133\217\134\224\135\226\136\225\137\212\001\002" +
    "\000\072\003\275\066\u01dd\070\227\071\211\072\233\073" +
    "\234\074\214\075\220\076\237\077\216\116\207\117\235" +
    "\120\204\121\215\122\223\123\213\124\221\125\206\126" +
    "\231\127\236\130\232\131\210\132\205\133\217\134\224" +
    "\135\226\136\225\137\212\001\002\000\072\003\uffb3\066" +
    "\uffb3\070\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3" +
    "\076\uffb3\077\uffb3\116\uffb3\117\uffb3\120\uffb3\121\uffb3\122" +
    "\uffb3\123\uffb3\124\uffb3\125\uffb3\126\uffb3\127\uffb3\130\uffb3" +
    "\131\uffb3\132\uffb3\133\uffb3\134\uffb3\135\uffb3\136\uffb3\137" +
    "\uffb3\001\002\000\072\003\uffba\066\uffba\070\uffba\071\uffba" +
    "\072\uffba\073\uffba\074\uffba\075\uffba\076\uffba\077\uffba\116" +
    "\uffba\117\uffba\120\uffba\121\uffba\122\uffba\123\uffba\124\uffba" +
    "\125\uffba\126\uffba\127\uffba\130\uffba\131\uffba\132\uffba\133" +
    "\uffba\134\uffba\135\uffba\136\uffba\137\uffba\001\002\000\034" +
    "\011\326\012\325\013\321\014\316\015\324\016\314\017" +
    "\320\020\322\021\323\022\330\023\315\024\327\121\u01da" +
    "\001\002\000\072\003\275\066\u01d3\070\227\071\211\072" +
    "\233\073\234\074\214\075\220\076\237\077\216\116\207" +
    "\117\235\120\204\121\215\122\223\123\213\124\221\125" +
    "\206\126\231\127\236\130\232\131\210\132\205\133\217" +
    "\134\224\135\226\136\225\137\212\001\002\000\072\003" +
    "\uffb4\066\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4" +
    "\075\uffb4\076\uffb4\077\uffb4\116\uffb4\117\uffb4\120\uffb4\121" +
    "\uffb4\122\uffb4\123\uffb4\124\uffb4\125\uffb4\126\uffb4\127\uffb4" +
    "\130\uffb4\131\uffb4\132\uffb4\133\uffb4\134\uffb4\135\uffb4\136" +
    "\uffb4\137\uffb4\001\002\000\072\003\uffbb\066\uffbb\070\uffbb" +
    "\071\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb\077" +
    "\uffbb\116\uffbb\117\uffbb\120\uffbb\121\uffbb\122\uffbb\123\uffbb" +
    "\124\uffbb\125\uffbb\126\uffbb\127\uffbb\130\uffbb\131\uffbb\132" +
    "\uffbb\133\uffbb\134\uffbb\135\uffbb\136\uffbb\137\uffbb\001\002" +
    "\000\072\003\uffb2\066\uffb2\070\uffb2\071\uffb2\072\uffb2\073" +
    "\uffb2\074\uffb2\075\uffb2\076\uffb2\077\uffb2\116\uffb2\117\uffb2" +
    "\120\uffb2\121\uffb2\122\uffb2\123\uffb2\124\uffb2\125\uffb2\126" +
    "\uffb2\127\uffb2\130\uffb2\131\uffb2\132\uffb2\133\uffb2\134\uffb2" +
    "\135\uffb2\136\uffb2\137\uffb2\001\002\000\072\003\275\066" +
    "\u01cc\070\227\071\211\072\233\073\234\074\214\075\220" +
    "\076\237\077\216\116\207\117\235\120\204\121\215\122" +
    "\223\123\213\124\221\125\206\126\231\127\236\130\232" +
    "\131\210\132\205\133\217\134\224\135\226\136\225\137" +
    "\212\001\002\000\072\003\uffc6\066\uffc6\070\uffc6\071\uffc6" +
    "\072\uffc6\073\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6\116" +
    "\uffc6\117\uffc6\120\uffc6\121\uffc6\122\uffc6\123\uffc6\124\uffc6" +
    "\125\uffc6\126\uffc6\127\uffc6\130\uffc6\131\uffc6\132\uffc6\133" +
    "\uffc6\134\uffc6\135\uffc6\136\uffc6\137\uffc6\001\002\000\072" +
    "\003\275\066\262\070\227\071\211\072\233\073\234\074" +
    "\214\075\220\076\237\077\216\116\207\117\235\120\204" +
    "\121\215\122\223\123\213\124\221\125\206\126\231\127" +
    "\236\130\232\131\210\132\205\133\217\134\224\135\226" +
    "\136\225\137\212\001\002\000\072\003\uffb5\066\uffb5\070" +
    "\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5" +
    "\077\uffb5\116\uffb5\117\uffb5\120\uffb5\121\uffb5\122\uffb5\123" +
    "\uffb5\124\uffb5\125\uffb5\126\uffb5\127\uffb5\130\uffb5\131\uffb5" +
    "\132\uffb5\133\uffb5\134\uffb5\135\uffb5\136\uffb5\137\uffb5\001" +
    "\002\000\072\003\275\066\u01c5\070\227\071\211\072\233" +
    "\073\234\074\214\075\220\076\237\077\216\116\207\117" +
    "\235\120\204\121\215\122\223\123\213\124\221\125\206" +
    "\126\231\127\236\130\232\131\210\132\205\133\217\134" +
    "\224\135\226\136\225\137\212\001\002\000\072\003\uffbc" +
    "\066\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc\074\uffbc\075" +
    "\uffbc\076\uffbc\077\uffbc\116\uffbc\117\uffbc\120\uffbc\121\uffbc" +
    "\122\uffbc\123\uffbc\124\uffbc\125\uffbc\126\uffbc\127\uffbc\130" +
    "\uffbc\131\uffbc\132\uffbc\133\uffbc\134\uffbc\135\uffbc\136\uffbc" +
    "\137\uffbc\001\002\000\072\003\uffaf\066\uffaf\070\uffaf\071" +
    "\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf" +
    "\116\uffaf\117\uffaf\120\uffaf\121\uffaf\122\uffaf\123\uffaf\124" +
    "\uffaf\125\uffaf\126\uffaf\127\uffaf\130\uffaf\131\uffaf\132\uffaf" +
    "\133\uffaf\134\uffaf\135\uffaf\136\uffaf\137\uffaf\001\002\000" +
    "\072\003\uffb0\066\uffb0\070\uffb0\071\uffb0\072\uffb0\073\uffb0" +
    "\074\uffb0\075\uffb0\076\uffb0\077\uffb0\116\uffb0\117\uffb0\120" +
    "\uffb0\121\uffb0\122\uffb0\123\uffb0\124\uffb0\125\uffb0\126\uffb0" +
    "\127\uffb0\130\uffb0\131\uffb0\132\uffb0\133\uffb0\134\uffb0\135" +
    "\uffb0\136\uffb0\137\uffb0\001\002\000\072\003\uffbe\066\uffbe" +
    "\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe\076" +
    "\uffbe\077\uffbe\116\uffbe\117\uffbe\120\uffbe\121\uffbe\122\uffbe" +
    "\123\uffbe\124\uffbe\125\uffbe\126\uffbe\127\uffbe\130\uffbe\131" +
    "\uffbe\132\uffbe\133\uffbe\134\uffbe\135\uffbe\136\uffbe\137\uffbe" +
    "\001\002\000\010\066\uff88\077\u0104\101\u0101\001\002\000" +
    "\072\003\uffb8\066\uffb8\070\uffb8\071\uffb8\072\uffb8\073\uffb8" +
    "\074\uffb8\075\uffb8\076\uffb8\077\uffb8\116\uffb8\117\uffb8\120" +
    "\uffb8\121\uffb8\122\uffb8\123\uffb8\124\uffb8\125\uffb8\126\uffb8" +
    "\127\uffb8\130\uffb8\131\uffb8\132\uffb8\133\uffb8\134\uffb8\135" +
    "\uffb8\136\uffb8\137\uffb8\001\002\000\072\003\275\066\371" +
    "\070\227\071\211\072\233\073\234\074\214\075\220\076" +
    "\237\077\216\116\207\117\235\120\204\121\215\122\223" +
    "\123\213\124\221\125\206\126\231\127\236\130\232\131" +
    "\210\132\205\133\217\134\224\135\226\136\225\137\212" +
    "\001\002\000\072\003\uffb7\066\uffb7\070\uffb7\071\uffb7\072" +
    "\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7\116\uffb7" +
    "\117\uffb7\120\uffb7\121\uffb7\122\uffb7\123\uffb7\124\uffb7\125" +
    "\uffb7\126\uffb7\127\uffb7\130\uffb7\131\uffb7\132\uffb7\133\uffb7" +
    "\134\uffb7\135\uffb7\136\uffb7\137\uffb7\001\002\000\072\003" +
    "\uffb9\066\uffb9\070\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9" +
    "\075\uffb9\076\uffb9\077\uffb9\116\uffb9\117\uffb9\120\uffb9\121" +
    "\uffb9\122\uffb9\123\uffb9\124\uffb9\125\uffb9\126\uffb9\127\uffb9" +
    "\130\uffb9\131\uffb9\132\uffb9\133\uffb9\134\uffb9\135\uffb9\136" +
    "\uffb9\137\uffb9\001\002\000\072\003\275\066\362\070\227" +
    "\071\211\072\233\073\234\074\214\075\220\076\237\077" +
    "\216\116\207\117\235\120\204\121\215\122\223\123\213" +
    "\124\221\125\206\126\231\127\236\130\232\131\210\132" +
    "\205\133\217\134\224\135\226\136\225\137\212\001\002" +
    "\000\072\003\275\066\310\070\227\071\211\072\233\073" +
    "\234\074\214\075\220\076\237\077\216\116\207\117\235" +
    "\120\204\121\215\122\223\123\213\124\221\125\206\126" +
    "\231\127\236\130\232\131\210\132\205\133\217\134\224" +
    "\135\226\136\225\137\212\001\002\000\072\003\uffc4\066" +
    "\uffc4\070\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4" +
    "\076\uffc4\077\uffc4\116\uffc4\117\uffc4\120\uffc4\121\uffc4\122" +
    "\uffc4\123\uffc4\124\uffc4\125\uffc4\126\uffc4\127\uffc4\130\uffc4" +
    "\131\uffc4\132\uffc4\133\uffc4\134\uffc4\135\uffc4\136\uffc4\137" +
    "\uffc4\001\002\000\034\011\326\012\325\013\321\014\316" +
    "\015\324\016\314\017\320\020\322\021\323\022\330\023" +
    "\315\024\327\121\317\001\002\000\072\003\275\066\310" +
    "\070\227\071\211\072\233\073\234\074\214\075\220\076" +
    "\237\077\216\116\207\117\235\120\204\121\215\122\223" +
    "\123\213\124\221\125\206\126\231\127\236\130\232\131" +
    "\210\132\205\133\217\134\224\135\226\136\225\137\212" +
    "\001\002\000\072\003\uffc5\066\uffc5\070\uffc5\071\uffc5\072" +
    "\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5\116\uffc5" +
    "\117\uffc5\120\uffc5\121\uffc5\122\uffc5\123\uffc5\124\uffc5\125" +
    "\uffc5\126\uffc5\127\uffc5\130\uffc5\131\uffc5\132\uffc5\133\uffc5" +
    "\134\uffc5\135\uffc5\136\uffc5\137\uffc5\001\002\000\072\003" +
    "\uffbd\066\uffbd\070\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd" +
    "\075\uffbd\076\uffbd\077\uffbd\116\uffbd\117\uffbd\120\uffbd\121" +
    "\uffbd\122\uffbd\123\uffbd\124\uffbd\125\uffbd\126\uffbd\127\uffbd" +
    "\130\uffbd\131\uffbd\132\uffbd\133\uffbd\134\uffbd\135\uffbd\136" +
    "\uffbd\137\uffbd\001\002\000\006\067\uffae\134\021\001\002" +
    "\000\006\067\uffae\134\021\001\002\000\006\067\uffae\134" +
    "\021\001\002\000\004\021\352\001\002\000\006\067\uffae" +
    "\134\021\001\002\000\006\004\uffae\134\021\001\002\000" +
    "\004\067\344\001\002\000\006\067\uffae\134\021\001\002" +
    "\000\006\067\uffae\134\021\001\002\000\006\067\uffae\134" +
    "\021\001\002\000\006\067\uffae\134\021\001\002\000\004" +
    "\067\333\001\002\000\006\067\uffae\134\021\001\002\000" +
    "\004\067\332\001\002\000\072\003\ufff1\066\ufff1\070\ufff1" +
    "\071\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1\076\ufff1\077" +
    "\ufff1\116\ufff1\117\ufff1\120\ufff1\121\ufff1\122\ufff1\123\ufff1" +
    "\124\ufff1\125\ufff1\126\ufff1\127\ufff1\130\ufff1\131\ufff1\132" +
    "\ufff1\133\ufff1\134\ufff1\135\ufff1\136\ufff1\137\ufff1\001\002" +
    "\000\010\066\uffef\077\uffef\101\uffef\001\002\000\004\067" +
    "\335\001\002\000\072\003\ufffa\066\ufffa\070\ufffa\071\ufffa" +
    "\072\ufffa\073\ufffa\074\ufffa\075\ufffa\076\ufffa\077\ufffa\116" +
    "\ufffa\117\ufffa\120\ufffa\121\ufffa\122\ufffa\123\ufffa\124\ufffa" +
    "\125\ufffa\126\ufffa\127\ufffa\130\ufffa\131\ufffa\132\ufffa\133" +
    "\ufffa\134\ufffa\135\ufffa\136\ufffa\137\ufffa\001\002\000\004" +
    "\067\337\001\002\000\072\003\ufff9\066\ufff9\070\ufff9\071" +
    "\ufff9\072\ufff9\073\ufff9\074\ufff9\075\ufff9\076\ufff9\077\ufff9" +
    "\116\ufff9\117\ufff9\120\ufff9\121\ufff9\122\ufff9\123\ufff9\124" +
    "\ufff9\125\ufff9\126\ufff9\127\ufff9\130\ufff9\131\ufff9\132\ufff9" +
    "\133\ufff9\134\ufff9\135\ufff9\136\ufff9\137\ufff9\001\002\000" +
    "\004\067\341\001\002\000\072\003\ufff6\066\ufff6\070\ufff6" +
    "\071\ufff6\072\ufff6\073\ufff6\074\ufff6\075\ufff6\076\ufff6\077" +
    "\ufff6\116\ufff6\117\ufff6\120\ufff6\121\ufff6\122\ufff6\123\ufff6" +
    "\124\ufff6\125\ufff6\126\ufff6\127\ufff6\130\ufff6\131\ufff6\132" +
    "\ufff6\133\ufff6\134\ufff6\135\ufff6\136\ufff6\137\ufff6\001\002" +
    "\000\004\067\343\001\002\000\072\003\ufff2\066\ufff2\070" +
    "\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2" +
    "\077\ufff2\116\ufff2\117\ufff2\120\ufff2\121\ufff2\122\ufff2\123" +
    "\ufff2\124\ufff2\125\ufff2\126\ufff2\127\ufff2\130\ufff2\131\ufff2" +
    "\132\ufff2\133\ufff2\134\ufff2\135\ufff2\136\ufff2\137\ufff2\001" +
    "\002\000\072\003\ufff3\066\ufff3\070\ufff3\071\ufff3\072\ufff3" +
    "\073\ufff3\074\ufff3\075\ufff3\076\ufff3\077\ufff3\116\ufff3\117" +
    "\ufff3\120\ufff3\121\ufff3\122\ufff3\123\ufff3\124\ufff3\125\ufff3" +
    "\126\ufff3\127\ufff3\130\ufff3\131\ufff3\132\ufff3\133\ufff3\134" +
    "\ufff3\135\ufff3\136\ufff3\137\ufff3\001\002\000\004\004\346" +
    "\001\002\000\004\067\347\001\002\000\072\003\ufff8\066" +
    "\ufff8\070\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075\ufff8" +
    "\076\ufff8\077\ufff8\116\ufff8\117\ufff8\120\ufff8\121\ufff8\122" +
    "\ufff8\123\ufff8\124\ufff8\125\ufff8\126\ufff8\127\ufff8\130\ufff8" +
    "\131\ufff8\132\ufff8\133\ufff8\134\ufff8\135\ufff8\136\ufff8\137" +
    "\ufff8\001\002\000\004\067\351\001\002\000\072\003\ufff4" +
    "\066\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4\074\ufff4\075" +
    "\ufff4\076\ufff4\077\ufff4\116\ufff4\117\ufff4\120\ufff4\121\ufff4" +
    "\122\ufff4\123\ufff4\124\ufff4\125\ufff4\126\ufff4\127\ufff4\130" +
    "\ufff4\131\ufff4\132\ufff4\133\ufff4\134\ufff4\135\ufff4\136\ufff4" +
    "\137\ufff4\001\002\000\004\067\353\001\002\000\072\003" +
    "\uffe2\066\uffe2\070\uffe2\071\uffe2\072\uffe2\073\uffe2\074\uffe2" +
    "\075\uffe2\076\uffe2\077\uffe2\116\uffe2\117\uffe2\120\uffe2\121" +
    "\uffe2\122\uffe2\123\uffe2\124\uffe2\125\uffe2\126\uffe2\127\uffe2" +
    "\130\uffe2\131\uffe2\132\uffe2\133\uffe2\134\uffe2\135\uffe2\136" +
    "\uffe2\137\uffe2\001\002\000\004\067\355\001\002\000\072" +
    "\003\ufff7\066\ufff7\070\ufff7\071\ufff7\072\ufff7\073\ufff7\074" +
    "\ufff7\075\ufff7\076\ufff7\077\ufff7\116\ufff7\117\ufff7\120\ufff7" +
    "\121\ufff7\122\ufff7\123\ufff7\124\ufff7\125\ufff7\126\ufff7\127" +
    "\ufff7\130\ufff7\131\ufff7\132\ufff7\133\ufff7\134\ufff7\135\ufff7" +
    "\136\ufff7\137\ufff7\001\002\000\004\067\357\001\002\000" +
    "\072\003\ufff0\066\ufff0\070\ufff0\071\ufff0\072\ufff0\073\ufff0" +
    "\074\ufff0\075\ufff0\076\ufff0\077\ufff0\116\ufff0\117\ufff0\120" +
    "\ufff0\121\ufff0\122\ufff0\123\ufff0\124\ufff0\125\ufff0\126\ufff0" +
    "\127\ufff0\130\ufff0\131\ufff0\132\ufff0\133\ufff0\134\ufff0\135" +
    "\ufff0\136\ufff0\137\ufff0\001\002\000\004\067\361\001\002" +
    "\000\072\003\ufff5\066\ufff5\070\ufff5\071\ufff5\072\ufff5\073" +
    "\ufff5\074\ufff5\075\ufff5\076\ufff5\077\ufff5\116\ufff5\117\ufff5" +
    "\120\ufff5\121\ufff5\122\ufff5\123\ufff5\124\ufff5\125\ufff5\126" +
    "\ufff5\127\ufff5\130\ufff5\131\ufff5\132\ufff5\133\ufff5\134\ufff5" +
    "\135\ufff5\136\ufff5\137\ufff5\001\002\000\034\011\326\012" +
    "\325\013\321\014\316\015\324\016\314\017\320\020\322" +
    "\021\323\022\330\023\315\024\327\121\366\001\002\000" +
    "\072\003\275\066\362\070\227\071\211\072\233\073\234" +
    "\074\214\075\220\076\237\077\216\116\207\117\235\120" +
    "\204\121\215\122\223\123\213\124\221\125\206\126\231" +
    "\127\236\130\232\131\210\132\205\133\217\134\224\135" +
    "\226\136\225\137\212\001\002\000\072\003\uffc9\066\uffc9" +
    "\070\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076" +
    "\uffc9\077\uffc9\116\uffc9\117\uffc9\120\uffc9\121\uffc9\122\uffc9" +
    "\123\uffc9\124\uffc9\125\uffc9\126\uffc9\127\uffc9\130\uffc9\131" +
    "\uffc9\132\uffc9\133\uffc9\134\uffc9\135\uffc9\136\uffc9\137\uffc9" +
    "\001\002\000\072\003\uffca\066\uffca\070\uffca\071\uffca\072" +
    "\uffca\073\uffca\074\uffca\075\uffca\076\uffca\077\uffca\116\uffca" +
    "\117\uffca\120\uffca\121\uffca\122\uffca\123\uffca\124\uffca\125" +
    "\uffca\126\uffca\127\uffca\130\uffca\131\uffca\132\uffca\133\uffca" +
    "\134\uffca\135\uffca\136\uffca\137\uffca\001\002\000\004\016" +
    "\367\001\002\000\004\067\370\001\002\000\072\003\uffe4" +
    "\066\uffe4\070\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4\075" +
    "\uffe4\076\uffe4\077\uffe4\116\uffe4\117\uffe4\120\uffe4\121\uffe4" +
    "\122\uffe4\123\uffe4\124\uffe4\125\uffe4\126\uffe4\127\uffe4\130" +
    "\uffe4\131\uffe4\132\uffe4\133\uffe4\134\uffe4\135\uffe4\136\uffe4" +
    "\137\uffe4\001\002\000\034\011\326\012\325\013\321\014" +
    "\316\015\324\016\314\017\320\020\322\021\323\022\330" +
    "\023\315\024\327\121\375\001\002\000\072\003\275\066" +
    "\371\070\227\071\211\072\233\073\234\074\214\075\220" +
    "\076\237\077\216\116\207\117\235\120\204\121\215\122" +
    "\223\123\213\124\221\125\206\126\231\127\236\130\232" +
    "\131\210\132\205\133\217\134\224\135\226\136\225\137" +
    "\212\001\002\000\072\003\uffcf\066\uffcf\070\uffcf\071\uffcf" +
    "\072\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf\077\uffcf\116" +
    "\uffcf\117\uffcf\120\uffcf\121\uffcf\122\uffcf\123\uffcf\124\uffcf" +
    "\125\uffcf\126\uffcf\127\uffcf\130\uffcf\131\uffcf\132\uffcf\133" +
    "\uffcf\134\uffcf\135\uffcf\136\uffcf\137\uffcf\001\002\000\072" +
    "\003\uffd0\066\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074" +
    "\uffd0\075\uffd0\076\uffd0\077\uffd0\116\uffd0\117\uffd0\120\uffd0" +
    "\121\uffd0\122\uffd0\123\uffd0\124\uffd0\125\uffd0\126\uffd0\127" +
    "\uffd0\130\uffd0\131\uffd0\132\uffd0\133\uffd0\134\uffd0\135\uffd0" +
    "\136\uffd0\137\uffd0\001\002\000\004\013\376\001\002\000" +
    "\004\067\377\001\002\000\072\003\uffe7\066\uffe7\070\uffe7" +
    "\071\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7\076\uffe7\077" +
    "\uffe7\116\uffe7\117\uffe7\120\uffe7\121\uffe7\122\uffe7\123\uffe7" +
    "\124\uffe7\125\uffe7\126\uffe7\127\uffe7\130\uffe7\131\uffe7\132" +
    "\uffe7\133\uffe7\134\uffe7\135\uffe7\136\uffe7\137\uffe7\001\002" +
    "\000\010\066\uff86\077\uff86\101\uff86\001\002\000\004\122" +
    "\u01c1\001\002\000\004\066\u01bc\001\002\000\010\066\uff87" +
    "\077\u0104\101\u0101\001\002\000\004\122\u0105\001\002\000" +
    "\004\123\u0106\001\002\000\004\134\u0108\001\002\000\010" +
    "\066\uff76\077\uff76\101\uff76\001\002\000\040\003\u0119\046" +
    "\u0120\047\u010c\050\u0110\051\u010d\052\u0112\055\u010f\060\u0121" +
    "\062\u010b\075\u010e\100\u0113\113\u011a\114\u0109\115\u0117\135" +
    "\uff73\001\002\000\004\122\u01b9\001\002\000\042\003\uff6a" +
    "\046\uff6a\047\uff6a\050\uff6a\051\uff6a\052\uff6a\055\uff6a\060" +
    "\uff6a\062\uff6a\075\uff6a\100\uff6a\113\uff6a\114\uff6a\115\uff6a" +
    "\124\uff6a\135\uff6a\001\002\000\004\122\u01b4\001\002\000" +
    "\006\075\uff79\103\uff79\001\002\000\006\075\uff78\103\uff78" +
    "\001\002\000\030\074\uff7e\116\uff7e\117\uff7e\120\uff7e\121" +
    "\uff7e\123\uff7e\125\uff7e\126\uff7e\130\uff7e\131\uff7e\132\uff7e" +
    "\001\002\000\004\122\u01a2\001\002\000\006\075\uff77\103" +
    "\uff77\001\002\000\004\125\u01a1\001\002\000\006\075\uff7a" +
    "\103\uff7a\001\002\000\004\122\u019b\001\002\000\042\003" +
    "\uff71\046\uff71\047\uff71\050\uff71\051\uff71\052\uff71\055\uff71" +
    "\060\uff71\062\uff71\075\uff71\100\uff71\113\uff71\114\uff71\115" +
    "\uff71\124\uff71\135\uff71\001\002\000\042\003\u0119\046\u0120" +
    "\047\u010c\050\u0110\051\u010d\052\u0112\055\u010f\060\u0121\062" +
    "\u010b\075\u010e\100\u0113\113\u011a\114\u0109\115\u0117\124\uff72" +
    "\135\uff72\001\002\000\004\074\u0198\001\002\000\004\122" +
    "\u0196\001\002\000\006\075\u010e\103\u018d\001\002\000\042" +
    "\003\uff69\046\uff69\047\uff69\050\uff69\051\uff69\052\uff69\055" +
    "\uff69\060\uff69\062\uff69\075\uff69\100\uff69\113\uff69\114\uff69" +
    "\115\uff69\124\uff69\135\uff69\001\002\000\004\122\u0189\001" +
    "\002\000\042\003\uff6c\046\uff6c\047\uff6c\050\uff6c\051\uff6c" +
    "\052\uff6c\055\uff6c\060\uff6c\062\uff6c\075\uff6c\100\uff6c\113" +
    "\uff6c\114\uff6c\115\uff6c\124\uff6c\135\uff6c\001\002\000\004" +
    "\125\u0188\001\002\000\004\135\u0187\001\002\000\004\125" +
    "\u0186\001\002\000\042\003\uff6b\046\uff6b\047\uff6b\050\uff6b" +
    "\051\uff6b\052\uff6b\055\uff6b\060\uff6b\062\uff6b\075\uff6b\100" +
    "\uff6b\113\uff6b\114\uff6b\115\uff6b\124\uff6b\135\uff6b\001\002" +
    "\000\006\075\uff7b\103\uff7b\001\002\000\004\122\u0122\001" +
    "\002\000\006\046\u0123\075\u010e\001\002\000\004\075\u010e" +
    "\001\002\000\004\074\u0181\001\002\000\004\123\u0126\001" +
    "\002\000\004\061\u0127\001\002\000\004\122\u0128\001\002" +
    "\000\042\064\u012e\065\u013d\070\063\072\u0137\073\u013c\075" +
    "\u010e\102\u012c\104\u013f\105\u012a\106\u0133\107\u0129\110\u0143" +
    "\111\u0142\112\u013a\117\u013e\122\u0131\001\002\000\004\122" +
    "\u017e\001\002\000\004\122\u017b\001\002\000\012\123\uff42" +
    "\125\uff42\131\uff42\132\u0171\001\002\000\004\122\u0175\001" +
    "\002\000\024\116\uff2f\117\uff2f\120\uff2f\121\uff2f\123\uff2f" +
    "\125\uff2f\130\uff2f\131\uff2f\132\uff2f\001\002\000\024\116" +
    "\uff2e\117\uff2e\120\uff2e\121\uff2e\123\uff2e\125\uff2e\130\uff2e" +
    "\131\uff2e\132\uff2e\001\002\000\024\116\uff39\117\uff39\120" +
    "\uff39\121\uff39\123\uff39\125\uff39\130\uff39\131\uff39\132\uff39" +
    "\001\002\000\006\123\uff44\125\uff44\001\002\000\042\064" +
    "\u012e\065\u013d\070\063\072\u0137\073\u013c\075\u010e\102\u012c" +
    "\104\u013f\105\u012a\106\u0133\107\u0129\110\u0143\111\u0142\112" +
    "\u013a\117\u013e\122\u0131\001\002\000\010\123\uff43\125\uff43" +
    "\131\u016f\001\002\000\004\122\u016c\001\002\000\004\123" +
    "\u0159\001\002\000\024\116\uff35\117\uff35\120\uff35\121\uff35" +
    "\123\uff35\125\uff35\130\uff35\131\uff35\132\uff35\001\002\000" +
    "\024\116\uff36\117\uff36\120\uff36\121\uff36\123\uff36\125\uff36" +
    "\130\uff36\131\uff36\132\uff36\001\002\000\024\116\uff30\117" +
    "\uff30\120\uff30\121\uff30\123\uff30\125\uff30\130\uff30\131\uff30" +
    "\132\uff30\001\002\000\020\116\u0155\117\u0156\123\uff3e\125" +
    "\uff3e\130\uff3e\131\uff3e\132\uff3e\001\002\000\014\123\uff40" +
    "\125\uff40\130\u0153\131\uff40\132\uff40\001\002\000\004\122" +
    "\u0151\001\002\000\024\116\uff34\117\uff34\120\uff34\121\uff34" +
    "\123\uff34\125\uff34\130\uff34\131\uff34\132\uff34\001\002\000" +
    "\024\116\uff2b\117\uff2b\120\uff2b\121\uff2b\123\uff2b\125\uff2b" +
    "\130\uff2b\131\uff2b\132\uff2b\001\002\000\024\116\uff2d\117" +
    "\uff2d\120\uff2d\121\uff2d\123\uff2d\125\uff2d\130\uff2d\131\uff2d" +
    "\132\uff2d\001\002\000\042\064\u012e\065\u013d\070\063\072" +
    "\u0137\073\u013c\075\u010e\102\u012c\104\u013f\105\u012a\106\u0133" +
    "\107\u0129\110\u0143\111\u0142\112\u013a\117\u013e\122\u0131\001" +
    "\002\000\004\122\u014d\001\002\000\024\116\uff3c\117\uff3c" +
    "\120\u014a\121\u0149\123\uff3c\125\uff3c\130\uff3c\131\uff3c\132" +
    "\uff3c\001\002\000\024\116\uff31\117\uff31\120\uff31\121\uff31" +
    "\123\uff31\125\uff31\130\uff31\131\uff31\132\uff31\001\002\000" +
    "\004\122\u0147\001\002\000\004\122\u0144\001\002\000\042" +
    "\064\u012e\065\u013d\070\063\072\u0137\073\u013c\075\u010e\102" +
    "\u012c\104\u013f\105\u012a\106\u0133\107\u0129\110\u0143\111\u0142" +
    "\112\u013a\117\u013e\122\u0131\001\002\000\004\123\u0146\001" +
    "\002\000\024\116\uff60\117\uff60\120\uff60\121\uff60\123\uff60" +
    "\125\uff60\130\uff60\131\uff60\132\uff60\001\002\000\004\123" +
    "\u0148\001\002\000\024\116\uff5f\117\uff5f\120\uff5f\121\uff5f" +
    "\123\uff5f\125\uff5f\130\uff5f\131\uff5f\132\uff5f\001\002\000" +
    "\042\064\u012e\065\u013d\070\063\072\u0137\073\u013c\075\u010e" +
    "\102\u012c\104\u013f\105\u012a\106\u0133\107\u0129\110\u0143\111" +
    "\u0142\112\u013a\117\u013e\122\u0131\001\002\000\042\064\u012e" +
    "\065\u013d\070\063\072\u0137\073\u013c\075\u010e\102\u012c\104" +
    "\u013f\105\u012a\106\u0133\107\u0129\110\u0143\111\u0142\112\u013a" +
    "\117\u013e\122\u0131\001\002\000\024\116\uff38\117\uff38\120" +
    "\uff38\121\uff38\123\uff38\125\uff38\130\uff38\131\uff38\132\uff38" +
    "\001\002\000\024\116\uff37\117\uff37\120\uff37\121\uff37\123" +
    "\uff37\125\uff37\130\uff37\131\uff37\132\uff37\001\002\000\042" +
    "\064\u012e\065\u013d\070\063\072\u0137\073\u013c\075\u010e\102" +
    "\u012c\104\u013f\105\u012a\106\u0133\107\u0129\110\u0143\111\u0142" +
    "\112\u013a\117\u013e\122\u0131\001\002\000\004\123\u014f\001" +
    "\002\000\024\116\uff64\117\uff64\120\uff64\121\uff64\123\uff64" +
    "\125\uff64\130\uff64\131\uff64\132\uff64\001\002\000\024\116" +
    "\uff33\117\uff33\120\uff33\121\uff33\123\uff33\125\uff33\130\uff33" +
    "\131\uff33\132\uff33\001\002\000\004\123\u0152\001\002\000" +
    "\024\116\uff5e\117\uff5e\120\uff5e\121\uff5e\123\uff5e\125\uff5e" +
    "\130\uff5e\131\uff5e\132\uff5e\001\002\000\042\064\u012e\065" +
    "\u013d\070\063\072\u0137\073\u013c\075\u010e\102\u012c\104\u013f" +
    "\105\u012a\106\u0133\107\u0129\110\u0143\111\u0142\112\u013a\117" +
    "\u013e\122\u0131\001\002\000\020\116\u0155\117\u0156\123\uff3d" +
    "\125\uff3d\130\uff3d\131\uff3d\132\uff3d\001\002\000\042\064" +
    "\u012e\065\u013d\070\063\072\u0137\073\u013c\075\u010e\102\u012c" +
    "\104\u013f\105\u012a\106\u0133\107\u0129\110\u0143\111\u0142\112" +
    "\u013a\117\u013e\122\u0131\001\002\000\042\064\u012e\065\u013d" +
    "\070\063\072\u0137\073\u013c\075\u010e\102\u012c\104\u013f\105" +
    "\u012a\106\u0133\107\u0129\110\u0143\111\u0142\112\u013a\117\u013e" +
    "\122\u0131\001\002\000\024\116\uff3a\117\uff3a\120\u014a\121" +
    "\u0149\123\uff3a\125\uff3a\130\uff3a\131\uff3a\132\uff3a\001\002" +
    "\000\024\116\uff3b\117\uff3b\120\u014a\121\u0149\123\uff3b\125" +
    "\uff3b\130\uff3b\131\uff3b\132\uff3b\001\002\000\030\046\u0120" +
    "\047\u010c\050\u0110\051\u010d\052\u0112\053\u015a\075\u010e\100" +
    "\u0113\113\u011a\114\u0109\115\u0117\001\002\000\004\136\u016a" +
    "\001\002\000\042\003\uff48\046\uff48\047\uff48\050\uff48\051" +
    "\uff48\052\uff48\055\uff48\060\uff48\062\uff48\075\uff48\100\uff48" +
    "\113\uff48\114\uff48\115\uff48\124\uff48\135\uff48\001\002\000" +
    "\004\125\u0169\001\002\000\044\003\uff55\046\uff55\047\uff55" +
    "\050\uff55\051\uff55\052\uff55\055\uff55\057\uff55\060\uff55\062" +
    "\uff55\075\uff55\100\uff55\113\uff55\114\uff55\115\uff55\124\uff55" +
    "\135\uff55\001\002\000\044\003\uff54\046\uff54\047\uff54\050" +
    "\uff54\051\uff54\052\uff54\055\uff54\057\uff54\060\uff54\062\uff54" +
    "\075\uff54\100\uff54\113\uff54\114\uff54\115\uff54\124\uff54\135" +
    "\uff54\001\002\000\040\003\u0119\046\u0120\047\u010c\050\u0110" +
    "\051\u010d\052\u0112\055\u010f\060\u0121\062\u010b\075\u010e\100" +
    "\u0113\113\u011a\114\u0109\115\u0117\124\uff73\001\002\000\004" +
    "\125\u0163\001\002\000\004\125\u0162\001\002\000\044\003" +
    "\uff53\046\uff53\047\uff53\050\uff53\051\uff53\052\uff53\055\uff53" +
    "\057\uff53\060\uff53\062\uff53\075\uff53\100\uff53\113\uff53\114" +
    "\uff53\115\uff53\124\uff53\135\uff53\001\002\000\044\003\uff52" +
    "\046\uff52\047\uff52\050\uff52\051\uff52\052\uff52\055\uff52\057" +
    "\uff52\060\uff52\062\uff52\075\uff52\100\uff52\113\uff52\114\uff52" +
    "\115\uff52\124\uff52\135\uff52\001\002\000\004\124\u0165\001" +
    "\002\000\004\137\u0167\001\002\000\044\003\uff56\046\uff56" +
    "\047\uff56\050\uff56\051\uff56\052\uff56\055\uff56\057\uff56\060" +
    "\uff56\062\uff56\075\uff56\100\uff56\113\uff56\114\uff56\115\uff56" +
    "\124\uff56\135\uff56\001\002\000\004\054\u0168\001\002\000" +
    "\044\003\uff57\046\uff57\047\uff57\050\uff57\051\uff57\052\uff57" +
    "\055\uff57\057\uff57\060\uff57\062\uff57\075\uff57\100\uff57\113" +
    "\uff57\114\uff57\115\uff57\124\uff57\135\uff57\001\002\000\044" +
    "\003\uff51\046\uff51\047\uff51\050\uff51\051\uff51\052\uff51\055" +
    "\uff51\057\uff51\060\uff51\062\uff51\075\uff51\100\uff51\113\uff51" +
    "\114\uff51\115\uff51\124\uff51\135\uff51\001\002\000\004\124" +
    "\u016b\001\002\000\040\003\uff58\046\uff58\047\uff58\050\uff58" +
    "\051\uff58\052\uff58\055\uff58\060\uff58\062\uff58\075\uff58\100" +
    "\uff58\113\uff58\114\uff58\115\uff58\124\uff58\001\002\000\042" +
    "\064\u012e\065\u013d\070\063\072\u0137\073\u013c\075\u010e\102" +
    "\u012c\104\u013f\105\u012a\106\u0133\107\u0129\110\u0143\111\u0142" +
    "\112\u013a\117\u013e\122\u0131\001\002\000\004\123\u016e\001" +
    "\002\000\024\116\uff62\117\uff62\120\uff62\121\uff62\123\uff62" +
    "\125\uff62\130\uff62\131\uff62\132\uff62\001\002\000\042\064" +
    "\u012e\065\u013d\070\063\072\u0137\073\u013c\075\u010e\102\u012c" +
    "\104\u013f\105\u012a\106\u0133\107\u0129\110\u0143\111\u0142\112" +
    "\u013a\117\u013e\122\u0131\001\002\000\012\123\uff41\125\uff41" +
    "\131\uff41\132\u0171\001\002\000\042\064\u012e\065\u013d\070" +
    "\063\072\u0137\073\u013c\075\u010e\102\u012c\104\u013f\105\u012a" +
    "\106\u0133\107\u0129\110\u0143\111\u0142\112\u013a\117\u013e\122" +
    "\u0131\001\002\000\014\123\uff3f\125\uff3f\130\u0153\131\uff3f" +
    "\132\uff3f\001\002\000\004\123\u0174\001\002\000\024\116" +
    "\uff32\117\uff32\120\uff32\121\uff32\123\uff32\125\uff32\130\uff32" +
    "\131\uff32\132\uff32\001\002\000\006\071\u0178\075\u010e\001" +
    "\002\000\006\123\uff5a\126\uff5a\001\002\000\006\123\uff59" +
    "\126\uff59\001\002\000\006\123\uff2a\126\uff2a\001\002\000" +
    "\004\123\u017a\001\002\000\024\116\uff5d\117\uff5d\120\uff5d" +
    "\121\uff5d\123\uff5d\125\uff5d\130\uff5d\131\uff5d\132\uff5d\001" +
    "\002\000\042\064\u012e\065\u013d\070\063\072\u0137\073\u013c" +
    "\075\u010e\102\u012c\104\u013f\105\u012a\106\u0133\107\u0129\110" +
    "\u0143\111\u0142\112\u013a\117\u013e\122\u0131\001\002\000\004" +
    "\123\u017d\001\002\000\024\116\uff63\117\uff63\120\uff63\121" +
    "\uff63\123\uff63\125\uff63\130\uff63\131\uff63\132\uff63\001\002" +
    "\000\042\064\u012e\065\u013d\070\063\072\u0137\073\u013c\075" +
    "\u010e\102\u012c\104\u013f\105\u012a\106\u0133\107\u0129\110\u0143" +
    "\111\u0142\112\u013a\117\u013e\122\u0131\001\002\000\004\123" +
    "\u0180\001\002\000\024\116\uff61\117\uff61\120\uff61\121\uff61" +
    "\123\uff61\125\uff61\130\uff61\131\uff61\132\uff61\001\002\000" +
    "\042\064\u012e\065\u013d\070\063\072\u0137\073\u013c\075\u010e" +
    "\102\u012c\104\u013f\105\u012a\106\u0133\107\u0129\110\u0143\111" +
    "\u0142\112\u013a\117\u013e\122\u0131\001\002\000\004\123\uff46" +
    "\001\002\000\004\074\u0184\001\002\000\042\064\u012e\065" +
    "\u013d\070\063\072\u0137\073\u013c\075\u010e\102\u012c\104\u013f" +
    "\105\u012a\106\u0133\107\u0129\110\u0143\111\u0142\112\u013a\117" +
    "\u013e\122\u0131\001\002\000\004\123\uff47\001\002\000\042" +
    "\003\uff6f\046\uff6f\047\uff6f\050\uff6f\051\uff6f\052\uff6f\055" +
    "\uff6f\060\uff6f\062\uff6f\075\uff6f\100\uff6f\113\uff6f\114\uff6f" +
    "\115\uff6f\124\uff6f\135\uff6f\001\002\000\010\066\uff74\077" +
    "\uff74\101\uff74\001\002\000\042\003\uff6e\046\uff6e\047\uff6e" +
    "\050\uff6e\051\uff6e\052\uff6e\055\uff6e\060\uff6e\062\uff6e\075" +
    "\uff6e\100\uff6e\113\uff6e\114\uff6e\115\uff6e\124\uff6e\135\uff6e" +
    "\001\002\000\042\064\u012e\065\u013d\070\063\072\u0137\073" +
    "\u013c\075\u010e\102\u012c\104\u013f\105\u012a\106\u0133\107\u0129" +
    "\110\u0143\111\u0142\112\u013a\117\u013e\122\u0131\001\002\000" +
    "\004\123\u018b\001\002\000\004\125\uff68\001\002\000\010" +
    "\074\uff80\125\uff82\126\uff80\001\002\000\004\075\u010e\001" +
    "\002\000\004\125\uff83\001\002\000\006\074\u0192\126\u0191" +
    "\001\002\000\004\125\uff81\001\002\000\004\075\u010e\001" +
    "\002\000\042\064\u012e\065\u013d\070\063\072\u0137\073\u013c" +
    "\075\u010e\102\u012c\104\u013f\105\u012a\106\u0133\107\u0129\110" +
    "\u0143\111\u0142\112\u013a\117\u013e\122\u0131\001\002\000\004" +
    "\125\uff7d\001\002\000\006\074\uff7f\126\uff7f\001\002\000" +
    "\004\125\uff84\001\002\000\004\123\u0197\001\002\000\004" +
    "\125\uff66\001\002\000\042\064\u012e\065\u013d\070\063\072" +
    "\u0137\073\u013c\075\u010e\102\u012c\104\u013f\105\u012a\106\u0133" +
    "\107\u0129\110\u0143\111\u0142\112\u013a\117\u013e\122\u0131\001" +
    "\002\000\004\125\uff7c\001\002\000\042\003\uff70\046\uff70" +
    "\047\uff70\050\uff70\051\uff70\052\uff70\055\uff70\060\uff70\062" +
    "\uff70\075\uff70\100\uff70\113\uff70\114\uff70\115\uff70\124\uff70" +
    "\135\uff70\001\002\000\006\071\u0178\075\u010e\001\002\000" +
    "\006\123\uff5c\126\uff5c\001\002\000\006\123\u019f\126\u019e" +
    "\001\002\000\006\071\u0178\075\u010e\001\002\000\004\125" +
    "\uff65\001\002\000\006\123\uff5b\126\uff5b\001\002\000\042" +
    "\003\uff6d\046\uff6d\047\uff6d\050\uff6d\051\uff6d\052\uff6d\055" +
    "\uff6d\060\uff6d\062\uff6d\075\uff6d\100\uff6d\113\uff6d\114\uff6d" +
    "\115\uff6d\124\uff6d\135\uff6d\001\002\000\042\064\u012e\065" +
    "\u013d\070\063\072\u0137\073\u013c\075\u010e\102\u012c\104\u013f" +
    "\105\u012a\106\u0133\107\u0129\110\u0143\111\u0142\112\u013a\117" +
    "\u013e\122\u0131\001\002\000\004\123\u01a4\001\002\000\004" +
    "\056\u01a5\001\002\000\030\046\u0120\047\u010c\050\u0110\051" +
    "\u010d\052\u0112\053\u015a\075\u010e\100\u0113\113\u011a\114\u0109" +
    "\115\u0117\001\002\000\044\003\uff50\046\uff50\047\uff50\050" +
    "\uff50\051\uff50\052\uff50\055\uff50\057\u01a8\060\uff50\062\uff50" +
    "\075\uff50\100\uff50\113\uff50\114\uff50\115\uff50\124\uff50\135" +
    "\uff50\001\002\000\042\003\uff4e\046\uff4e\047\uff4e\050\uff4e" +
    "\051\uff4e\052\uff4e\055\uff4e\060\uff4e\062\uff4e\075\uff4e\100" +
    "\uff4e\113\uff4e\114\uff4e\115\uff4e\124\uff4e\135\uff4e\001\002" +
    "\000\032\046\u0120\047\u010c\050\u0110\051\u010d\052\u0112\053" +
    "\u015a\055\u01ad\075\u010e\100\u0113\113\u011a\114\u0109\115\u0117" +
    "\001\002\000\044\003\uff4f\046\uff4f\047\uff4f\050\uff4f\051" +
    "\uff4f\052\uff4f\055\uff4f\057\u01a8\060\uff4f\062\uff4f\075\uff4f" +
    "\100\uff4f\113\uff4f\114\uff4f\115\uff4f\124\uff4f\135\uff4f\001" +
    "\002\000\044\003\uff4c\046\uff4c\047\uff4c\050\uff4c\051\uff4c" +
    "\052\uff4c\055\uff4c\057\uff4c\060\uff4c\062\uff4c\075\uff4c\100" +
    "\uff4c\113\uff4c\114\uff4c\115\uff4c\124\uff4c\135\uff4c\001\002" +
    "\000\042\003\uff4d\046\uff4d\047\uff4d\050\uff4d\051\uff4d\052" +
    "\uff4d\055\uff4d\060\uff4d\062\uff4d\075\uff4d\100\uff4d\113\uff4d" +
    "\114\uff4d\115\uff4d\124\uff4d\135\uff4d\001\002\000\044\003" +
    "\uff4b\046\uff4b\047\uff4b\050\uff4b\051\uff4b\052\uff4b\055\uff4b" +
    "\057\uff4b\060\uff4b\062\uff4b\075\uff4b\100\uff4b\113\uff4b\114" +
    "\uff4b\115\uff4b\124\uff4b\135\uff4b\001\002\000\004\122\u01af" +
    "\001\002\000\042\003\uff49\046\uff49\047\uff49\050\uff49\051" +
    "\uff49\052\uff49\055\uff49\060\uff49\062\uff49\075\uff49\100\uff49" +
    "\113\uff49\114\uff49\115\uff49\124\uff49\135\uff49\001\002\000" +
    "\042\064\u012e\065\u013d\070\063\072\u0137\073\u013c\075\u010e" +
    "\102\u012c\104\u013f\105\u012a\106\u0133\107\u0129\110\u0143\111" +
    "\u0142\112\u013a\117\u013e\122\u0131\001\002\000\004\123\u01b1" +
    "\001\002\000\004\056\u01b2\001\002\000\030\046\u0120\047" +
    "\u010c\050\u0110\051\u010d\052\u0112\053\u015a\075\u010e\100\u0113" +
    "\113\u011a\114\u0109\115\u0117\001\002\000\044\003\uff4a\046" +
    "\uff4a\047\uff4a\050\uff4a\051\uff4a\052\uff4a\055\uff4a\057\uff4a" +
    "\060\uff4a\062\uff4a\075\uff4a\100\uff4a\113\uff4a\114\uff4a\115" +
    "\uff4a\124\uff4a\135\uff4a\001\002\000\042\064\u012e\065\u013d" +
    "\070\063\072\u0137\073\u013c\075\u010e\102\u012c\104\u013f\105" +
    "\u012a\106\u0133\107\u0129\110\u0143\111\u0142\112\u013a\117\u013e" +
    "\122\u0131\001\002\000\004\123\u01b6\001\002\000\004\063" +
    "\u01b7\001\002\000\030\046\u0120\047\u010c\050\u0110\051\u010d" +
    "\052\u0112\053\u015a\075\u010e\100\u0113\113\u011a\114\u0109\115" +
    "\u0117\001\002\000\042\003\uff45\046\uff45\047\uff45\050\uff45" +
    "\051\uff45\052\uff45\055\uff45\060\uff45\062\uff45\075\uff45\100" +
    "\uff45\113\uff45\114\uff45\115\uff45\124\uff45\135\uff45\001\002" +
    "\000\004\123\u01ba\001\002\000\004\125\uff67\001\002\000" +
    "\010\066\uff85\077\uff85\101\uff85\001\002\000\004\121\u01be" +
    "\001\002\000\072\003\uffbf\066\uffbf\070\uffbf\071\uffbf\072" +
    "\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf\116\uffbf" +
    "\117\uffbf\120\uffbf\121\uffbf\122\uffbf\123\uffbf\124\uffbf\125" +
    "\uffbf\126\uffbf\127\uffbf\130\uffbf\131\uffbf\132\uffbf\133\uffbf" +
    "\134\uffbf\135\uffbf\136\uffbf\137\uffbf\001\002\000\004\024" +
    "\u01bf\001\002\000\004\067\u01c0\001\002\000\072\003\uffdf" +
    "\066\uffdf\070\uffdf\071\uffdf\072\uffdf\073\uffdf\074\uffdf\075" +
    "\uffdf\076\uffdf\077\uffdf\116\uffdf\117\uffdf\120\uffdf\121\uffdf" +
    "\122\uffdf\123\uffdf\124\uffdf\125\uffdf\126\uffdf\127\uffdf\130" +
    "\uffdf\131\uffdf\132\uffdf\133\uffdf\134\uffdf\135\uffdf\136\uffdf" +
    "\137\uffdf\001\002\000\004\123\u01c2\001\002\000\004\134" +
    "\u0108\001\002\000\010\066\uff75\077\uff75\101\uff75\001\002" +
    "\000\072\003\uffd3\066\uffd3\070\uffd3\071\uffd3\072\uffd3\073" +
    "\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\116\uffd3\117\uffd3" +
    "\120\uffd3\121\uffd3\122\uffd3\123\uffd3\124\uffd3\125\uffd3\126" +
    "\uffd3\127\uffd3\130\uffd3\131\uffd3\132\uffd3\133\uffd3\134\uffd3" +
    "\135\uffd3\136\uffd3\137\uffd3\001\002\000\034\011\326\012" +
    "\325\013\321\014\316\015\324\016\314\017\320\020\322" +
    "\021\323\022\330\023\315\024\327\121\u01c8\001\002\000" +
    "\072\003\275\066\u01c5\070\227\071\211\072\233\073\234" +
    "\074\214\075\220\076\237\077\216\116\207\117\235\120" +
    "\204\121\215\122\223\123\213\124\221\125\206\126\231" +
    "\127\236\130\232\131\210\132\205\133\217\134\224\135" +
    "\226\136\225\137\212\001\002\000\072\003\uffd4\066\uffd4" +
    "\070\uffd4\071\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\076" +
    "\uffd4\077\uffd4\116\uffd4\117\uffd4\120\uffd4\121\uffd4\122\uffd4" +
    "\123\uffd4\124\uffd4\125\uffd4\126\uffd4\127\uffd4\130\uffd4\131" +
    "\uffd4\132\uffd4\133\uffd4\134\uffd4\135\uffd4\136\uffd4\137\uffd4" +
    "\001\002\000\004\011\u01c9\001\002\000\004\067\u01ca\001" +
    "\002\000\072\003\uffe9\066\uffe9\070\uffe9\071\uffe9\072\uffe9" +
    "\073\uffe9\074\uffe9\075\uffe9\076\uffe9\077\uffe9\116\uffe9\117" +
    "\uffe9\120\uffe9\121\uffe9\122\uffe9\123\uffe9\124\uffe9\125\uffe9" +
    "\126\uffe9\127\uffe9\130\uffe9\131\uffe9\132\uffe9\133\uffe9\134" +
    "\uffe9\135\uffe9\136\uffe9\137\uffe9\001\002\000\004\066\uffd6" +
    "\001\002\000\034\011\326\012\325\013\321\014\316\015" +
    "\324\016\314\017\320\020\322\021\323\022\330\023\315" +
    "\024\327\121\u01d0\001\002\000\072\003\275\066\u01cc\070" +
    "\227\071\211\072\233\073\234\074\214\075\220\076\237" +
    "\077\216\116\207\117\235\120\204\121\215\122\223\123" +
    "\213\124\221\125\206\126\231\127\236\130\232\131\210" +
    "\132\205\133\217\134\224\135\226\136\225\137\212\001" +
    "\002\000\072\003\uffcd\066\uffcd\070\uffcd\071\uffcd\072\uffcd" +
    "\073\uffcd\074\uffcd\075\uffcd\076\uffcd\077\uffcd\116\uffcd\117" +
    "\uffcd\120\uffcd\121\uffcd\122\uffcd\123\uffcd\124\uffcd\125\uffcd" +
    "\126\uffcd\127\uffcd\130\uffcd\131\uffcd\132\uffcd\133\uffcd\134" +
    "\uffcd\135\uffcd\136\uffcd\137\uffcd\001\002\000\072\003\uffce" +
    "\066\uffce\070\uffce\071\uffce\072\uffce\073\uffce\074\uffce\075" +
    "\uffce\076\uffce\077\uffce\116\uffce\117\uffce\120\uffce\121\uffce" +
    "\122\uffce\123\uffce\124\uffce\125\uffce\126\uffce\127\uffce\130" +
    "\uffce\131\uffce\132\uffce\133\uffce\134\uffce\135\uffce\136\uffce" +
    "\137\uffce\001\002\000\004\014\u01d1\001\002\000\004\067" +
    "\u01d2\001\002\000\072\003\uffe6\066\uffe6\070\uffe6\071\uffe6" +
    "\072\uffe6\073\uffe6\074\uffe6\075\uffe6\076\uffe6\077\uffe6\116" +
    "\uffe6\117\uffe6\120\uffe6\121\uffe6\122\uffe6\123\uffe6\124\uffe6" +
    "\125\uffe6\126\uffe6\127\uffe6\130\uffe6\131\uffe6\132\uffe6\133" +
    "\uffe6\134\uffe6\135\uffe6\136\uffe6\137\uffe6\001\002\000\034" +
    "\011\326\012\325\013\321\014\316\015\324\016\314\017" +
    "\320\020\322\021\323\022\330\023\315\024\327\121\u01d7" +
    "\001\002\000\072\003\uffcb\066\uffcb\070\uffcb\071\uffcb\072" +
    "\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb\116\uffcb" +
    "\117\uffcb\120\uffcb\121\uffcb\122\uffcb\123\uffcb\124\uffcb\125" +
    "\uffcb\126\uffcb\127\uffcb\130\uffcb\131\uffcb\132\uffcb\133\uffcb" +
    "\134\uffcb\135\uffcb\136\uffcb\137\uffcb\001\002\000\072\003" +
    "\275\066\u01d3\070\227\071\211\072\233\073\234\074\214" +
    "\075\220\076\237\077\216\116\207\117\235\120\204\121" +
    "\215\122\223\123\213\124\221\125\206\126\231\127\236" +
    "\130\232\131\210\132\205\133\217\134\224\135\226\136" +
    "\225\137\212\001\002\000\072\003\uffcc\066\uffcc\070\uffcc" +
    "\071\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc\077" +
    "\uffcc\116\uffcc\117\uffcc\120\uffcc\121\uffcc\122\uffcc\123\uffcc" +
    "\124\uffcc\125\uffcc\126\uffcc\127\uffcc\130\uffcc\131\uffcc\132" +
    "\uffcc\133\uffcc\134\uffcc\135\uffcc\136\uffcc\137\uffcc\001\002" +
    "\000\004\015\u01d8\001\002\000\004\067\u01d9\001\002\000" +
    "\072\003\uffe5\066\uffe5\070\uffe5\071\uffe5\072\uffe5\073\uffe5" +
    "\074\uffe5\075\uffe5\076\uffe5\077\uffe5\116\uffe5\117\uffe5\120" +
    "\uffe5\121\uffe5\122\uffe5\123\uffe5\124\uffe5\125\uffe5\126\uffe5" +
    "\127\uffe5\130\uffe5\131\uffe5\132\uffe5\133\uffe5\134\uffe5\135" +
    "\uffe5\136\uffe5\137\uffe5\001\002\000\004\010\u01db\001\002" +
    "\000\004\067\u01dc\001\002\000\004\066\uffec\001\002\000" +
    "\034\011\326\012\325\013\321\014\316\015\324\016\314" +
    "\017\320\020\322\021\323\022\330\023\315\024\327\121" +
    "\u01e1\001\002\000\072\003\275\066\u01dd\070\227\071\211" +
    "\072\233\073\234\074\214\075\220\076\237\077\216\116" +
    "\207\117\235\120\204\121\215\122\223\123\213\124\221" +
    "\125\206\126\231\127\236\130\232\131\210\132\205\133" +
    "\217\134\224\135\226\136\225\137\212\001\002\000\072" +
    "\003\uffc0\066\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074" +
    "\uffc0\075\uffc0\076\uffc0\077\uffc0\116\uffc0\117\uffc0\120\uffc0" +
    "\121\uffc0\122\uffc0\123\uffc0\124\uffc0\125\uffc0\126\uffc0\127" +
    "\uffc0\130\uffc0\131\uffc0\132\uffc0\133\uffc0\134\uffc0\135\uffc0" +
    "\136\uffc0\137\uffc0\001\002\000\072\003\uffc1\066\uffc1\070" +
    "\uffc1\071\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1" +
    "\077\uffc1\116\uffc1\117\uffc1\120\uffc1\121\uffc1\122\uffc1\123" +
    "\uffc1\124\uffc1\125\uffc1\126\uffc1\127\uffc1\130\uffc1\131\uffc1" +
    "\132\uffc1\133\uffc1\134\uffc1\135\uffc1\136\uffc1\137\uffc1\001" +
    "\002\000\004\023\u01e2\001\002\000\004\067\u01e3\001\002" +
    "\000\072\003\uffe0\066\uffe0\070\uffe0\071\uffe0\072\uffe0\073" +
    "\uffe0\074\uffe0\075\uffe0\076\uffe0\077\uffe0\116\uffe0\117\uffe0" +
    "\120\uffe0\121\uffe0\122\uffe0\123\uffe0\124\uffe0\125\uffe0\126" +
    "\uffe0\127\uffe0\130\uffe0\131\uffe0\132\uffe0\133\uffe0\134\uffe0" +
    "\135\uffe0\136\uffe0\137\uffe0\001\002\000\034\011\326\012" +
    "\325\013\321\014\316\015\324\016\314\017\320\020\322" +
    "\021\323\022\330\023\315\024\327\121\u01e8\001\002\000" +
    "\072\003\275\066\u01e4\070\227\071\211\072\233\073\234" +
    "\074\214\075\220\076\237\077\216\116\207\117\235\120" +
    "\204\121\215\122\223\123\213\124\221\125\206\126\231" +
    "\127\236\130\232\131\210\132\205\133\217\134\224\135" +
    "\226\136\225\137\212\001\002\000\072\003\uffc7\066\uffc7" +
    "\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7\076" +
    "\uffc7\077\uffc7\116\uffc7\117\uffc7\120\uffc7\121\uffc7\122\uffc7" +
    "\123\uffc7\124\uffc7\125\uffc7\126\uffc7\127\uffc7\130\uffc7\131" +
    "\uffc7\132\uffc7\133\uffc7\134\uffc7\135\uffc7\136\uffc7\137\uffc7" +
    "\001\002\000\072\003\uffc8\066\uffc8\070\uffc8\071\uffc8\072" +
    "\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8\116\uffc8" +
    "\117\uffc8\120\uffc8\121\uffc8\122\uffc8\123\uffc8\124\uffc8\125" +
    "\uffc8\126\uffc8\127\uffc8\130\uffc8\131\uffc8\132\uffc8\133\uffc8" +
    "\134\uffc8\135\uffc8\136\uffc8\137\uffc8\001\002\000\004\017" +
    "\u01e9\001\002\000\004\067\u01ea\001\002\000\072\003\uffe3" +
    "\066\uffe3\070\uffe3\071\uffe3\072\uffe3\073\uffe3\074\uffe3\075" +
    "\uffe3\076\uffe3\077\uffe3\116\uffe3\117\uffe3\120\uffe3\121\uffe3" +
    "\122\uffe3\123\uffe3\124\uffe3\125\uffe3\126\uffe3\127\uffe3\130" +
    "\uffe3\131\uffe3\132\uffe3\133\uffe3\134\uffe3\135\uffe3\136\uffe3" +
    "\137\uffe3\001\002\000\034\011\326\012\325\013\321\014" +
    "\316\015\324\016\314\017\320\020\322\021\323\022\330" +
    "\023\315\024\327\121\u01ef\001\002\000\072\003\275\066" +
    "\u01eb\070\227\071\211\072\233\073\234\074\214\075\220" +
    "\076\237\077\216\116\207\117\235\120\204\121\215\122" +
    "\223\123\213\124\221\125\206\126\231\127\236\130\232" +
    "\131\210\132\205\133\217\134\224\135\226\136\225\137" +
    "\212\001\002\000\072\003\uffc2\066\uffc2\070\uffc2\071\uffc2" +
    "\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2\116" +
    "\uffc2\117\uffc2\120\uffc2\121\uffc2\122\uffc2\123\uffc2\124\uffc2" +
    "\125\uffc2\126\uffc2\127\uffc2\130\uffc2\131\uffc2\132\uffc2\133" +
    "\uffc2\134\uffc2\135\uffc2\136\uffc2\137\uffc2\001\002\000\072" +
    "\003\uffc3\066\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074" +
    "\uffc3\075\uffc3\076\uffc3\077\uffc3\116\uffc3\117\uffc3\120\uffc3" +
    "\121\uffc3\122\uffc3\123\uffc3\124\uffc3\125\uffc3\126\uffc3\127" +
    "\uffc3\130\uffc3\131\uffc3\132\uffc3\133\uffc3\134\uffc3\135\uffc3" +
    "\136\uffc3\137\uffc3\001\002\000\004\022\u01f0\001\002\000" +
    "\004\067\u01f1\001\002\000\072\003\uffe1\066\uffe1\070\uffe1" +
    "\071\uffe1\072\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1\077" +
    "\uffe1\116\uffe1\117\uffe1\120\uffe1\121\uffe1\122\uffe1\123\uffe1" +
    "\124\uffe1\125\uffe1\126\uffe1\127\uffe1\130\uffe1\131\uffe1\132" +
    "\uffe1\133\uffe1\134\uffe1\135\uffe1\136\uffe1\137\uffe1\001\002" +
    "\000\072\003\uffd1\066\uffd1\070\uffd1\071\uffd1\072\uffd1\073" +
    "\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\116\uffd1\117\uffd1" +
    "\120\uffd1\121\uffd1\122\uffd1\123\uffd1\124\uffd1\125\uffd1\126" +
    "\uffd1\127\uffd1\130\uffd1\131\uffd1\132\uffd1\133\uffd1\134\uffd1" +
    "\135\uffd1\136\uffd1\137\uffd1\001\002\000\034\011\326\012" +
    "\325\013\321\014\316\015\324\016\314\017\320\020\322" +
    "\021\323\022\330\023\315\024\327\121\u01f6\001\002\000" +
    "\072\003\275\066\u01f3\070\227\071\211\072\233\073\234" +
    "\074\214\075\220\076\237\077\216\116\207\117\235\120" +
    "\204\121\215\122\223\123\213\124\221\125\206\126\231" +
    "\127\236\130\232\131\210\132\205\133\217\134\224\135" +
    "\226\136\225\137\212\001\002\000\072\003\uffd2\066\uffd2" +
    "\070\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2\076" +
    "\uffd2\077\uffd2\116\uffd2\117\uffd2\120\uffd2\121\uffd2\122\uffd2" +
    "\123\uffd2\124\uffd2\125\uffd2\126\uffd2\127\uffd2\130\uffd2\131" +
    "\uffd2\132\uffd2\133\uffd2\134\uffd2\135\uffd2\136\uffd2\137\uffd2" +
    "\001\002\000\004\012\u01f7\001\002\000\004\067\u01f8\001" +
    "\002\000\072\003\uffe8\066\uffe8\070\uffe8\071\uffe8\072\uffe8" +
    "\073\uffe8\074\uffe8\075\uffe8\076\uffe8\077\uffe8\116\uffe8\117" +
    "\uffe8\120\uffe8\121\uffe8\122\uffe8\123\uffe8\124\uffe8\125\uffe8" +
    "\126\uffe8\127\uffe8\130\uffe8\131\uffe8\132\uffe8\133\uffe8\134" +
    "\uffe8\135\uffe8\136\uffe8\137\uffe8\001\002\000\006\067\uffae" +
    "\134\021\001\002\000\004\067\u01fb\001\002\000\072\003" +
    "\ufffd\066\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd\074\ufffd" +
    "\075\ufffd\076\ufffd\077\ufffd\116\ufffd\117\ufffd\120\ufffd\121" +
    "\ufffd\122\ufffd\123\ufffd\124\ufffd\125\ufffd\126\ufffd\127\ufffd" +
    "\130\ufffd\131\ufffd\132\ufffd\133\ufffd\134\ufffd\135\ufffd\136" +
    "\ufffd\137\ufffd\001\002\000\004\002\uffde\001\002\000\004" +
    "\121\u01fe\001\002\000\004\004\u01ff\001\002\000\004\067" +
    "\u0200\001\002\000\004\002\uffee\001\002\000\004\067\u0202" +
    "\001\002\000\004\066\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0200\000\010\002\005\003\006\004\003\001\001\000" +
    "\010\005\150\045\147\066\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\071\021\072\016\073\013\074\030\075\031\076\027" +
    "\077\017\100\011\101\014\102\012\103\025\104\034\105" +
    "\023\106\022\107\032\110\015\111\026\112\024\113\033" +
    "\114\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\073\144\074\030\075\031\076\027\077\017\100\011\101" +
    "\014\102\012\103\025\104\034\105\023\106\022\107\032" +
    "\110\015\111\026\112\024\113\033\114\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\164\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\164\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\164\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\164\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\164\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\164" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\164\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\164\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\164\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\164\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\164\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\164\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\164\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\164\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\164\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\164\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\164\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\u01fb\001\001\000\006\006" +
    "\247\046\245\001\001\000\016\007\152\010\155\026\154" +
    "\047\157\050\153\065\156\001\001\000\002\001\001\000" +
    "\006\167\227\170\221\001\001\000\006\007\152\047\200" +
    "\001\001\000\002\001\001\000\004\031\173\001\001\000" +
    "\004\026\166\001\001\000\006\010\155\050\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\071\163\072" +
    "\016\073\013\074\030\075\031\076\027\077\017\100\011" +
    "\101\014\102\012\103\025\104\034\105\023\106\022\107" +
    "\032\110\015\111\026\112\024\113\033\114\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\030\240\167\241\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\072\011\272\012\251\013\301\014" +
    "\266\015\262\016\304\017\255\020\267\021\305\022\253" +
    "\023\256\024\277\027\254\051\273\052\264\053\260\054" +
    "\303\055\300\056\302\057\252\060\271\061\263\062\257" +
    "\063\265\064\250\067\270\070\276\167\275\001\001\000" +
    "\002\001\001\000\072\011\272\012\251\013\301\014\266" +
    "\015\262\016\304\017\255\020\267\021\305\022\253\023" +
    "\256\024\277\033\u01f1\051\273\052\264\053\260\054\303" +
    "\055\300\056\302\057\252\060\271\061\263\062\257\063" +
    "\265\064\250\067\u01f3\070\276\167\275\001\001\000\002" +
    "\001\001\000\072\011\272\012\251\013\301\014\266\015" +
    "\262\016\304\017\255\020\267\021\305\022\253\023\256" +
    "\024\277\042\u01ec\051\273\052\264\053\260\054\303\055" +
    "\300\056\302\057\252\060\271\061\263\062\257\063\265" +
    "\064\250\067\u01eb\070\276\167\275\001\001\000\002\001" +
    "\001\000\072\011\272\012\251\013\301\014\266\015\262" +
    "\016\304\017\255\020\267\021\305\022\253\023\256\024" +
    "\277\040\u01e5\051\273\052\264\053\260\054\303\055\300" +
    "\056\302\057\252\060\271\061\263\062\257\063\265\064" +
    "\250\067\u01e4\070\276\167\275\001\001\000\072\011\272" +
    "\012\251\013\301\014\266\015\262\016\304\017\255\020" +
    "\267\021\305\022\253\023\256\024\277\043\u01de\051\273" +
    "\052\264\053\260\054\303\055\300\056\302\057\252\060" +
    "\271\061\263\062\257\063\265\064\250\067\u01dd\070\276" +
    "\167\275\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\072\011\272\012\251\013\301\014\266" +
    "\015\262\016\304\017\255\020\267\021\305\022\253\023" +
    "\256\024\277\036\u01d3\051\273\052\264\053\260\054\303" +
    "\055\300\056\302\057\252\060\271\061\263\062\257\063" +
    "\265\064\250\067\u01d4\070\276\167\275\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\072\011" +
    "\272\012\251\013\301\014\266\015\262\016\304\017\255" +
    "\020\267\021\305\022\253\023\256\024\277\035\u01cd\051" +
    "\273\052\264\053\260\054\303\055\300\056\302\057\252" +
    "\060\271\061\263\062\257\063\265\064\250\067\u01cc\070" +
    "\276\167\275\001\001\000\002\001\001\000\070\011\272" +
    "\012\251\013\301\014\266\015\262\016\304\017\255\020" +
    "\267\021\305\022\253\023\256\024\277\027\u01ca\051\273" +
    "\052\264\053\260\054\303\055\300\056\302\057\252\060" +
    "\271\061\263\062\257\063\265\064\250\070\312\167\275" +
    "\001\001\000\002\001\001\000\072\011\272\012\251\013" +
    "\301\014\266\015\262\016\304\017\255\020\267\021\305" +
    "\022\253\023\256\024\277\032\u01c3\051\273\052\264\053" +
    "\260\054\303\055\300\056\302\057\252\060\271\061\263" +
    "\062\257\063\265\064\250\067\u01c5\070\276\167\275\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\117\u0101\120\u0102\126\377\001" +
    "\001\000\002\001\001\000\072\011\272\012\251\013\301" +
    "\014\266\015\262\016\304\017\255\020\267\021\305\022" +
    "\253\023\256\024\277\034\372\051\273\052\264\053\260" +
    "\054\303\055\300\056\302\057\252\060\271\061\263\062" +
    "\257\063\265\064\250\067\371\070\276\167\275\001\001" +
    "\000\002\001\001\000\002\001\001\000\072\011\272\012" +
    "\251\013\301\014\266\015\262\016\304\017\255\020\267" +
    "\021\305\022\253\023\256\024\277\037\363\051\273\052" +
    "\264\053\260\054\303\055\300\056\302\057\252\060\271" +
    "\061\263\062\257\063\265\064\250\067\362\070\276\167" +
    "\275\001\001\000\072\011\272\012\251\013\301\014\266" +
    "\015\262\016\304\017\255\020\267\021\305\022\253\023" +
    "\256\024\277\041\306\051\273\052\264\053\260\054\303" +
    "\055\300\056\302\057\252\060\271\061\263\062\257\063" +
    "\265\064\250\067\310\070\276\167\275\001\001\000\002" +
    "\001\001\000\002\001\001\000\070\011\272\012\251\013" +
    "\301\014\266\015\262\016\304\017\255\020\267\021\305" +
    "\022\253\023\256\024\277\041\311\051\273\052\264\053" +
    "\260\054\303\055\300\056\302\057\252\060\271\061\263" +
    "\062\257\063\265\064\250\070\312\167\275\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\071\357\072\016" +
    "\073\013\074\030\075\031\076\027\077\017\100\011\101" +
    "\014\102\012\103\025\104\034\105\023\106\022\107\032" +
    "\110\015\111\026\112\024\113\033\114\035\001\001\000" +
    "\052\071\355\072\016\073\013\074\030\075\031\076\027" +
    "\077\017\100\011\101\014\102\012\103\025\104\034\105" +
    "\023\106\022\107\032\110\015\111\026\112\024\113\033" +
    "\114\035\001\001\000\052\071\353\072\016\073\013\074" +
    "\030\075\031\076\027\077\017\100\011\101\014\102\012" +
    "\103\025\104\034\105\023\106\022\107\032\110\015\111" +
    "\026\112\024\113\033\114\035\001\001\000\002\001\001" +
    "\000\052\071\347\072\016\073\013\074\030\075\031\076" +
    "\027\077\017\100\011\101\014\102\012\103\025\104\034" +
    "\105\023\106\022\107\032\110\015\111\026\112\024\113" +
    "\033\114\035\001\001\000\052\071\344\072\016\073\013" +
    "\074\030\075\031\076\027\077\017\100\011\101\014\102" +
    "\012\103\025\104\034\105\023\106\022\107\032\110\015" +
    "\111\026\112\024\113\033\114\035\001\001\000\002\001" +
    "\001\000\052\071\341\072\016\073\013\074\030\075\031" +
    "\076\027\077\017\100\011\101\014\102\012\103\025\104" +
    "\034\105\023\106\022\107\032\110\015\111\026\112\024" +
    "\113\033\114\035\001\001\000\052\071\337\072\016\073" +
    "\013\074\030\075\031\076\027\077\017\100\011\101\014" +
    "\102\012\103\025\104\034\105\023\106\022\107\032\110" +
    "\015\111\026\112\024\113\033\114\035\001\001\000\052" +
    "\071\335\072\016\073\013\074\030\075\031\076\027\077" +
    "\017\100\011\101\014\102\012\103\025\104\034\105\023" +
    "\106\022\107\032\110\015\111\026\112\024\113\033\114" +
    "\035\001\001\000\052\071\333\072\016\073\013\074\030" +
    "\075\031\076\027\077\017\100\011\101\014\102\012\103" +
    "\025\104\034\105\023\106\022\107\032\110\015\111\026" +
    "\112\024\113\033\114\035\001\001\000\002\001\001\000" +
    "\052\071\330\072\016\073\013\074\030\075\031\076\027" +
    "\077\017\100\011\101\014\102\012\103\025\104\034\105" +
    "\023\106\022\107\032\110\015\111\026\112\024\113\033" +
    "\114\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\070\011\272\012\251\013\301\014" +
    "\266\015\262\016\304\017\255\020\267\021\305\022\253" +
    "\023\256\024\277\037\364\051\273\052\264\053\260\054" +
    "\303\055\300\056\302\057\252\060\271\061\263\062\257" +
    "\063\265\064\250\070\312\167\275\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\070\011\272\012" +
    "\251\013\301\014\266\015\262\016\304\017\255\020\267" +
    "\021\305\022\253\023\256\024\277\034\373\051\273\052" +
    "\264\053\260\054\303\055\300\056\302\057\252\060\271" +
    "\061\263\062\257\063\265\064\250\070\312\167\275\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\u01bc\001\001\000\004\126\u01ba" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\127" +
    "\u0106\001\001\000\002\001\001\000\030\116\u0115\121\u011d" +
    "\124\u011b\125\u0117\135\u011c\136\u0114\137\u0113\140\u0110\144" +
    "\u011a\150\u011e\152\u0109\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\116\u0115\121\u011d\124\u011b\125\u0117" +
    "\137\u0199\140\u0110\144\u011a\150\u011e\152\u0109\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\115\u018e\116\u018b" +
    "\122\u018d\123\u018f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\116\u0123\151\u0124\001\001\000\004" +
    "\116\u0182\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\116\u0134\141\u013a" +
    "\153\u0133\154\u012f\155\u0131\156\u012a\157\u0138\160\u0137\161" +
    "\u013f\162\u012e\163\u0135\164\u0140\165\u012c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\116\u0134\141\u013a\153\u0172\154" +
    "\u012f\155\u0131\156\u012a\157\u0138\160\u0137\161\u013f\162\u012e" +
    "\163\u0135\164\u0140\165\u012c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\116\u0134\141\u013a\162\u014f\163" +
    "\u0135\164\u0140\165\u012c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\116\u0134\141\u013a\153\u0144\154\u012f\155\u0131" +
    "\156\u012a\157\u0138\160\u0137\161\u013f\162\u012e\163\u0135\164" +
    "\u0140\165\u012c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\116\u0134\141" +
    "\u013a\162\u014b\163\u0135\164\u0140\165\u012c\001\001\000\016" +
    "\116\u0134\141\u013a\162\u014a\163\u0135\164\u0140\165\u012c\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\116\u0134" +
    "\141\u013a\153\u014d\154\u012f\155\u0131\156\u012a\157\u0138\160" +
    "\u0137\161\u013f\162\u012e\163\u0135\164\u0140\165\u012c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\116\u0134\141\u013a" +
    "\160\u0153\161\u013f\162\u012e\163\u0135\164\u0140\165\u012c\001" +
    "\001\000\002\001\001\000\020\116\u0134\141\u013a\161\u0157" +
    "\162\u012e\163\u0135\164\u0140\165\u012c\001\001\000\020\116" +
    "\u0134\141\u013a\161\u0156\162\u012e\163\u0135\164\u0140\165\u012c" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\116" +
    "\u0115\121\u0160\124\u015f\125\u0117\130\u015e\132\u015a\133\u015d" +
    "\134\u015c\140\u015b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\116\u0115\121\u011d\124\u011b\125\u0117\135\u0163\136" +
    "\u0114\137\u0113\140\u0110\144\u011a\150\u011e\152\u0109\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\131\u0165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\116\u0134\141\u013a\153\u016c\154\u012f\155\u0131\156\u012a\157" +
    "\u0138\160\u0137\161\u013f\162\u012e\163\u0135\164\u0140\165\u012c" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\116" +
    "\u0134\141\u013a\156\u016f\157\u0138\160\u0137\161\u013f\162\u012e" +
    "\163\u0135\164\u0140\165\u012c\001\001\000\002\001\001\000" +
    "\024\116\u0134\141\u013a\157\u0171\160\u0137\161\u013f\162\u012e" +
    "\163\u0135\164\u0140\165\u012c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\116\u0175\142\u0178" +
    "\166\u0176\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\116\u0134\141\u013a\153\u017b\154\u012f\155\u0131\156\u012a\157" +
    "\u0138\160\u0137\161\u013f\162\u012e\163\u0135\164\u0140\165\u012c" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\116" +
    "\u0134\141\u013a\153\u017e\154\u012f\155\u0131\156\u012a\157\u0138" +
    "\160\u0137\161\u013f\162\u012e\163\u0135\164\u0140\165\u012c\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\116\u0134" +
    "\141\u013a\153\u0181\154\u012f\155\u0131\156\u012a\157\u0138\160" +
    "\u0137\161\u013f\162\u012e\163\u0135\164\u0140\165\u012c\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\116\u0134\141" +
    "\u013a\153\u0184\154\u012f\155\u0131\156\u012a\157\u0138\160\u0137" +
    "\161\u013f\162\u012e\163\u0135\164\u0140\165\u012c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\116\u0134\141\u013a\153\u0189\154\u012f\155" +
    "\u0131\156\u012a\157\u0138\160\u0137\161\u013f\162\u012e\163\u0135" +
    "\164\u0140\165\u012c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\115\u018e\116\u018b\122\u0194" +
    "\123\u018f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\116\u0193\001\001\000\034\116\u0134" +
    "\141\u013a\153\u0192\154\u012f\155\u0131\156\u012a\157\u0138\160" +
    "\u0137\161\u013f\162\u012e\163\u0135\164\u0140\165\u012c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\116\u0134\141\u013a" +
    "\153\u0198\154\u012f\155\u0131\156\u012a\157\u0138\160\u0137\161" +
    "\u013f\162\u012e\163\u0135\164\u0140\165\u012c\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\116\u0175\142\u019b\143" +
    "\u019c\166\u0176\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\116\u0175\142\u019f\166\u0176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\116\u0134" +
    "\141\u013a\153\u01a2\154\u012f\155\u0131\156\u012a\157\u0138\160" +
    "\u0137\161\u013f\162\u012e\163\u0135\164\u0140\165\u012c\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\116\u0115\121" +
    "\u0160\124\u015f\125\u0117\130\u015e\132\u01a5\133\u015d\134\u015c" +
    "\140\u015b\001\001\000\010\145\u01a6\146\u01a8\147\u01a9\001" +
    "\001\000\002\001\001\000\024\116\u0115\121\u0160\124\u015f" +
    "\125\u0117\130\u015e\132\u01ad\133\u015d\134\u015c\140\u015b\001" +
    "\001\000\006\145\u01aa\147\u01ab\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\116\u0134\141\u013a\153\u01af\154\u012f" +
    "\155\u0131\156\u012a\157\u0138\160\u0137\161\u013f\162\u012e\163" +
    "\u0135\164\u0140\165\u012c\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\116\u0115\121\u0160\124\u015f\125\u0117\130" +
    "\u015e\132\u01b2\133\u015d\134\u015c\140\u015b\001\001\000\002" +
    "\001\001\000\034\116\u0134\141\u013a\153\u01b4\154\u012f\155" +
    "\u0131\156\u012a\157\u0138\160\u0137\161\u013f\162\u012e\163\u0135" +
    "\164\u0140\165\u012c\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\116\u0115\121\u0160\124\u015f\125\u0117\130\u015e" +
    "\132\u01b7\133\u015d\134\u015c\140\u015b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\127\u01c2\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\011\272\012\251\013\301\014\266" +
    "\015\262\016\304\017\255\020\267\021\305\022\253\023" +
    "\256\024\277\032\u01c6\051\273\052\264\053\260\054\303" +
    "\055\300\056\302\057\252\060\271\061\263\062\257\063" +
    "\265\064\250\070\312\167\275\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\070\011\272\012\251" +
    "\013\301\014\266\015\262\016\304\017\255\020\267\021" +
    "\305\022\253\023\256\024\277\035\u01ce\051\273\052\264" +
    "\053\260\054\303\055\300\056\302\057\252\060\271\061" +
    "\263\062\257\063\265\064\250\070\312\167\275\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\070\011\272\012\251\013\301\014\266\015" +
    "\262\016\304\017\255\020\267\021\305\022\253\023\256" +
    "\024\277\036\u01d5\051\273\052\264\053\260\054\303\055" +
    "\300\056\302\057\252\060\271\061\263\062\257\063\265" +
    "\064\250\070\312\167\275\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\070\011\272\012\251\013\301\014\266\015\262" +
    "\016\304\017\255\020\267\021\305\022\253\023\256\024" +
    "\277\043\u01df\051\273\052\264\053\260\054\303\055\300" +
    "\056\302\057\252\060\271\061\263\062\257\063\265\064" +
    "\250\070\312\167\275\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\070\011\272\012\251\013\301" +
    "\014\266\015\262\016\304\017\255\020\267\021\305\022" +
    "\253\023\256\024\277\040\u01e6\051\273\052\264\053\260" +
    "\054\303\055\300\056\302\057\252\060\271\061\263\062" +
    "\257\063\265\064\250\070\312\167\275\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\070\011\272" +
    "\012\251\013\301\014\266\015\262\016\304\017\255\020" +
    "\267\021\305\022\253\023\256\024\277\042\u01ed\051\273" +
    "\052\264\053\260\054\303\055\300\056\302\057\252\060" +
    "\271\061\263\062\257\063\265\064\250\070\312\167\275" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\070\011\272\012\251\013\301\014" +
    "\266\015\262\016\304\017\255\020\267\021\305\022\253" +
    "\023\256\024\277\033\u01f4\051\273\052\264\053\260\054" +
    "\303\055\300\056\302\057\252\060\271\061\263\062\257" +
    "\063\265\064\250\070\312\167\275\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\071\u01f9\072\016\073\013\074\030\075\031\076" +
    "\027\077\017\100\011\101\014\102\012\103\025\104\034" +
    "\105\023\106\022\107\032\110\015\111\026\112\024\113" +
    "\033\114\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CCParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CCParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CCParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Label label = new Label();
    public Program program = new Program(new Location(0,0), new ArrayList<>());
    public ArrayList<String> staticVariables = new ArrayList<>();
    public CCParser(CCLexer lex) {
        super(lex);
        //resetBooleans();
    }
    //Metodo al que se llama ante algun error sintactico
    public void syntax_error(Symbol s){
        String lexeme = "";
        if(s.value != null) lexeme = s.value.toString();
        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTÁCTICO RECUPERADO");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        HashMap<String, String> symbolNames = Validate.getSymbolNames();
        List<Integer> tokens = expected_token_ids();
        String des = "Se esperaba: ";
        for(Integer i : tokens) {
            String fromId = symbl_name_from_id(i);
            String symbolName = symbolNames.get(fromId);
            if(symbolName != null){
                des += "'"+symbolName+ "' o ";
            }
            else{
                if(!fromId.equals("error") && !fromId.equals("EOF")){
                    des += fromId +" o ";
                }
            }
        }
        if(des.length() > 3) des = des.substring(0, des.length() - 3);
        addError(lexeme, line, col, des);
    }

    //Metodo que se llama en el momento en que ya no es posible una recuperacion
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexeme = "";
        if(s.value != null) lexeme = s.value.toString();
        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTACTICO NO RECUPERABLE");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        HashMap<String, String> symbolNames = Validate.getSymbolNames();
        List<Integer> tokens = expected_token_ids();
        String des = "Se esperaba: ";
        for(Integer i : tokens) {
            String fromId = symbl_name_from_id(i);
            String symbolName = symbolNames.get(fromId);
            if(symbolName != null){
                des += "'"+symbolName+ "' o ";
            }
            else{
                if(!fromId.equals("error") && !fromId.equals("EOF")){
                    des += fromId +" o ";
                }
            }
        }
        if(des.length() > 3) des = des.substring(0, des.length() - 3);
        addError(lexeme, line, col, des);
    }

    private void addError(String lexeme, int line, int col, String description){
        ErrorsLP.addError(lexeme, line, col, "Error Sintáctico", description);
    }

    private void addParameterError(String type, int line, int col){
        ErrorsLP.addError(type, line, col, "Semántico", "Parametro " + type + " duplicado");
    }
    private void addPError(String type, int line, int col){
        ErrorsLP.addError(type, line, col, "Semántico", "Parametro " + type + " no esperado");
    }
    protected int error_sync_size() {
            return 1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CCParser$actions {
  private final CCParser parser;

  /** Constructor */
  CUP$CCParser$actions(CCParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CCParser$do_action_part00000000(
    int                        CUP$CCParser$act_num,
    java_cup.runtime.lr_parser CUP$CCParser$parser,
    java.util.Stack            CUP$CCParser$stack,
    int                        CUP$CCParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CCParser$result;

      /* select the action based on the action number */
      switch (CUP$CCParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		RESULT = start_val;
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CCParser$parser.done_parsing();
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= cc 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label c = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
    label = c;
    
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // open_cc ::= LT C_CC parameters_opt GT 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = p; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_cc",2, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // open_head ::= LT C_HEAD GT 
            {
              ArrayList<Parameter> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_head",3, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // open_body ::= LT C_BODY parameters_opt GT 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = p; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_body",4, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // open_title ::= LT C_TITLE GT 
            {
              ArrayList<Parameter> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_title",5, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // open_link ::= LT C_LINK parameters_opt GT 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = p; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_link",6, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // open_spam ::= LT C_SPAM parameters_opt GT 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = p; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_spam",7, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // open_input ::= LT C_INPUT parameters_opt GT 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = p; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_input",8, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // open_textarea ::= LT C_TEXTAREA parameters_opt C_CC GT 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		 RESULT = p; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_textarea",9, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // open_select ::= LT C_SELECT parameters_opt GT 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = p; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_select",10, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // open_option ::= LT C_OPTION parameters_opt GT 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = p; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_option",11, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // open_div ::= LT C_DIV parameters_opt GT 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = p; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_div",12, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // open_img ::= LT C_IMG parameters_opt GT 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = p; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_img",13, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // open_br ::= LT C_BR GT 
            {
              ArrayList<Parameter> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_br",14, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // open_button ::= LT C_BUTTON parameters_opt GT 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = p; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_button",15, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // open_h1 ::= LT C_H1 parameters_opt GT 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = p; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_h1",16, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // open_p ::= LT C_P parameters_opt GT 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = p; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_p",17, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // open_scripting ::= LT C_SCRIPTING GT 
            {
              ArrayList<Parameter> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("open_scripting",18, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // close_cc ::= LT SLASH C_CC GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_cc",19, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // close_head ::= LT SLASH C_HEAD GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_head",20, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // close_body ::= LT SLASH C_BODY GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_body",21, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // close_title ::= LT SLASH C_TITLE GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_title",22, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // close_link ::= LT SLASH C_LINK GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_link",23, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // close_spam ::= LT SLASH C_SPAM GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_spam",24, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // close_input ::= LT SLASH C_INPUT GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_input",25, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // close_textarea ::= LT SLASH C_TEXTAREA GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_textarea",26, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // close_select ::= LT SLASH C_SELECT GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_select",27, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // close_option ::= LT SLASH C_OPTION GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_option",28, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // close_div ::= LT SLASH C_DIV GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_div",29, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // close_img ::= LT SLASH C_IMG GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_img",30, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // close_button ::= LT SLASH C_BUTTON GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_button",31, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // close_h1 ::= LT SLASH C_H1 GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_h1",32, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // close_p ::= LT SLASH C_P GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_p",33, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // close_scripting ::= LT SLASH C_SCRIPTING GT 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("close_scripting",34, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cc ::= open_cc c_cc_body close_cc 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Object> l = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.HTML, p, l);
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("cc",1, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // c_cc_body ::= c_head c_body 
            {
              ArrayList<Object> RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		Label h = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label b = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            var labels = new ArrayList<Object>();
            labels.add(h);
            labels.add(b);
            RESULT = labels;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_cc_body",52, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // c_head ::= open_head head_labels close_head 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Object> l = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
            RESULT = new Label(pleft, pright, Label.HEAD, l);
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_head",35, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // c_head ::= open_head close_head 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
            RESULT = new Label(pleft, pright, Label.HEAD);
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_head",35, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // c_title ::= open_title string_text close_title 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
            var text = new ArrayList<Object>();
            text.add(t);
            RESULT = new Label(pleft, pright, Label.TITLE, text);
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_title",37, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // c_link ::= open_link close_link 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
            RESULT = new Label(pleft, pright, Label.LINK, p, new ArrayList<>());
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_link",38, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // head_labels ::= c_title c_link 
            {
              ArrayList<Object> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                var labels = new ArrayList<Object>();
                labels.add(t);
                labels.add(l);
                RESULT = labels;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("head_labels",51, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // head_labels ::= c_link c_title 
            {
              ArrayList<Object> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                var labels = new ArrayList<Object>();
                labels.add(l);
                labels.add(t);
                RESULT = labels;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("head_labels",51, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // c_body ::= open_body body_labels close_body 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Object> l = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.BODY, l);
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_body",36, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // c_body ::= open_body close_body 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.BODY);
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_body",36, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // c_spam ::= open_spam body_labels close_spam 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Object> l = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.SPAN, p, l);
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_spam",39, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // c_spam ::= open_spam close_spam 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.SPAN, p, new ArrayList<>());
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_spam",39, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // c_input ::= open_input body_labels close_input 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Object> l = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.INPUT, p, l);
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_input",40, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // c_input ::= open_input close_input 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.INPUT, p, new ArrayList<>());
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_input",40, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // c_textarea ::= open_textarea body_labels close_textarea 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Object> l = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.TEXTAREA, p, l);
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_textarea",41, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // c_textarea ::= open_textarea close_textarea 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.TEXTAREA, p, new ArrayList<>());
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_textarea",41, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // c_select ::= open_select body_labels close_select 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Object> l = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.SELECT, p, l);
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_select",42, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // c_select ::= open_select close_select 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.SELECT, p, new ArrayList<>());
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_select",42, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // c_option ::= open_option body_labels close_option 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Object> l = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.OPTION, p, l);
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_option",43, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // c_option ::= open_option close_option 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.OPTION, p, new ArrayList<>());
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_option",43, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // c_div ::= open_div body_labels close_div 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Object> l = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.DIV, p, l);
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_div",44, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // c_div ::= open_div close_div 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.DIV, p, new ArrayList<>());
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_div",44, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // c_img ::= open_img body_labels close_img 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Object> l = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.IMG, p, l);
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_img",45, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // c_img ::= open_img close_img 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.IMG, p, new ArrayList<>());
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_img",45, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // c_br ::= open_br 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
        RESULT = new Label(pleft, pright, Label.BR);
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_br",46, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // c_button ::= open_button body_labels close_button 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Object> l = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.BUTTON, p, l);
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_button",47, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // c_button ::= open_button close_button 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.BUTTON, p, new ArrayList<>());
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_button",47, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // c_h1 ::= open_h1 body_labels close_h1 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Object> l = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.H1, p, l);
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_h1",48, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // c_h1 ::= open_h1 close_h1 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.H1, p, new ArrayList<>());
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_h1",48, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // c_p ::= open_p body_labels close_p 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Object> l = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.P, p, l);
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_p",49, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // c_p ::= open_p close_p 
            {
              Label RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
        RESULT = new Label(pleft, pright, Label.P, p, new ArrayList<>());
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_p",49, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // c_scripting ::= open_scripting global_stmt_opt close_scripting 
            {
              Label RESULT =null;
		
        //RESULT = new Label(pleft, pright, Label.SCRIPTING, p, l);
        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("c_scripting",50, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // body_labels ::= body_label 
            {
              ArrayList<Object> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            var labels = new ArrayList<Object>();
            labels.add(l);
            RESULT = labels;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_labels",53, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // body_labels ::= body_labels body_label 
            {
              ArrayList<Object> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Object> ls = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            ls.add(l);
            RESULT = ls;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_labels",53, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // body_label ::= c_spam 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                RESULT = l;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_label",54, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // body_label ::= c_input 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                 RESULT = l;
                 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_label",54, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // body_label ::= c_textarea 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                RESULT = l;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_label",54, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // body_label ::= c_select 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                RESULT = l;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_label",54, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // body_label ::= c_option 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                RESULT = l;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_label",54, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // body_label ::= c_div 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                RESULT = l;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_label",54, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // body_label ::= c_img 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                RESULT = l;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_label",54, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // body_label ::= c_br 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                RESULT = l;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_label",54, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // body_label ::= c_button 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                RESULT = l;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_label",54, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // body_label ::= c_h1 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                RESULT = l;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_label",54, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // body_label ::= c_p 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                RESULT = l;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_label",54, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // body_label ::= c_scripting 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                RESULT = l;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_label",54, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // body_label ::= text 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                RESULT = t;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_label",54, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // body_label ::= error 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_label",54, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parameters_opt ::= 
            {
              ArrayList<Parameter> RESULT =null;
		
                RESULT = new ArrayList<>();
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameters_opt",55, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parameters_opt ::= parameters 
            {
              ArrayList<Parameter> RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		ArrayList<Parameter> ps = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                RESULT = ps;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameters_opt",55, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parameters ::= parameter 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            var parameters = new ArrayList<Parameter>();
            parameters.add(p);
            RESULT = parameters;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameters",56, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parameters ::= parameters parameter 
            {
              ArrayList<Parameter> RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		ArrayList<Parameter> ps = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            ps.add(p);
            RESULT = ps;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameters",56, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // parameter ::= href 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",57, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parameter ::= background 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",57, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // parameter ::= color 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",57, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parameter ::= font_size 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",57, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parameter ::= font_family 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",57, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parameter ::= text_align 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",57, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parameter ::= type 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",57, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // parameter ::= id 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",57, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // parameter ::= name 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",57, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // parameter ::= cols 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",57, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parameter ::= rows 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",57, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parameter ::= clase 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",57, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parameter ::= src 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",57, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parameter ::= width 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",57, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // parameter ::= height 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",57, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // parameter ::= alt 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",57, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // parameter ::= onclick 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            RESULT = p;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("parameter",57, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // href ::= LBRACKET HREF EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.HREF, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("href",58, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // background ::= LBRACKET BACKGROUND EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.BACKGROUND, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("background",59, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // color ::= LBRACKET COLOR EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.COLOR, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("color",60, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // font_size ::= LBRACKET FONT_SIZE EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.FONT_SIZE, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("font_size",61, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // font_family ::= LBRACKET FONT_FAMILY EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.FONT_FAMILY, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("font_family",62, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // text_align ::= LBRACKET TEXT_ALIGN EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.TEXT_ALIGN, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text_align",63, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // type ::= LBRACKET TYPE EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.TYPE, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("type",64, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // id ::= LBRACKET ID EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.ID, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("id",65, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // name ::= LBRACKET NAME EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.NAME, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("name",66, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // cols ::= LBRACKET COLS EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.COLS, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("cols",67, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // rows ::= LBRACKET ROWS EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.ROWS, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("rows",68, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // clase ::= LBRACKET CLASS EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.CLASS, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("clase",69, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // src ::= LBRACKET SRC EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.SRC, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("src",70, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // width ::= LBRACKET WIDTH EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.WIDTH, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("width",71, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // height ::= LBRACKET HEIGHT EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.HEIGHT, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("height",72, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // alt ::= LBRACKET ALT EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.ALT, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("alt",73, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // onclick ::= LBRACKET ONCLICK EQUAL string_literal RBRACKET 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 RESULT = new Parameter(sleft, sright, Parameter.ONCLICK, s); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("onclick",74, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // global_stmt_opt ::= 
            {
              List<FunctionDeclaration> RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("global_stmt_opt",77, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // global_stmt_opt ::= global_stmt 
            {
              List<FunctionDeclaration> RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<FunctionDeclaration> g = (List<FunctionDeclaration>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                program.getBody().addAll(g);
                RESULT = g;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("global_stmt_opt",77, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // global_stmt ::= method_declarator 
            {
              List<FunctionDeclaration> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		FunctionDeclaration f = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(f)); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("global_stmt",78, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // global_stmt ::= global_stmt method_declarator 
            {
              List<FunctionDeclaration> RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		List<FunctionDeclaration> g = (List<FunctionDeclaration>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		FunctionDeclaration f = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                g.add(f);
                RESULT = g;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("global_stmt",78, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // variable_declarators ::= variable_type GLOBAL variable_declarator 
            {
              List<VariableDeclarator> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<VariableDeclarator> vs = (List<VariableDeclarator>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                        for(VariableDeclarator v: vs){
                            v.setType(t);
                            v.setGlobal(true);
                            staticVariables.add("let "+v.getText());
                            v.setText("");
                        }
                        RESULT = vs;
                        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("variable_declarators",79, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // variable_declarators ::= variable_type variable_declarator 
            {
              List<VariableDeclarator> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<VariableDeclarator> vs = (List<VariableDeclarator>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                        for(VariableDeclarator v: vs){
                            v.setType(t);
                            v.setText("let "+v.getText());
                        }
                        RESULT = vs;
                        
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("variable_declarators",79, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // variable_declarator ::= variable_id 
            {
              List<VariableDeclarator> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Identifier s = (Identifier)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(new VariableDeclarator(new Location(sleft, sright), s, null))); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("variable_declarator",80, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // variable_declarator ::= variable_assignment_declarator 
            {
              List<VariableDeclarator> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Assignment> s = (List<Assignment>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                    ArrayList<VariableDeclarator> v = new ArrayList<>();
                    for(Assignment a: s){
                        v.add(new VariableDeclarator(a.getLoc(), a.getId(), a.getExpression()));
                    }
                    RESULT = v;
                    
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("variable_declarator",80, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // listIds ::= variable_id 
            {
              List<Identifier> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(i)); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("listIds",75, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // listIds ::= listIds COMMA variable_id 
            {
              List<Identifier> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		List<Identifier> ids = (List<Identifier>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
            ids.add(i);
            RESULT = ids;
            
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("listIds",75, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // variable_id ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new Identifier(new Location(ileft, iright), i); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("variable_id",76, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // variable_assignment_declarator ::= listIds EQUAL expression 
            {
              List<Assignment> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		List<Identifier> i = (List<Identifier>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                               ArrayList<Assignment> as = new ArrayList<>();
                               for(Identifier id: i){
                                   as.add(new Assignment(id.getLoc(), id, e));
                               }
                               RESULT = as;
                               
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("variable_assignment_declarator",81, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // variable_assignment ::= variable_id EQUAL expression 
            {
              Assignment RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new Assignment(new Location(ileft, iright), i, e); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("variable_assignment",82, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // variable_type ::= INTEGER 
            {
              Type RESULT =null;
		RESULT = Type.INT;
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("variable_type",83, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // variable_type ::= STRING 
            {
              Type RESULT =null;
		RESULT = Type.STRING;
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("variable_type",83, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // variable_type ::= DECIMAL 
            {
              Type RESULT =null;
		RESULT = Type.DECIMAL;
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("variable_type",83, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // variable_type ::= CHAR 
            {
              Type RESULT =null;
		RESULT = Type.CHAR;
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("variable_type",83, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // variable_type ::= BOOLEAN 
            {
              Type RESULT =null;
		RESULT = Type.BOOLEAN;
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("variable_type",83, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // method_declarator ::= FUNCTION_ID LPAREN RPAREN method_block 
            {
              FunctionDeclaration RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new FunctionDeclaration(new Location(fleft, fright), f, new ArrayList<>(), Type.VOID, b); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("method_declarator",84, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // method_declarator ::= ON_LOAD LPAREN RPAREN method_block 
            {
              FunctionDeclaration RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new FunctionDeclaration(new Location(fleft, fright), f, new ArrayList<>(), Type.VOID, b); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("method_declarator",84, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // method_block ::= LBRACKET body_block_opt RBRACKET 
            {
              List<Node> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		RESULT = b; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("method_block",85, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // body_block_opt ::= 
            {
              List<Node> RESULT =null;
		RESULT = new ArrayList<>(); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_block_opt",91, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // body_block_opt ::= body_block 
            {
              List<Node> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = b; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_block_opt",91, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // body_block ::= body_stmt 
            {
              List<Node> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = b; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_block",92, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // body_block ::= body_block body_stmt 
            {
              List<Node> RESULT =null;
		int bbleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int bbright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		List<Node> bb = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                bb.addAll(b);
                RESULT = bb; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_block",92, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // body_stmt ::= variable_declarators SEMICOLON 
            {
              List<Node> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		List<VariableDeclarator> b = (List<VariableDeclarator>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
            b.forEach(v->{
              if(v.isGlobal()) v.setText("");
              else v.setText(v.getText()+";");
            });
            List<Node> c = new ArrayList<>();
            c.addAll(b);
            RESULT = c;  
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_stmt",93, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // body_stmt ::= variable_assignment SEMICOLON 
            {
              List<Node> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		Assignment b = (Assignment)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 b.setText(b.getText()+";");
            RESULT = new ArrayList<>(Arrays.asList(b)); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_stmt",93, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // body_stmt ::= function_call_stmt SEMICOLON 
            {
              List<Node> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		CallFunction b = (CallFunction)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 b.setText(b.getText()+";");
            RESULT = new ArrayList<>(Arrays.asList(b)); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_stmt",93, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // body_stmt ::= if_stmt 
            {
              List<Node> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		IfStmt b = (IfStmt)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(b)); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_stmt",93, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // body_stmt ::= for_stmt 
            {
              List<Node> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		ForStmt b = (ForStmt)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(b)); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_stmt",93, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // body_stmt ::= while_stmt 
            {
              List<Node> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		WhileStmt b = (WhileStmt)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(b)); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_stmt",93, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // body_stmt ::= error 
            {
              List<Node> RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("body_stmt",93, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // function_call_stmt ::= ALERT_INFO LPAREN expression RPAREN 
            {
              CallFunction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		RESULT = new CallFunction(new Location(fleft, fright), f, new ArrayList<>(Arrays.asList(p)));
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("function_call_stmt",94, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // function_call_stmt ::= EXIT LPAREN RPAREN 
            {
              CallFunction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		RESULT = new CallFunction(new Location(fleft, fright), f, new ArrayList<>());
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("function_call_stmt",94, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // function_call_stmt ::= REDIRECT LPAREN RPAREN 
            {
              CallFunction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		RESULT = new CallFunction(new Location(fleft, fright), f, new ArrayList<>());
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("function_call_stmt",94, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // function_call_stmt ::= INSERT LPAREN params RPAREN 
            {
              CallFunction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		List<Expr> p = (List<Expr>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		RESULT = new CallFunction(new Location(fleft, fright), f, p);
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("function_call_stmt",94, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // function_call_return ::= ASC LPAREN expression RPAREN 
            {
              CallFunction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		RESULT = new CallFunction(new Location(fleft, fright), f, new ArrayList<>(Arrays.asList(p)));
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("function_call_return",95, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // function_call_return ::= DESC LPAREN expression RPAREN 
            {
              CallFunction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		RESULT = new CallFunction(new Location(fleft, fright), f, new ArrayList<>(Arrays.asList(p)));
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("function_call_return",95, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // function_call_return ::= LETPAR_NUM LPAREN expression RPAREN 
            {
              CallFunction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		RESULT = new CallFunction(new Location(fleft, fright), f, new ArrayList<>(Arrays.asList(p)));
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("function_call_return",95, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // function_call_return ::= LETIMPAR_NUM LPAREN expression RPAREN 
            {
              CallFunction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		RESULT = new CallFunction(new Location(fleft, fright), f, new ArrayList<>(Arrays.asList(p)));
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("function_call_return",95, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // function_call_return ::= REVERSE LPAREN expression RPAREN 
            {
              CallFunction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		RESULT = new CallFunction(new Location(fleft, fright), f, new ArrayList<>(Arrays.asList(p)));
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("function_call_return",95, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // function_call_return ::= CARACTER_ALEATORIO LPAREN RPAREN 
            {
              CallFunction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		RESULT = new CallFunction(new Location(fleft, fright), f, new ArrayList<>());
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("function_call_return",95, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // function_call_return ::= NUM_ALEATORIO LPAREN RPAREN 
            {
              CallFunction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		RESULT = new CallFunction(new Location(fleft, fright), f, new ArrayList<>());
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("function_call_return",95, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // function_call_return ::= GET_ELEMENT_BY_ID LPAREN param RPAREN 
            {
              CallFunction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		List<Expr> p = (List<Expr>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		RESULT = new CallFunction(new Location(fleft, fright), f, p);
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("function_call_return",95, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // params ::= param 
            {
              List<Expr> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Expr> p = (List<Expr>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = p; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("params",97, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // params ::= params COMMA param 
            {
              List<Expr> RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		List<Expr> ps = (List<Expr>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Expr> p = (List<Expr>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
        ps.addAll(p);
        RESULT = ps;
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("params",97, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // param ::= variable_id 
            {
              List<Expr> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Identifier v = (Identifier)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(new UnaryExpression(new Location(vleft, vright), v.getText(), Type.STRING, null, v))); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("param",96, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // param ::= simple_string 
            {
              List<Expr> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(new UnaryExpression(new Location(vleft, vright), "'"+v+"'", Type.STRING, null, v))); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("param",96, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // init_block ::= INIT LBRACE COLON 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("init_block",86, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // end_block ::= COLON RBRACE END 
            {
              Object RESULT =null;

              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("end_block",87, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // block_opt ::= init_block body_block_opt end_block 
            {
              List<Node> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		RESULT = b; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("block_opt",90, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // block ::= block_opt 
            {
              List<Node> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = b; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("block",88, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // block ::= block_stmt 
            {
              List<Node> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = b; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("block",88, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // block_stmt ::= variable_declarators SEMICOLON 
            {
              List<Node> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		List<VariableDeclarator> v = (List<VariableDeclarator>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
            v.forEach(b->{
              if(b.isGlobal()) b.setText("");
              else b.setText(b.getText()+";");
            });
            List<Node> c = new ArrayList<>();
            c.addAll(v);
            RESULT = c; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("block_stmt",89, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // block_stmt ::= variable_assignment SEMICOLON 
            {
              List<Node> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		Assignment v = (Assignment)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 v.setText(v.getText()+";");
            RESULT = new ArrayList<>(Arrays.asList(v)); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("block_stmt",89, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // block_stmt ::= function_call_stmt SEMICOLON 
            {
              List<Node> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		CallFunction v = (CallFunction)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		 v.setText(v.getText()+";");
            RESULT = new ArrayList<>(Arrays.asList(v)); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("block_stmt",89, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // if_stmt ::= IF LPAREN expression RPAREN THEN block 
            {
              IfStmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-5)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new IfStmt(new Location(rleft, rright), e, b, new ArrayList<>(), new ArrayList<>()); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("if_stmt",98, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-5)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // if_stmt ::= IF LPAREN expression RPAREN THEN block else_if_stmts 
            {
              IfStmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-6)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<IfStmt> elif = (List<IfStmt>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new IfStmt(new Location(rleft, rright), e, b, elif, new ArrayList<>()); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("if_stmt",98, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-6)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // if_stmt ::= IF LPAREN expression RPAREN THEN block else_stmt 
            {
              IfStmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-6)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Node> els = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new IfStmt(new Location(rleft, rright), e, b, new ArrayList<>(), els); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("if_stmt",98, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-6)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // if_stmt ::= IF LPAREN expression RPAREN THEN block else_if_stmts else_stmt 
            {
              IfStmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-7)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-5)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		List<IfStmt> elif = (List<IfStmt>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Node> els = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new IfStmt(new Location(rleft, rright), e, b, elif, els); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("if_stmt",98, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-7)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // else_if_stmts ::= else_if_stmt 
            {
              List<IfStmt> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		IfStmt b = (IfStmt)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(b)); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("else_if_stmts",100, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // else_if_stmts ::= else_if_stmts else_if_stmt 
            {
              List<IfStmt> RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		List<IfStmt> bs = (List<IfStmt>)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		IfStmt b = (IfStmt)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                bs.add(b);
                RESULT = bs;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("else_if_stmts",100, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // else_if_stmt ::= ELSE IF LPAREN expression RPAREN THEN block 
            {
              IfStmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-6)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new IfStmt(new Location(rleft, rright), e, b); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("else_if_stmt",101, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-6)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // else_stmt ::= ELSE block 
            {
              List<Node> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = b; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("else_stmt",99, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // for_stmt ::= REPEAT LPAREN init_for RPAREN HUNTIL LPAREN expression RPAREN block 
            {
              ForStmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-8)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-8)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-6)).right;
		VariableDeclarator i = (VariableDeclarator)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new ForStmt(new Location(rleft, rright), b, i, e, "++"); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("for_stmt",102, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-8)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // init_for ::= INTEGER variable_id EQUAL expression 
            {
              VariableDeclarator RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new VariableDeclarator(new Location(ileft, iright), id, ex); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("init_for",103, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // init_for ::= variable_id EQUAL expression 
            {
              VariableDeclarator RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new VariableDeclarator(new Location(idleft, idright), id, ex); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("init_for",103, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // while_stmt ::= WHILE LPAREN expression RPAREN THENWHILE block 
            {
              WhileStmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-5)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		List<Node> b = (List<Node>)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new WhileStmt(new Location(wleft, wright), b, e);
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("while_stmt",104, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-5)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // expression ::= conditional_expression 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = v; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("expression",105, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // conditional_expression ::= conditional_or_expression 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = v; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("conditional_expression",106, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // conditional_or_expression ::= conditional_and_expression 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = v; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("conditional_or_expression",107, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // conditional_or_expression ::= conditional_or_expression OR conditional_and_expression 
            {
              Expr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		Expr v1 = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr v3 = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new BinaryExpression(new Location(v1left, v1right), Type.BOOLEAN, v1, v2, v3); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("conditional_or_expression",107, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // conditional_and_expression ::= relational_expression 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = v; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("conditional_and_expression",108, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // conditional_and_expression ::= conditional_and_expression AND relational_expression 
            {
              Expr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		Expr v1 = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr v3 = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new BinaryExpression(new Location(v1left, v1right), Type.BOOLEAN, v1, v2, v3); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("conditional_and_expression",108, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // relational_expression ::= additive_expression 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = v; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("relational_expression",109, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // relational_expression ::= relational_expression REL_OP additive_expression 
            {
              Expr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		Expr v1 = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr v3 = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new BinaryExpression(new Location(v1left, v1right), Type.BOOLEAN, v1, v2, v3); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("relational_expression",109, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // additive_expression ::= multiplicative_expression 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = v; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("additive_expression",110, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // additive_expression ::= additive_expression PLUS multiplicative_expression 
            {
              Expr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		Expr v1 = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr v3 = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new BinaryExpression(new Location(v1left, v1right), null, v1, v2, v3); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("additive_expression",110, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // additive_expression ::= additive_expression MINUS multiplicative_expression 
            {
              Expr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		Expr v1 = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Expr v3 = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new BinaryExpression(new Location(v1left, v1right), null, v1, v2, v3); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("additive_expression",110, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // multiplicative_expression ::= unary_expression 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		UnaryExpression v = (UnaryExpression)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = v; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",111, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // multiplicative_expression ::= multiplicative_expression TIMES unary_expression 
            {
              Expr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		Expr v1 = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		UnaryExpression v3 = (UnaryExpression)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new BinaryExpression(new Location(v1left, v1right), null, v1, v2, v3); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",111, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // multiplicative_expression ::= multiplicative_expression SLASH unary_expression 
            {
              Expr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).right;
		Expr v1 = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		UnaryExpression v3 = (UnaryExpression)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new BinaryExpression(new Location(v1left, v1right), null, v1, v2, v3); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",111, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // unary_expression ::= value_literal 
            {
              UnaryExpression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		UnaryExpression v = (UnaryExpression)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = v; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("unary_expression",112, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // unary_expression ::= variable_id 
            {
              UnaryExpression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Identifier v = (Identifier)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new UnaryExpression(new Location(vleft, vright), v.getText(), null, null, v); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("unary_expression",112, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // unary_expression ::= function_call_return 
            {
              UnaryExpression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		CallFunction v = (CallFunction)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new UnaryExpression(new Location(vleft, vright), v.getText(), null, null, v); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("unary_expression",112, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // unary_expression ::= MINUS unary_expression 
            {
              UnaryExpression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		UnaryExpression v = (UnaryExpression)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                    v.setOperator("-");
                    v.setText("-"+v.getText());
                    RESULT = v;
                    
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("unary_expression",112, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // unary_expression ::= LPAREN expression RPAREN 
            {
              UnaryExpression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		
                    v.setText("("+v.getText()+")");
                    RESULT = (UnaryExpression) v;
                    
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("unary_expression",112, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-2)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // value_literal ::= string_literal 
            {
              UnaryExpression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new UnaryExpression(new Location(vleft, vright), "\""+v+"\"", Type.STRING, null, v);
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("value_literal",113, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // value_literal ::= NUMBER 
            {
              UnaryExpression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                double num = Double.parseDouble(v.toString());
                Type tp;
                if(num % 1 != 0) tp = Type.DECIMAL;
                else tp = Type.INT;
                RESULT = new UnaryExpression(new Location(vleft, vright), v, tp, null, num);
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("value_literal",113, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // value_literal ::= char_literal 
            {
              UnaryExpression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new UnaryExpression(new Location(vleft, vright), v, Type.CHAR, null, v);
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("value_literal",113, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // value_literal ::= TRUE 
            {
              UnaryExpression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new UnaryExpression(new Location(vleft, vright), "true", Type.BOOLEAN, null, false);
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("value_literal",113, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // value_literal ::= FALSE 
            {
              UnaryExpression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		RESULT = new UnaryExpression(new Location(vleft, vright), "false", Type.BOOLEAN, null, false);
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("value_literal",113, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // string_literal ::= STRING_LITERAL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = s.replaceAll("\"", "").replaceAll("\n", "\\n"); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("string_literal",114, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // char_literal ::= CHAR_LITERAL 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = c.replaceAll("'", ""); 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("char_literal",115, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // simple_string ::= SIMPLE_STRING 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = s.replaceAll("'", "")/*.replaceAll("\n", "\\\\n")*/; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("simple_string",116, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // text ::= TEXT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",117, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // text ::= IDENTIFIER 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",117, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // text ::= STRING_LITERAL 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",117, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // text ::= CHAR_LITERAL 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",117, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // text ::= SIMPLE_STRING 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",117, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // text ::= NUMBER 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",117, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // text ::= EQUAL 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",117, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // text ::= FUNCTION_ID 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",117, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // text ::= PLUS 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",117, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // text ::= MINUS 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",117, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // text ::= TIMES 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",117, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // text ::= SLASH 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",117, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // text ::= LPAREN 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",117, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // text ::= RPAREN 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",117, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // text ::= COLON 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",117, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // text ::= SEMICOLON 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",117, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // text ::= COMMA 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",117, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // text ::= VERTICAL_BAR 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",117, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // text ::= REL_OP 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",117, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // text ::= OR 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",117, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // text ::= AND 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",117, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // text ::= NOT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",117, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // text ::= LBRACKET 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",117, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // text ::= RBRACKET 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",117, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // text ::= LBRACE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",117, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // text ::= RBRACE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("text",117, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // string_text ::= text 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                RESULT = t;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("string_text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // string_text ::= string_text text 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CCParser$stack.peek()).value;
		
                RESULT = s + " " + t;
                
              CUP$CCParser$result = parser.getSymbolFactory().newSymbol("string_text",118, ((java_cup.runtime.Symbol)CUP$CCParser$stack.elementAt(CUP$CCParser$top-1)), ((java_cup.runtime.Symbol)CUP$CCParser$stack.peek()), RESULT);
            }
          return CUP$CCParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CCParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CCParser$do_action(
    int                        CUP$CCParser$act_num,
    java_cup.runtime.lr_parser CUP$CCParser$parser,
    java.util.Stack            CUP$CCParser$stack,
    int                        CUP$CCParser$top)
    throws java.lang.Exception
    {
              return CUP$CCParser$do_action_part00000000(
                               CUP$CCParser$act_num,
                               CUP$CCParser$parser,
                               CUP$CCParser$stack,
                               CUP$CCParser$top);
    }
}

}
