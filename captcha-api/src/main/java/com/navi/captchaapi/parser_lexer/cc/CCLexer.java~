// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: CCLexer.flex

package com.navi.captchaapi.parser_lexer.cc;
import java_cup.runtime.*;
import static com.navi.captchaapi.parser_lexer.cc.sym.*;
import com.navi.captchaapi.parser_lexer.*;

@SuppressWarnings("fallthrough")
public class CCLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\3\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\10\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\43"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\43\1\62\1\63\1\64\1\65\1\66\1\30\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\43\1\100\1\101\1\102\1\103\1\104\1\105\1\43"+
    "\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115"+
    "\1\116\1\117\1\120\1\121\43\0\1\30\10\0\1\65"+
    "\1\0\1\65\3\0\1\65\4\0\1\65\4\0\1\65"+
    "\4\0\1\30\27\65\1\0\11\65\1\122\7\65\1\122"+
    "\3\65\1\122\5\65\1\122\3\65\1\0\2\65\1\122"+
    "\u01c7\65\4\0\14\65\16\0\5\65\7\0\1\65\1\0"+
    "\1\65\21\0\165\65\1\0\2\65\2\0\4\65\1\0"+
    "\1\65\6\0\1\65\1\0\3\65\1\0\1\65\1\0"+
    "\24\65\1\0\123\65\1\0\213\65\1\0\255\65\1\0"+
    "\46\65\2\0\1\65\6\0\51\65\10\0\55\65\1\0"+
    "\1\65\1\0\2\65\1\0\2\65\1\0\1\65\10\0"+
    "\33\65\4\0\4\65\35\0\13\65\5\0\112\65\4\0"+
    "\146\65\1\0\10\65\2\0\12\65\1\0\23\65\2\0"+
    "\1\65\20\0\73\65\2\0\145\65\16\0\66\65\4\0"+
    "\1\65\2\0\1\65\2\0\56\65\22\0\34\65\4\0"+
    "\13\65\65\0\25\65\1\0\10\65\25\0\17\65\1\0"+
    "\201\65\2\0\12\65\1\0\23\65\1\0\10\65\2\0"+
    "\2\65\2\0\26\65\1\0\7\65\1\0\1\65\3\0"+
    "\4\65\2\0\11\65\2\0\2\65\2\0\4\65\10\0"+
    "\1\65\4\0\2\65\1\0\5\65\2\0\14\65\12\0"+
    "\1\65\1\0\1\65\2\0\3\65\1\0\6\65\4\0"+
    "\2\65\2\0\26\65\1\0\7\65\1\0\2\65\1\0"+
    "\2\65\1\0\2\65\2\0\1\65\1\0\5\65\4\0"+
    "\2\65\2\0\3\65\3\0\1\65\7\0\4\65\1\0"+
    "\1\65\7\0\20\65\13\0\3\65\1\0\11\65\1\0"+
    "\3\65\1\0\26\65\1\0\7\65\1\0\2\65\1\0"+
    "\5\65\2\0\12\65\1\0\3\65\1\0\3\65\2\0"+
    "\1\65\17\0\4\65\2\0\12\65\11\0\7\65\1\0"+
    "\3\65\1\0\10\65\2\0\2\65\2\0\26\65\1\0"+
    "\7\65\1\0\2\65\1\0\5\65\2\0\11\65\2\0"+
    "\2\65\2\0\3\65\10\0\2\65\4\0\2\65\1\0"+
    "\5\65\2\0\12\65\1\0\1\65\20\0\2\65\1\0"+
    "\6\65\3\0\3\65\1\0\4\65\3\0\2\65\1\0"+
    "\1\65\1\0\2\65\3\0\2\65\3\0\3\65\3\0"+
    "\14\65\4\0\5\65\3\0\3\65\1\0\4\65\2\0"+
    "\1\65\6\0\1\65\16\0\12\65\20\0\15\65\1\0"+
    "\3\65\1\0\27\65\1\0\20\65\3\0\10\65\1\0"+
    "\3\65\1\0\4\65\7\0\2\65\1\0\3\65\5\0"+
    "\4\65\2\0\12\65\20\0\4\65\1\0\10\65\1\0"+
    "\3\65\1\0\27\65\1\0\12\65\1\0\5\65\2\0"+
    "\11\65\1\0\3\65\1\0\4\65\7\0\2\65\7\0"+
    "\1\65\1\0\4\65\2\0\12\65\1\0\2\65\15\0"+
    "\4\65\1\0\10\65\1\0\3\65\1\0\63\65\1\0"+
    "\3\65\1\0\5\65\5\0\4\65\7\0\5\65\2\0"+
    "\12\65\12\0\6\65\2\0\2\65\1\0\22\65\3\0"+
    "\30\65\1\0\11\65\1\0\1\65\2\0\7\65\3\0"+
    "\1\65\4\0\6\65\1\0\1\65\1\0\10\65\6\0"+
    "\12\65\2\0\2\65\15\0\72\65\5\0\17\65\1\0"+
    "\12\65\47\0\2\65\1\0\1\65\1\0\5\65\1\0"+
    "\30\65\1\0\1\65\1\0\27\65\2\0\5\65\1\0"+
    "\1\65\1\0\6\65\2\0\12\65\2\0\4\65\40\0"+
    "\1\65\27\0\2\65\6\0\12\65\13\0\1\65\1\0"+
    "\1\65\1\0\1\65\4\0\12\65\1\0\44\65\4\0"+
    "\24\65\1\0\22\65\1\0\44\65\11\0\1\65\71\0"+
    "\112\65\6\0\116\65\2\0\46\65\1\0\1\65\5\0"+
    "\1\65\2\0\53\65\1\0\115\65\1\0\4\65\2\0"+
    "\7\65\1\0\1\65\1\0\4\65\2\0\51\65\1\0"+
    "\4\65\2\0\41\65\1\0\4\65\2\0\7\65\1\0"+
    "\1\65\1\0\4\65\2\0\17\65\1\0\71\65\1\0"+
    "\4\65\2\0\103\65\2\0\3\65\40\0\20\65\20\0"+
    "\126\65\2\0\6\65\3\0\u016c\65\2\0\21\65\1\0"+
    "\32\65\5\0\113\65\3\0\13\65\7\0\15\65\1\0"+
    "\7\65\13\0\25\65\13\0\24\65\14\0\15\65\1\0"+
    "\3\65\1\0\2\65\14\0\124\65\3\0\1\65\4\0"+
    "\2\65\2\0\12\65\41\0\3\65\2\0\12\65\6\0"+
    "\131\65\7\0\53\65\5\0\106\65\12\0\37\65\1\0"+
    "\14\65\4\0\14\65\12\0\50\65\2\0\5\65\13\0"+
    "\54\65\4\0\32\65\6\0\12\65\46\0\34\65\4\0"+
    "\77\65\1\0\35\65\2\0\13\65\6\0\12\65\15\0"+
    "\1\65\10\0\17\65\101\0\114\65\4\0\12\65\21\0"+
    "\11\65\14\0\164\65\14\0\70\65\10\0\12\65\3\0"+
    "\61\65\2\0\11\65\7\0\53\65\2\0\3\65\20\0"+
    "\3\65\1\0\47\65\5\0\372\65\1\0\33\65\2\0"+
    "\6\65\2\0\46\65\2\0\6\65\2\0\10\65\1\0"+
    "\1\65\1\0\1\65\1\0\1\65\1\0\37\65\2\0"+
    "\65\65\1\0\7\65\1\0\1\65\3\0\3\65\1\0"+
    "\7\65\3\0\4\65\2\0\6\65\4\0\15\65\5\0"+
    "\3\65\1\0\7\65\33\0\2\30\2\0\2\30\41\0"+
    "\2\65\23\0\1\65\34\0\1\65\15\0\1\65\20\0"+
    "\15\65\63\0\41\65\21\0\1\65\4\0\1\65\2\0"+
    "\12\65\1\0\1\65\3\0\5\65\6\0\1\65\1\0"+
    "\1\65\1\0\1\65\1\0\4\65\1\0\13\65\2\0"+
    "\4\65\5\0\5\65\4\0\1\65\21\0\51\65\u022d\0"+
    "\64\65\26\0\57\65\1\0\57\65\1\0\205\65\6\0"+
    "\11\65\14\0\46\65\1\0\1\65\5\0\1\65\2\0"+
    "\70\65\7\0\1\65\17\0\30\65\11\0\7\65\1\0"+
    "\7\65\1\0\7\65\1\0\7\65\1\0\7\65\1\0"+
    "\7\65\1\0\7\65\1\0\7\65\1\0\40\65\57\0"+
    "\1\65\325\0\3\65\31\0\17\65\1\0\5\65\2\0"+
    "\5\65\4\0\126\65\2\0\2\65\2\0\3\65\1\0"+
    "\132\65\1\0\4\65\5\0\53\65\1\0\136\65\21\0"+
    "\33\65\65\0\306\65\112\0\360\65\20\0\215\65\103\0"+
    "\56\65\2\0\15\65\3\0\34\65\24\0\63\65\1\0"+
    "\12\65\1\0\163\65\45\0\11\65\2\0\147\65\2\0"+
    "\65\65\2\0\5\65\60\0\61\65\30\0\64\65\14\0"+
    "\106\65\12\0\12\65\6\0\30\65\3\0\1\65\1\0"+
    "\61\65\2\0\44\65\14\0\35\65\3\0\101\65\16\0"+
    "\13\65\6\0\37\65\1\0\67\65\11\0\16\65\2\0"+
    "\12\65\6\0\27\65\3\0\111\65\30\0\3\65\2\0"+
    "\20\65\2\0\5\65\12\0\6\65\2\0\6\65\2\0"+
    "\6\65\11\0\7\65\1\0\7\65\1\0\53\65\1\0"+
    "\14\65\10\0\173\65\1\0\2\65\2\0\12\65\6\0"+
    "\244\65\14\0\27\65\4\0\61\65\4\0\156\65\2\0"+
    "\152\65\46\0\7\65\14\0\5\65\5\0\14\65\1\0"+
    "\15\65\1\0\5\65\1\0\1\65\1\0\2\65\1\0"+
    "\2\65\1\0\154\65\41\0\153\65\22\0\100\65\2\0"+
    "\66\65\50\0\14\65\4\0\20\65\20\0\20\65\3\0"+
    "\2\65\30\0\3\65\40\0\5\65\1\0\207\65\23\0"+
    "\12\65\7\0\32\65\4\0\1\65\1\0\32\65\13\0"+
    "\131\65\3\0\6\65\2\0\6\65\2\0\6\65\2\0"+
    "\3\65\43\0\14\65\1\0\32\65\1\0\23\65\1\0"+
    "\2\65\1\0\17\65\2\0\16\65\42\0\173\65\105\0"+
    "\65\65\210\0\1\65\202\0\35\65\3\0\61\65\17\0"+
    "\1\65\37\0\40\65\15\0\36\65\5\0\53\65\5\0"+
    "\36\65\2\0\44\65\4\0\10\65\1\0\5\65\52\0"+
    "\236\65\2\0\12\65\6\0\44\65\4\0\44\65\4\0"+
    "\50\65\10\0\64\65\234\0\67\65\11\0\26\65\12\0"+
    "\10\65\230\0\6\65\2\0\1\65\1\0\54\65\1\0"+
    "\2\65\3\0\1\65\2\0\27\65\12\0\27\65\11\0"+
    "\37\65\101\0\23\65\1\0\2\65\12\0\26\65\12\0"+
    "\32\65\106\0\70\65\6\0\2\65\100\0\4\65\1\0"+
    "\2\65\5\0\10\65\1\0\3\65\1\0\35\65\2\0"+
    "\3\65\4\0\1\65\40\0\35\65\3\0\35\65\43\0"+
    "\10\65\1\0\36\65\31\0\66\65\12\0\26\65\12\0"+
    "\23\65\15\0\22\65\156\0\111\65\67\0\63\65\15\0"+
    "\63\65\15\0\50\65\10\0\12\65\306\0\35\65\12\0"+
    "\1\65\10\0\41\65\217\0\27\65\11\0\107\65\37\0"+
    "\12\65\17\0\74\65\25\0\31\65\7\0\12\65\6\0"+
    "\65\65\1\0\12\65\4\0\3\65\11\0\44\65\2\0"+
    "\1\65\11\0\105\65\4\0\4\65\3\0\13\65\1\0"+
    "\1\65\43\0\22\65\1\0\45\65\6\0\1\65\101\0"+
    "\7\65\1\0\1\65\1\0\4\65\1\0\17\65\1\0"+
    "\12\65\7\0\73\65\5\0\12\65\6\0\4\65\1\0"+
    "\10\65\2\0\2\65\2\0\26\65\1\0\7\65\1\0"+
    "\2\65\1\0\5\65\1\0\12\65\2\0\2\65\2\0"+
    "\3\65\2\0\1\65\6\0\1\65\5\0\7\65\2\0"+
    "\7\65\3\0\5\65\213\0\113\65\5\0\12\65\4\0"+
    "\2\65\40\0\106\65\1\0\1\65\10\0\12\65\246\0"+
    "\66\65\2\0\11\65\27\0\6\65\42\0\101\65\3\0"+
    "\1\65\13\0\12\65\46\0\71\65\7\0\12\65\66\0"+
    "\33\65\2\0\17\65\4\0\12\65\306\0\73\65\145\0"+
    "\112\65\25\0\1\65\240\0\10\65\2\0\56\65\2\0"+
    "\10\65\1\0\2\65\33\0\77\65\10\0\1\65\10\0"+
    "\112\65\3\0\1\65\42\0\71\65\7\0\11\65\1\0"+
    "\55\65\1\0\11\65\17\0\12\65\30\0\36\65\2\0"+
    "\26\65\1\0\16\65\111\0\7\65\1\0\2\65\1\0"+
    "\54\65\3\0\1\65\1\0\2\65\1\0\11\65\10\0"+
    "\12\65\6\0\6\65\1\0\2\65\1\0\45\65\1\0"+
    "\2\65\1\0\6\65\7\0\12\65\u0136\0\27\65\11\0"+
    "\232\65\146\0\157\65\21\0\304\65\274\0\57\65\321\0"+
    "\107\65\271\0\71\65\7\0\37\65\1\0\12\65\146\0"+
    "\36\65\2\0\5\65\13\0\67\65\11\0\4\65\14\0"+
    "\12\65\11\0\25\65\5\0\23\65\260\0\100\65\200\0"+
    "\113\65\4\0\71\65\7\0\21\65\100\0\2\65\1\0"+
    "\1\65\34\0\370\65\10\0\363\65\15\0\37\65\61\0"+
    "\3\65\21\0\4\65\10\0\u018c\65\4\0\153\65\5\0"+
    "\15\65\3\0\11\65\7\0\12\65\3\0\2\65\306\0"+
    "\5\65\3\0\6\65\10\0\10\65\2\0\7\65\36\0"+
    "\4\65\224\0\3\65\273\0\125\65\1\0\107\65\1\0"+
    "\2\65\2\0\1\65\2\0\2\65\2\0\4\65\1\0"+
    "\14\65\1\0\1\65\1\0\7\65\1\0\101\65\1\0"+
    "\4\65\2\0\10\65\1\0\7\65\1\0\34\65\1\0"+
    "\4\65\1\0\5\65\1\0\1\65\3\0\7\65\1\0"+
    "\u0154\65\2\0\31\65\1\0\31\65\1\0\37\65\1\0"+
    "\31\65\1\0\37\65\1\0\31\65\1\0\37\65\1\0"+
    "\31\65\1\0\37\65\1\0\31\65\1\0\10\65\2\0"+
    "\151\65\4\0\62\65\10\0\1\65\16\0\1\65\26\0"+
    "\5\65\1\0\17\65\120\0\7\65\1\0\21\65\2\0"+
    "\7\65\1\0\2\65\1\0\5\65\325\0\55\65\3\0"+
    "\16\65\2\0\12\65\4\0\1\65\u0171\0\72\65\6\0"+
    "\305\65\13\0\7\65\51\0\114\65\4\0\12\65\246\0"+
    "\4\65\1\0\33\65\1\0\2\65\1\0\1\65\2\0"+
    "\1\65\1\0\12\65\1\0\4\65\1\0\1\65\1\0"+
    "\1\65\6\0\1\65\4\0\1\65\1\0\1\65\1\0"+
    "\1\65\1\0\3\65\1\0\2\65\1\0\1\65\2\0"+
    "\1\65\1\0\1\65\1\0\1\65\1\0\1\65\1\0"+
    "\1\65\1\0\2\65\1\0\1\65\2\0\4\65\1\0"+
    "\7\65\1\0\4\65\1\0\4\65\1\0\1\65\1\0"+
    "\12\65\1\0\21\65\5\0\3\65\1\0\5\65\1\0"+
    "\21\65\164\0\32\65\6\0\32\65\6\0\32\65\166\0"+
    "\327\65\51\0\65\65\13\0\336\65\2\0\u0182\65\16\0"+
    "\u0131\65\37\0\36\65\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\3\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\2\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\12\16\22\1\23\1\24\1\25"+
    "\1\12\16\22\1\26\1\27\1\30\1\31\1\32\1\0"+
    "\1\33\1\34\1\0\1\14\1\0\1\12\13\22\1\35"+
    "\22\22\1\36\12\22\1\37\1\0\1\40\1\0\1\12"+
    "\1\22\1\41\10\22\1\42\4\22\1\43\16\22\1\44"+
    "\16\22\1\45\5\22\1\46\1\0\1\12\3\22\1\47"+
    "\1\22\1\50\1\22\1\51\12\22\1\52\1\53\1\54"+
    "\3\22\1\55\10\22\1\56\3\22\1\57\2\22\1\60"+
    "\4\22\1\61\1\22\1\62\1\22\1\63\2\22\1\64"+
    "\1\65\1\22\1\0\1\12\4\22\1\66\1\22\1\67"+
    "\11\22\1\70\12\22\1\71\2\22\1\72\1\73\1\22"+
    "\1\12\5\22\1\12\1\74\1\0\1\12\2\22\1\75"+
    "\1\22\1\76\1\22\1\77\3\22\1\100\3\22\1\101"+
    "\1\102\5\22\1\103\5\22\2\12\1\22\1\104\2\22"+
    "\1\105\1\12\1\31\1\106\3\22\1\107\4\22\1\110"+
    "\4\22\1\111\1\22\1\112\2\22\1\113\1\114\2\12"+
    "\1\22\1\115\1\116\1\12\2\22\1\117\1\120\1\22"+
    "\1\121\5\22\1\122\2\22\2\12\1\22\1\12\10\22"+
    "\1\123\1\22\1\12\1\124\1\22\1\12\1\125\2\22"+
    "\1\126\1\127\1\22\1\130\1\22\1\131\1\12\1\22"+
    "\1\132\1\22\1\133\2\22\1\134\2\22\1\135\3\22"+
    "\1\136\1\137\4\22\1\140";

  private static int [] zzUnpackAction() {
    int [] result = new int[393];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\123\0\123\0\246\0\371\0\u014c\0\u019f\0\u01f2"+
    "\0\123\0\123\0\123\0\123\0\123\0\u0245\0\u0245\0\123"+
    "\0\u0298\0\u02eb\0\123\0\123\0\u033e\0\u0391\0\u0391\0\u03e4"+
    "\0\u0437\0\u048a\0\u04dd\0\u0530\0\u0583\0\u05d6\0\u0629\0\u067c"+
    "\0\u06cf\0\u0722\0\u0775\0\u07c8\0\u081b\0\u086e\0\123\0\123"+
    "\0\u08c1\0\u0914\0\u0967\0\u09ba\0\u0a0d\0\u0a60\0\u0ab3\0\u0b06"+
    "\0\u0b59\0\u0bac\0\u0bff\0\u0c52\0\u0ca5\0\u0cf8\0\u0d4b\0\u0d9e"+
    "\0\123\0\u0df1\0\123\0\u0e44\0\123\0\u014c\0\123\0\123"+
    "\0\u0e97\0\u0eea\0\u0f3d\0\u0f90\0\u0fe3\0\u1036\0\u1089\0\u10dc"+
    "\0\u112f\0\u1182\0\u11d5\0\u1228\0\u127b\0\u12ce\0\u1321\0\u048a"+
    "\0\u1374\0\u13c7\0\u141a\0\u146d\0\u14c0\0\u1513\0\u1566\0\u15b9"+
    "\0\u160c\0\u165f\0\u16b2\0\u1705\0\u1758\0\u17ab\0\u17fe\0\u1851"+
    "\0\u18a4\0\u18f7\0\u048a\0\u194a\0\u199d\0\u19f0\0\u1a43\0\u1a96"+
    "\0\u1ae9\0\u1b3c\0\u1b8f\0\u1be2\0\u1c35\0\u0245\0\u1c88\0\123"+
    "\0\u1cdb\0\u1d2e\0\u1d81\0\u048a\0\u1dd4\0\u1e27\0\u1e7a\0\u1ecd"+
    "\0\u1f20\0\u1f73\0\u1fc6\0\u2019\0\u048a\0\u206c\0\u20bf\0\u2112"+
    "\0\u2165\0\u048a\0\u21b8\0\u220b\0\u225e\0\u22b1\0\u2304\0\u2357"+
    "\0\u23aa\0\u23fd\0\u2450\0\u24a3\0\u24f6\0\u2549\0\u259c\0\u25ef"+
    "\0\u048a\0\u2642\0\u2695\0\u26e8\0\u273b\0\u278e\0\u27e1\0\u2834"+
    "\0\u2887\0\u28da\0\u292d\0\u2980\0\u29d3\0\u2a26\0\u2a79\0\u048a"+
    "\0\u2acc\0\u2b1f\0\u2b72\0\u2bc5\0\u2c18\0\123\0\u2c6b\0\u2cbe"+
    "\0\u2d11\0\u2d64\0\u2db7\0\u048a\0\u2e0a\0\u048a\0\u2e5d\0\u048a"+
    "\0\u2eb0\0\u2f03\0\u2f56\0\u2fa9\0\u2ffc\0\u304f\0\u30a2\0\u30f5"+
    "\0\u3148\0\u319b\0\u048a\0\u048a\0\u048a\0\u31ee\0\u3241\0\u3294"+
    "\0\u048a\0\u32e7\0\u333a\0\u338d\0\u33e0\0\u3433\0\u3486\0\u34d9"+
    "\0\u352c\0\u357f\0\u35d2\0\u3625\0\u3678\0\u048a\0\u36cb\0\u371e"+
    "\0\u048a\0\u3771\0\u37c4\0\u3817\0\u386a\0\u048a\0\u38bd\0\u048a"+
    "\0\u3910\0\u048a\0\u3963\0\u39b6\0\u048a\0\u048a\0\u3a09\0\u3a5c"+
    "\0\u3aaf\0\u3b02\0\u3b55\0\u3ba8\0\u3bfb\0\u048a\0\u3c4e\0\u048a"+
    "\0\u3ca1\0\u3cf4\0\u3d47\0\u3d9a\0\u3ded\0\u3e40\0\u3e93\0\u3ee6"+
    "\0\u3f39\0\u048a\0\u3f8c\0\u3fdf\0\u4032\0\u4085\0\u40d8\0\u412b"+
    "\0\u417e\0\u41d1\0\u4224\0\u4277\0\u048a\0\u42ca\0\u431d\0\u048a"+
    "\0\u048a\0\u4370\0\u43c3\0\u4416\0\u4469\0\u44bc\0\u450f\0\u4562"+
    "\0\u45b5\0\u048a\0\u4608\0\u465b\0\u46ae\0\u4701\0\u048a\0\u4754"+
    "\0\u048a\0\u47a7\0\u048a\0\u47fa\0\u484d\0\u48a0\0\u048a\0\u48f3"+
    "\0\u4946\0\u4999\0\u048a\0\u048a\0\u49ec\0\u4a3f\0\u4a92\0\u4ae5"+
    "\0\u4b38\0\u048a\0\u4b8b\0\u4bde\0\u4c31\0\u4c84\0\u4cd7\0\u4d2a"+
    "\0\u4d7d\0\u4dd0\0\u048a\0\u4e23\0\u4e76\0\u048a\0\u4ec9\0\u2c6b"+
    "\0\u0245\0\u4f1c\0\u4f6f\0\u4fc2\0\u048a\0\u5015\0\u5068\0\u50bb"+
    "\0\u510e\0\u048a\0\u5161\0\u51b4\0\u5207\0\u525a\0\u048a\0\u52ad"+
    "\0\u048a\0\u5300\0\u5353\0\u048a\0\u048a\0\u53a6\0\u53f9\0\u544c"+
    "\0\u048a\0\u048a\0\u549f\0\u54f2\0\u5545\0\u048a\0\u048a\0\u5598"+
    "\0\u048a\0\u55eb\0\u563e\0\u5691\0\u56e4\0\u5737\0\u048a\0\u578a"+
    "\0\u57dd\0\u5830\0\u5883\0\u58d6\0\u5929\0\u597c\0\u59cf\0\u5a22"+
    "\0\u5a75\0\u5ac8\0\u5b1b\0\u5b6e\0\u5bc1\0\u048a\0\u5c14\0\u5c67"+
    "\0\u0245\0\u5cba\0\u5d0d\0\u048a\0\u5d60\0\u5db3\0\u048a\0\u5e06"+
    "\0\u5e59\0\u048a\0\u5eac\0\u048a\0\u5eff\0\u5f52\0\u0245\0\u5fa5"+
    "\0\u048a\0\u5ff8\0\u604b\0\u0245\0\u609e\0\u60f1\0\u048a\0\u6144"+
    "\0\u6197\0\u61ea\0\u048a\0\u048a\0\u623d\0\u6290\0\u62e3\0\u6336"+
    "\0\u048a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[393];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\2\22\1\23\1\24\1\25\1\26\1\27\1\17\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\32\1\37"+
    "\1\40\2\32\1\41\1\32\1\42\1\43\1\32\1\44"+
    "\1\32\1\45\2\32\1\46\2\32\1\47\1\2\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\32\1\57"+
    "\1\60\1\61\1\62\3\32\1\63\1\64\1\32\1\65"+
    "\1\66\1\67\2\32\1\70\3\32\1\71\1\72\1\73"+
    "\1\52\125\0\1\3\124\0\1\74\21\0\1\75\74\0"+
    "\2\76\1\0\2\76\1\77\55\76\1\0\37\76\6\0"+
    "\1\100\114\0\7\101\1\0\53\101\1\0\37\101\15\0"+
    "\6\17\5\0\32\17\4\0\31\17\1\0\1\17\1\0"+
    "\1\17\15\0\1\17\1\102\1\17\3\52\5\0\2\17"+
    "\30\52\3\0\1\51\31\52\1\0\1\17\1\0\1\52"+
    "\15\0\1\17\1\102\1\17\3\22\5\0\2\17\30\52"+
    "\3\0\1\51\31\52\1\0\1\17\1\0\1\52\4\0"+
    "\1\103\21\0\1\75\122\0\1\75\111\0\6\17\5\0"+
    "\32\17\4\0\7\17\1\104\21\17\1\0\1\17\1\0"+
    "\1\17\15\0\3\17\3\32\5\0\2\17\13\32\1\105"+
    "\5\32\1\106\6\32\3\0\1\51\31\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\30\32"+
    "\3\0\1\51\31\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\1\107\27\32\3\0\1\51"+
    "\1\110\30\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\4\32\1\111\23\32\3\0\1\51"+
    "\31\32\1\0\1\17\1\0\1\52\15\0\3\17\3\32"+
    "\5\0\2\17\13\32\1\112\1\32\1\113\10\32\1\114"+
    "\1\32\3\0\1\51\31\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\23\32\1\115\4\32"+
    "\3\0\1\51\1\32\1\116\27\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\23\32\1\117"+
    "\4\32\3\0\1\51\31\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\5\32\1\120\7\32"+
    "\1\121\12\32\3\0\1\51\31\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\4\32\1\122"+
    "\23\32\3\0\1\51\31\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\23\32\1\123\4\32"+
    "\3\0\1\51\31\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\15\32\1\124\12\32\3\0"+
    "\1\51\31\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\4\32\1\125\23\32\3\0\1\51"+
    "\31\32\1\0\1\17\1\0\1\52\15\0\3\17\3\32"+
    "\5\0\2\17\7\32\1\126\20\32\3\0\1\51\31\32"+
    "\1\0\1\17\1\0\1\52\15\0\3\17\3\32\5\0"+
    "\2\17\7\32\1\127\20\32\3\0\1\51\31\32\1\0"+
    "\1\17\1\0\1\52\20\0\3\51\7\0\30\51\3\0"+
    "\32\51\3\0\1\51\15\0\3\17\3\52\5\0\2\17"+
    "\30\52\3\0\1\51\31\52\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\30\32\3\0\1\51"+
    "\13\32\1\130\15\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\30\32\3\0\1\51\1\32"+
    "\1\131\14\32\1\132\12\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\30\32\3\0\1\51"+
    "\1\110\7\32\1\133\2\32\1\134\2\32\1\135\12\32"+
    "\1\0\1\17\1\0\1\52\15\0\3\17\3\32\5\0"+
    "\2\17\30\32\3\0\1\51\5\32\1\136\23\32\1\0"+
    "\1\17\1\0\1\52\15\0\3\17\3\32\5\0\2\17"+
    "\30\32\3\0\1\51\16\32\1\137\12\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\30\32"+
    "\3\0\1\51\5\32\1\140\23\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\30\32\3\0"+
    "\1\51\5\32\1\141\12\32\1\142\10\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\30\32"+
    "\3\0\1\51\4\32\1\143\10\32\1\144\13\32\1\0"+
    "\1\17\1\0\1\52\15\0\3\17\3\32\5\0\2\17"+
    "\30\32\3\0\1\51\1\32\1\145\27\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\30\32"+
    "\3\0\1\51\15\32\1\146\13\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\30\32\3\0"+
    "\1\51\16\32\1\147\12\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\30\32\3\0\1\51"+
    "\20\32\1\150\1\32\1\151\6\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\30\32\3\0"+
    "\1\51\5\32\1\152\12\32\1\153\6\32\1\154\1\32"+
    "\1\0\1\17\1\0\1\52\15\0\3\17\3\32\5\0"+
    "\2\17\30\32\3\0\1\51\11\32\1\155\17\32\1\0"+
    "\1\17\1\0\1\52\15\0\6\17\5\0\32\17\4\0"+
    "\31\17\1\0\1\156\1\0\1\17\2\74\1\0\120\74"+
    "\7\157\1\160\53\157\1\0\37\157\15\0\3\17\3\102"+
    "\5\0\32\17\4\0\31\17\1\0\1\17\1\0\1\17"+
    "\15\0\1\161\122\0\6\17\5\0\32\17\4\0\13\17"+
    "\1\162\15\17\1\0\1\17\1\0\1\17\15\0\3\17"+
    "\3\32\5\0\2\17\4\32\1\163\23\32\3\0\1\51"+
    "\31\32\1\0\1\17\1\0\1\52\15\0\3\17\3\32"+
    "\5\0\2\17\2\32\1\164\25\32\3\0\1\51\31\32"+
    "\1\0\1\17\1\0\1\52\15\0\3\17\3\32\5\0"+
    "\2\17\20\32\1\165\7\32\3\0\1\51\31\32\1\0"+
    "\1\17\1\0\1\52\15\0\3\17\3\32\5\0\2\17"+
    "\1\32\1\166\1\167\1\170\3\32\1\171\1\172\2\32"+
    "\1\173\2\32\1\174\1\175\1\32\1\176\1\177\5\32"+
    "\3\0\1\51\2\32\1\166\1\167\1\170\3\32\1\171"+
    "\1\172\1\32\1\173\2\32\1\174\1\175\1\32\1\176"+
    "\1\177\6\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\21\32\1\200\6\32\3\0\1\51"+
    "\31\32\1\0\1\17\1\0\1\52\15\0\3\17\3\32"+
    "\5\0\2\17\21\32\1\201\6\32\3\0\1\51\31\32"+
    "\1\0\1\17\1\0\1\52\15\0\3\17\3\32\5\0"+
    "\2\17\3\32\1\202\24\32\3\0\1\51\31\32\1\0"+
    "\1\17\1\0\1\52\15\0\3\17\3\32\5\0\2\17"+
    "\10\32\1\203\17\32\3\0\1\51\31\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\15\32"+
    "\1\204\12\32\3\0\1\51\31\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\30\32\3\0"+
    "\1\51\13\32\1\205\15\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\15\32\1\206\12\32"+
    "\3\0\1\51\31\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\10\32\1\207\10\32\1\210"+
    "\6\32\3\0\1\51\31\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\22\32\1\211\5\32"+
    "\3\0\1\51\31\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\14\32\1\212\13\32\3\0"+
    "\1\51\31\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\30\32\3\0\1\51\1\213\30\32"+
    "\1\0\1\17\1\0\1\52\15\0\3\17\3\32\5\0"+
    "\2\17\3\32\1\214\13\32\1\215\4\32\1\216\3\32"+
    "\3\0\1\51\31\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\4\32\1\217\23\32\3\0"+
    "\1\51\31\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\10\32\1\220\17\32\3\0\1\51"+
    "\31\32\1\0\1\17\1\0\1\52\15\0\3\17\3\32"+
    "\5\0\2\17\30\32\3\0\1\51\22\32\1\221\6\32"+
    "\1\0\1\17\1\0\1\52\15\0\3\17\3\32\5\0"+
    "\2\17\30\32\3\0\1\51\3\32\1\222\25\32\1\0"+
    "\1\17\1\0\1\52\15\0\3\17\3\32\5\0\2\17"+
    "\30\32\3\0\1\51\16\32\1\223\12\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\30\32"+
    "\3\0\1\51\1\32\1\224\27\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\30\32\3\0"+
    "\1\51\1\32\1\225\27\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\30\32\3\0\1\51"+
    "\13\32\1\226\15\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\30\32\3\0\1\51\3\32"+
    "\1\227\25\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\30\32\3\0\1\51\15\32\1\230"+
    "\13\32\1\0\1\17\1\0\1\52\15\0\3\17\3\32"+
    "\5\0\2\17\30\32\3\0\1\51\22\32\1\231\6\32"+
    "\1\0\1\17\1\0\1\52\15\0\3\17\3\32\5\0"+
    "\2\17\30\32\3\0\1\51\11\32\1\232\17\32\1\0"+
    "\1\17\1\0\1\52\15\0\3\17\3\32\5\0\2\17"+
    "\30\32\3\0\1\51\5\32\1\233\23\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\30\32"+
    "\3\0\1\51\22\32\1\234\6\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\30\32\3\0"+
    "\1\51\14\32\1\235\14\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\30\32\3\0\1\51"+
    "\3\32\1\236\25\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\30\32\3\0\1\51\25\32"+
    "\1\237\3\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\30\32\3\0\1\51\3\32\1\240"+
    "\25\32\1\0\1\17\1\0\1\52\15\0\3\17\3\32"+
    "\5\0\2\17\30\32\3\0\1\51\20\32\1\241\10\32"+
    "\1\0\1\17\1\0\1\52\15\0\3\17\3\32\5\0"+
    "\2\17\30\32\3\0\1\51\26\32\1\242\2\32\1\0"+
    "\1\17\1\0\1\52\15\0\3\17\3\32\5\0\2\17"+
    "\30\32\3\0\1\51\23\32\1\243\5\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\30\32"+
    "\3\0\1\51\17\32\1\244\11\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\30\32\3\0"+
    "\1\51\4\32\1\245\24\32\1\0\1\17\1\0\1\52"+
    "\7\157\1\246\53\157\1\0\37\157\15\0\1\247\122\0"+
    "\6\17\5\0\32\17\4\0\16\17\1\250\12\17\1\0"+
    "\1\17\1\0\1\17\15\0\3\17\3\32\5\0\2\17"+
    "\20\32\1\251\7\32\3\0\1\51\31\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\1\252"+
    "\27\32\3\0\1\51\31\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\16\32\1\253\1\32"+
    "\1\254\2\32\1\255\4\32\3\0\1\51\16\32\1\253"+
    "\1\32\1\254\2\32\1\255\5\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\2\32\1\256"+
    "\25\32\3\0\1\51\3\32\1\256\25\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\10\32"+
    "\1\257\17\32\3\0\1\51\11\32\1\257\17\32\1\0"+
    "\1\17\1\0\1\52\15\0\3\17\1\32\1\260\1\32"+
    "\5\0\2\17\4\32\1\261\23\32\3\0\1\51\5\32"+
    "\1\261\23\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\14\32\1\262\1\263\12\32\3\0"+
    "\1\51\14\32\1\262\1\263\13\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\10\32\1\264"+
    "\17\32\3\0\1\51\11\32\1\264\17\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\17\32"+
    "\1\265\10\32\3\0\1\51\17\32\1\265\11\32\1\0"+
    "\1\17\1\0\1\52\15\0\3\17\3\32\5\0\2\17"+
    "\2\32\1\266\1\32\1\267\12\32\1\270\10\32\3\0"+
    "\1\51\3\32\1\266\1\32\1\267\11\32\1\270\11\32"+
    "\1\0\1\17\1\0\1\52\15\0\3\17\3\32\5\0"+
    "\2\17\4\32\1\271\3\32\1\272\17\32\3\0\1\51"+
    "\5\32\1\271\3\32\1\272\17\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\2\32\1\273"+
    "\25\32\3\0\1\51\31\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\4\32\1\274\23\32"+
    "\3\0\1\51\31\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\22\32\1\275\5\32\3\0"+
    "\1\51\31\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\2\32\1\276\25\32\3\0\1\51"+
    "\31\32\1\0\1\17\1\0\1\52\15\0\3\17\3\32"+
    "\5\0\2\17\30\32\3\0\1\51\21\32\1\277\7\32"+
    "\1\0\1\17\1\0\1\52\15\0\3\17\3\32\5\0"+
    "\2\17\22\32\1\300\5\32\3\0\1\51\31\32\1\0"+
    "\1\17\1\0\1\52\15\0\3\17\3\32\5\0\2\17"+
    "\22\32\1\301\5\32\3\0\1\51\31\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\4\32"+
    "\1\302\23\32\3\0\1\51\31\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\10\32\1\303"+
    "\6\32\1\304\10\32\3\0\1\51\31\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\30\32"+
    "\3\0\1\51\1\305\30\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\13\32\1\306\14\32"+
    "\3\0\1\51\31\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\10\32\1\307\17\32\3\0"+
    "\1\51\31\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\4\32\1\310\23\32\3\0\1\51"+
    "\31\32\1\0\1\17\1\0\1\52\15\0\3\17\3\32"+
    "\5\0\2\17\4\32\1\311\23\32\3\0\1\51\31\32"+
    "\1\0\1\17\1\0\1\52\15\0\3\17\3\32\5\0"+
    "\2\17\15\32\1\312\12\32\3\0\1\51\31\32\1\0"+
    "\1\17\1\0\1\52\15\0\3\17\3\32\5\0\2\17"+
    "\13\32\1\313\14\32\3\0\1\51\31\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\30\32"+
    "\3\0\1\51\12\32\1\314\16\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\30\32\3\0"+
    "\1\51\13\32\1\315\15\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\30\32\3\0\1\51"+
    "\20\32\1\316\10\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\30\32\3\0\1\51\21\32"+
    "\1\317\7\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\30\32\3\0\1\51\16\32\1\320"+
    "\2\32\1\321\7\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\30\32\3\0\1\51\11\32"+
    "\1\322\17\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\30\32\3\0\1\51\22\32\1\323"+
    "\6\32\1\0\1\17\1\0\1\52\15\0\3\17\3\32"+
    "\5\0\2\17\4\32\1\324\23\32\3\0\1\51\31\32"+
    "\1\0\1\17\1\0\1\52\15\0\3\17\3\32\5\0"+
    "\2\17\30\32\3\0\1\51\7\32\1\325\21\32\1\0"+
    "\1\17\1\0\1\52\15\0\3\17\3\32\5\0\2\17"+
    "\30\32\3\0\1\51\6\32\1\326\22\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\30\32"+
    "\3\0\1\51\5\32\1\327\23\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\30\32\3\0"+
    "\1\51\5\32\1\330\23\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\30\32\3\0\1\51"+
    "\13\32\1\331\15\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\30\32\3\0\1\51\21\32"+
    "\1\332\7\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\30\32\3\0\1\51\11\32\1\333"+
    "\17\32\1\0\1\17\1\0\1\52\15\0\3\17\3\32"+
    "\5\0\2\17\30\32\3\0\1\51\22\32\1\334\6\32"+
    "\1\0\1\17\1\0\1\52\15\0\3\17\3\32\5\0"+
    "\2\17\30\32\3\0\1\51\5\32\1\335\23\32\1\0"+
    "\1\17\1\0\1\52\15\0\3\17\3\32\5\0\2\17"+
    "\30\32\3\0\1\51\5\32\1\336\23\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\30\32"+
    "\3\0\1\51\22\32\1\337\6\32\1\0\1\17\1\0"+
    "\1\52\15\247\1\340\105\247\15\0\6\17\5\0\32\17"+
    "\4\0\2\17\1\341\26\17\1\0\1\17\1\0\1\17"+
    "\15\0\3\17\3\32\5\0\2\17\22\32\1\342\5\32"+
    "\3\0\1\51\31\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\2\32\1\343\25\32\3\0"+
    "\1\51\31\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\3\32\1\344\24\32\3\0\1\51"+
    "\4\32\1\344\24\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\22\32\1\345\5\32\3\0"+
    "\1\51\22\32\1\345\6\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\24\32\1\346\3\32"+
    "\3\0\1\51\24\32\1\346\4\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\1\347\27\32"+
    "\3\0\1\51\1\32\1\347\27\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\6\32\1\350"+
    "\21\32\3\0\1\51\7\32\1\350\21\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\17\32"+
    "\1\351\10\32\3\0\1\51\17\32\1\351\11\32\1\0"+
    "\1\17\1\0\1\52\15\0\3\17\3\32\5\0\2\17"+
    "\15\32\1\352\12\32\3\0\1\51\15\32\1\352\13\32"+
    "\1\0\1\17\1\0\1\52\15\0\3\17\3\32\5\0"+
    "\2\17\22\32\1\353\5\32\3\0\1\51\22\32\1\353"+
    "\6\32\1\0\1\17\1\0\1\52\15\0\3\17\3\32"+
    "\5\0\2\17\20\32\1\354\7\32\3\0\1\51\20\32"+
    "\1\354\10\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\13\32\1\355\14\32\3\0\1\51"+
    "\13\32\1\355\15\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\1\356\27\32\3\0\1\51"+
    "\1\32\1\356\27\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\26\32\1\357\1\32\3\0"+
    "\1\51\26\32\1\357\2\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\22\32\1\360\5\32"+
    "\3\0\1\51\22\32\1\360\6\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\22\32\1\361"+
    "\5\32\3\0\1\51\31\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\30\32\3\0\1\51"+
    "\5\32\1\362\23\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\10\32\1\363\17\32\3\0"+
    "\1\51\31\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\20\32\1\364\7\32\3\0\1\51"+
    "\31\32\1\0\1\17\1\0\1\52\15\0\3\17\3\32"+
    "\5\0\2\17\14\32\1\365\13\32\3\0\1\51\31\32"+
    "\1\0\1\17\1\0\1\52\15\0\3\17\3\32\5\0"+
    "\2\17\1\366\27\32\3\0\1\51\31\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\1\367"+
    "\27\32\3\0\1\51\31\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\16\32\1\370\11\32"+
    "\3\0\1\51\31\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\20\32\1\371\7\32\3\0"+
    "\1\51\31\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\1\372\27\32\3\0\1\51\31\32"+
    "\1\0\1\17\1\0\1\52\15\0\3\17\3\32\5\0"+
    "\2\17\20\32\1\373\7\32\3\0\1\51\31\32\1\0"+
    "\1\17\1\0\1\52\15\0\3\17\3\32\5\0\2\17"+
    "\25\32\1\374\2\32\3\0\1\51\31\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\4\32"+
    "\1\375\23\32\3\0\1\51\31\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\30\32\3\0"+
    "\1\51\7\32\1\376\21\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\30\32\3\0\1\51"+
    "\5\32\1\377\23\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\30\32\3\0\1\51\21\32"+
    "\1\u0100\7\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\30\32\3\0\1\51\20\32\1\u0101"+
    "\10\32\1\0\1\17\1\0\1\52\15\0\3\17\3\32"+
    "\5\0\2\17\30\32\3\0\1\51\14\32\1\u0102\14\32"+
    "\1\0\1\17\1\0\1\52\15\0\1\u0103\2\17\3\32"+
    "\5\0\2\17\30\32\3\0\1\51\31\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\30\32"+
    "\3\0\1\51\13\32\1\u0104\15\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\30\32\3\0"+
    "\1\51\10\32\1\u0105\20\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\30\32\3\0\1\51"+
    "\7\32\1\u0106\21\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\30\32\3\0\1\51\11\32"+
    "\1\u0107\17\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\30\32\3\0\1\51\15\32\1\u0108"+
    "\13\32\1\0\1\17\1\0\1\52\15\0\1\u0109\2\17"+
    "\3\32\5\0\2\17\30\32\3\0\1\51\31\32\1\0"+
    "\1\17\1\0\1\52\15\0\3\17\3\32\5\0\2\17"+
    "\30\32\3\0\1\51\10\32\1\u010a\20\32\1\0\1\17"+
    "\1\0\1\52\15\247\1\u010b\105\247\15\0\6\17\5\0"+
    "\32\17\4\0\1\17\1\u010c\27\17\1\0\1\17\1\0"+
    "\1\17\15\0\3\17\3\32\5\0\2\17\30\32\3\0"+
    "\1\51\1\u010d\30\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\22\32\1\u010e\5\32\3\0"+
    "\1\51\31\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\27\32\1\u010f\3\0\1\51\27\32"+
    "\1\u010f\1\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\22\32\1\u0110\5\32\3\0\1\51"+
    "\22\32\1\u0110\6\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\3\32\1\u0111\24\32\3\0"+
    "\1\51\4\32\1\u0111\24\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\23\32\1\u0112\4\32"+
    "\3\0\1\51\23\32\1\u0112\5\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\12\32\1\u0113"+
    "\15\32\3\0\1\51\12\32\1\u0113\16\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\10\32"+
    "\1\u0114\17\32\3\0\1\51\11\32\1\u0114\17\32\1\0"+
    "\1\17\1\0\1\52\15\0\3\17\3\32\5\0\2\17"+
    "\10\32\1\u0115\17\32\3\0\1\51\11\32\1\u0115\17\32"+
    "\1\0\1\17\1\0\1\52\15\0\3\17\3\32\5\0"+
    "\2\17\4\32\1\u0116\23\32\3\0\1\51\5\32\1\u0116"+
    "\23\32\1\0\1\17\1\0\1\52\15\0\3\17\3\32"+
    "\5\0\2\17\14\32\1\u0117\13\32\3\0\1\51\14\32"+
    "\1\u0117\14\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\22\32\1\u0118\5\32\3\0\1\51"+
    "\22\32\1\u0118\6\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\13\32\1\u0119\14\32\3\0"+
    "\1\51\13\32\1\u0119\15\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\10\32\1\u011a\17\32"+
    "\3\0\1\51\31\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\13\32\1\u011b\14\32\3\0"+
    "\1\51\31\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\22\32\1\u011c\5\32\3\0\1\51"+
    "\31\32\1\0\1\17\1\0\1\52\15\0\3\17\3\32"+
    "\5\0\2\17\17\32\1\u011d\10\32\3\0\1\51\31\32"+
    "\1\0\1\17\1\0\1\52\15\0\3\17\3\32\5\0"+
    "\2\17\20\32\1\u011e\7\32\3\0\1\51\31\32\1\0"+
    "\1\17\1\0\1\52\15\0\3\17\3\32\5\0\2\17"+
    "\13\32\1\u011f\14\32\3\0\1\51\31\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\1\u0120"+
    "\27\32\3\0\1\51\31\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\4\32\1\u0121\23\32"+
    "\3\0\1\51\31\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\22\32\1\u0122\5\32\3\0"+
    "\1\51\31\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\21\32\1\u0123\6\32\3\0\1\51"+
    "\31\32\1\0\1\17\1\0\1\52\15\0\3\17\3\32"+
    "\5\0\2\17\7\32\1\u0124\20\32\3\0\1\51\31\32"+
    "\1\0\1\17\1\0\1\52\15\0\3\17\3\32\5\0"+
    "\2\17\30\32\3\0\1\51\20\32\1\u0125\10\32\1\0"+
    "\1\17\1\0\1\52\15\0\3\17\3\32\5\0\2\17"+
    "\30\32\3\0\1\51\1\32\1\u0126\27\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\30\32"+
    "\3\0\1\51\1\32\1\u0127\27\32\1\0\1\17\1\0"+
    "\1\52\15\0\6\17\5\0\32\17\4\0\6\17\1\u0128"+
    "\12\17\1\u0129\7\17\1\0\1\17\1\0\1\17\15\0"+
    "\3\17\3\32\5\0\2\17\30\32\3\0\1\51\5\32"+
    "\1\u012a\23\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\30\32\3\0\1\51\22\32\1\u012b"+
    "\6\32\1\0\1\17\1\0\1\52\15\0\3\17\3\32"+
    "\5\0\2\17\30\32\3\0\1\51\5\32\1\u012c\23\32"+
    "\1\0\1\17\1\0\1\52\15\0\3\17\3\32\5\0"+
    "\2\17\30\32\3\0\1\51\3\32\1\u012d\25\32\1\0"+
    "\1\17\1\0\1\52\15\0\3\17\3\32\5\0\2\17"+
    "\30\32\3\0\1\51\7\32\1\u012e\21\32\1\0\1\17"+
    "\1\0\1\52\15\0\6\17\5\0\32\17\4\0\1\17"+
    "\1\u012f\27\17\1\0\1\17\1\0\1\17\15\247\1\u010b"+
    "\11\247\1\u0130\73\247\15\0\6\17\5\0\32\17\4\0"+
    "\13\17\1\u0131\15\17\1\0\1\17\1\0\1\17\15\0"+
    "\3\17\3\32\5\0\2\17\10\32\1\u0132\17\32\3\0"+
    "\1\51\31\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\4\32\1\u0133\23\32\3\0\1\51"+
    "\31\32\1\0\1\17\1\0\1\52\15\0\3\17\3\32"+
    "\5\0\2\17\16\32\1\u0134\11\32\3\0\1\51\16\32"+
    "\1\u0134\12\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\22\32\1\u0135\5\32\3\0\1\51"+
    "\22\32\1\u0135\6\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\16\32\1\u0136\11\32\3\0"+
    "\1\51\16\32\1\u0136\12\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\17\32\1\u0137\10\32"+
    "\3\0\1\51\17\32\1\u0137\11\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\2\32\1\u0138"+
    "\25\32\3\0\1\51\3\32\1\u0138\25\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\1\u0139"+
    "\27\32\3\0\1\51\1\32\1\u0139\27\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\4\32"+
    "\1\u013a\23\32\3\0\1\51\5\32\1\u013a\23\32\1\0"+
    "\1\17\1\0\1\52\15\0\3\17\3\32\5\0\2\17"+
    "\16\32\1\u013b\11\32\3\0\1\51\31\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\1\u013c"+
    "\27\32\3\0\1\51\31\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\30\32\3\0\1\51"+
    "\1\u013d\30\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\4\32\1\u013e\23\32\3\0\1\51"+
    "\31\32\1\0\1\17\1\0\1\52\15\0\3\17\3\32"+
    "\5\0\2\17\3\32\1\u013f\24\32\3\0\1\51\31\32"+
    "\1\0\1\17\1\0\1\52\15\0\3\17\3\32\5\0"+
    "\2\17\2\32\1\u0140\25\32\3\0\1\51\31\32\1\0"+
    "\1\17\1\0\1\52\15\0\3\17\3\32\5\0\2\17"+
    "\4\32\1\u0141\23\32\3\0\1\51\31\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\10\32"+
    "\1\u0142\17\32\3\0\1\51\31\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\30\32\3\0"+
    "\1\51\16\32\1\u0143\12\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\30\32\3\0\1\51"+
    "\15\32\1\u0144\13\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\30\32\3\0\1\51\13\32"+
    "\1\u0145\15\32\1\0\1\17\1\0\1\52\15\0\6\17"+
    "\5\0\32\17\4\0\1\17\1\u0146\27\17\1\0\1\17"+
    "\1\0\1\17\15\0\6\17\5\0\32\17\4\0\11\17"+
    "\1\u0147\17\17\1\0\1\17\1\0\1\17\15\0\3\17"+
    "\3\32\5\0\2\17\30\32\3\0\1\51\14\32\1\u0148"+
    "\14\32\1\0\1\17\1\0\1\52\15\0\3\17\3\32"+
    "\5\0\2\17\30\32\3\0\1\51\20\32\1\u0149\10\32"+
    "\1\0\1\17\1\0\1\52\15\0\3\17\3\32\5\0"+
    "\2\17\30\32\3\0\1\51\12\32\1\u014a\16\32\1\0"+
    "\1\17\1\0\1\52\15\0\6\17\5\0\32\17\4\0"+
    "\13\17\1\u014b\15\17\1\0\1\17\1\0\1\17\15\0"+
    "\3\17\3\32\5\0\2\17\15\32\1\u014c\12\32\3\0"+
    "\1\51\31\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\20\32\1\u014d\7\32\3\0\1\51"+
    "\31\32\1\0\1\17\1\0\1\52\15\0\3\17\3\32"+
    "\5\0\2\17\15\32\1\u014e\12\32\3\0\1\51\15\32"+
    "\1\u014e\13\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\15\32\1\u014f\12\32\3\0\1\51"+
    "\15\32\1\u014f\13\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\22\32\1\u0150\5\32\3\0"+
    "\1\51\22\32\1\u0150\6\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\22\32\1\u0151\5\32"+
    "\3\0\1\51\22\32\1\u0151\6\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\20\32\1\u0152"+
    "\7\32\3\0\1\51\20\32\1\u0152\10\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\15\32"+
    "\1\u0153\12\32\3\0\1\51\31\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\20\32\1\u0154"+
    "\7\32\3\0\1\51\31\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\15\32\1\u0155\12\32"+
    "\3\0\1\51\31\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\1\u0156\27\32\3\0\1\51"+
    "\31\32\1\0\1\17\1\0\1\52\15\0\3\17\3\32"+
    "\5\0\2\17\22\32\1\u0157\5\32\3\0\1\51\31\32"+
    "\1\0\1\17\1\0\1\52\15\0\3\17\3\32\5\0"+
    "\2\17\13\32\1\u0158\14\32\3\0\1\51\31\32\1\0"+
    "\1\17\1\0\1\52\15\0\3\17\3\32\5\0\2\17"+
    "\30\32\3\0\1\51\23\32\1\u0159\5\32\1\0\1\17"+
    "\1\0\1\52\15\0\6\17\5\0\32\17\4\0\14\17"+
    "\1\u015a\14\17\1\0\1\17\1\0\1\17\15\0\6\17"+
    "\5\0\32\17\4\0\30\17\1\u015b\1\0\1\17\1\0"+
    "\1\17\15\0\3\17\3\32\5\0\2\17\30\32\3\0"+
    "\1\51\5\32\1\u015c\23\32\1\0\1\17\1\0\1\52"+
    "\15\0\6\17\5\0\32\17\4\0\11\17\1\u015d\17\17"+
    "\1\0\1\17\1\0\1\17\15\0\3\17\3\32\5\0"+
    "\2\17\5\32\1\u015e\22\32\3\0\1\51\31\32\1\0"+
    "\1\17\1\0\1\52\15\0\3\17\3\32\5\0\2\17"+
    "\30\32\3\0\1\51\1\u015f\30\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\10\32\1\u0160"+
    "\17\32\3\0\1\51\11\32\1\u0160\17\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\4\32"+
    "\1\u0161\23\32\3\0\1\51\5\32\1\u0161\23\32\1\0"+
    "\1\17\1\0\1\52\15\0\3\17\3\32\5\0\2\17"+
    "\30\32\3\0\1\51\1\u0162\30\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\30\32\3\0"+
    "\1\51\1\u0163\30\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\23\32\1\u0164\4\32\3\0"+
    "\1\51\31\32\1\0\1\17\1\0\1\52\15\0\3\17"+
    "\3\32\5\0\2\17\22\32\1\u0165\5\32\3\0\1\51"+
    "\31\32\1\0\1\17\1\0\1\52\15\0\3\17\3\32"+
    "\5\0\2\17\4\32\1\u0166\23\32\3\0\1\51\31\32"+
    "\1\0\1\17\1\0\1\52\15\0\3\17\3\32\5\0"+
    "\2\17\30\32\3\0\1\51\15\32\1\u0167\13\32\1\0"+
    "\1\17\1\0\1\52\15\0\6\17\5\0\32\17\4\0"+
    "\11\17\1\u0168\17\17\1\0\1\17\1\0\1\17\15\0"+
    "\6\17\5\0\32\17\4\0\5\17\1\u0169\23\17\1\0"+
    "\1\17\1\0\1\17\15\0\3\17\3\32\5\0\2\17"+
    "\30\32\3\0\1\51\15\32\1\u016a\13\32\1\0\1\17"+
    "\1\0\1\52\15\0\6\17\5\0\32\17\4\0\7\17"+
    "\1\u016b\21\17\1\0\1\17\1\0\1\17\15\0\3\17"+
    "\3\32\5\0\2\17\16\32\1\u016c\11\32\3\0\1\51"+
    "\31\32\1\0\1\17\1\0\1\52\15\0\3\17\3\32"+
    "\5\0\2\17\1\u016d\27\32\3\0\1\51\31\32\1\0"+
    "\1\17\1\0\1\52\15\0\3\17\3\32\5\0\2\17"+
    "\15\32\1\u016e\12\32\3\0\1\51\15\32\1\u016e\13\32"+
    "\1\0\1\17\1\0\1\52\15\0\3\17\3\32\5\0"+
    "\2\17\1\u016f\27\32\3\0\1\51\1\32\1\u016f\27\32"+
    "\1\0\1\17\1\0\1\52\15\0\3\17\3\32\5\0"+
    "\2\17\30\u0170\3\0\1\51\1\32\30\u0170\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\15\32"+
    "\1\u0171\12\32\3\0\1\51\31\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\14\32\1\u0172"+
    "\13\32\3\0\1\51\31\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\16\32\1\u0173\11\32"+
    "\3\0\1\51\31\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\30\32\3\0\1\51\4\32"+
    "\1\u0174\24\32\1\0\1\17\1\0\1\52\15\0\6\17"+
    "\5\0\32\17\4\0\13\17\1\u0175\15\17\1\0\1\17"+
    "\1\0\1\17\15\0\3\17\3\32\5\0\2\17\1\32"+
    "\1\u0176\26\32\3\0\1\51\31\32\1\0\1\17\1\0"+
    "\1\52\15\0\6\17\5\0\32\17\4\0\15\17\1\u0177"+
    "\13\17\1\0\1\17\1\0\1\17\15\0\3\17\3\32"+
    "\5\0\2\17\13\32\1\u0178\14\32\3\0\1\51\31\32"+
    "\1\0\1\17\1\0\1\52\15\0\3\17\3\32\5\0"+
    "\2\17\6\32\1\u0179\21\32\3\0\1\51\7\32\1\u0179"+
    "\21\32\1\0\1\17\1\0\1\52\15\0\3\17\3\u0170"+
    "\5\0\2\17\30\u0170\3\0\1\51\31\u0170\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\23\32"+
    "\1\u017a\4\32\3\0\1\51\31\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\20\32\1\u017b"+
    "\7\32\3\0\1\51\31\32\1\0\1\17\1\0\1\52"+
    "\15\0\6\17\5\0\32\17\4\0\27\17\1\u017c\1\17"+
    "\1\0\1\17\1\0\1\17\15\0\3\17\3\32\5\0"+
    "\2\17\30\32\3\0\1\51\27\32\1\u017d\1\32\1\0"+
    "\1\17\1\0\1\52\15\0\3\17\3\32\5\0\2\17"+
    "\4\32\1\u017e\23\32\3\0\1\51\31\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\14\32"+
    "\1\u017f\13\32\3\0\1\51\31\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\10\32\1\u0180"+
    "\17\32\3\0\1\51\31\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\10\32\1\u0181\17\32"+
    "\3\0\1\51\31\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\1\u0182\27\32\3\0\1\51"+
    "\31\32\1\0\1\17\1\0\1\52\15\0\3\17\3\32"+
    "\5\0\2\17\16\32\1\u0183\11\32\3\0\1\51\31\32"+
    "\1\0\1\17\1\0\1\52\15\0\3\17\3\32\5\0"+
    "\2\17\30\32\3\0\1\51\4\32\1\u0184\24\32\1\0"+
    "\1\17\1\0\1\52\15\0\3\17\3\32\5\0\2\17"+
    "\22\32\1\u0185\5\32\3\0\1\51\31\32\1\0\1\17"+
    "\1\0\1\52\15\0\3\17\3\32\5\0\2\17\16\32"+
    "\1\u0186\11\32\3\0\1\51\31\32\1\0\1\17\1\0"+
    "\1\52\15\0\3\17\3\32\5\0\2\17\20\32\1\u0187"+
    "\7\32\3\0\1\51\31\32\1\0\1\17\1\0\1\52"+
    "\15\0\3\17\3\32\5\0\2\17\10\32\1\u0188\17\32"+
    "\3\0\1\51\31\32\1\0\1\17\1\0\1\52\15\0"+
    "\3\17\3\32\5\0\2\17\16\32\1\u0189\11\32\3\0"+
    "\1\51\31\32\1\0\1\17\1\0\1\52";

  private static int [] zzUnpacktrans() {
    int [] result = new int[25481];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\5\1\5\11\2\1\1\11\2\1\2\11"+
    "\22\1\2\11\20\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\0\2\11\1\0\1\1\1\0\53\1\1\0\1\11"+
    "\1\0\64\1\1\11\1\0\70\1\1\0\52\1\1\0"+
    "\176\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[393];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type){
        return new Symbol(type, yyline+1,yycolumn+1);
    }
    private Symbol symbol(int type, Object value){
        System.out.println(type + " line: " + (yyline+1) + " col: "+(yycolumn+1) + " " + value);
        return new Symbol(type, yyline+1, yycolumn+1, value);
    }
    private void error(){
        ErrorsLP.addError(yytext(), yyline+1, yycolumn+1, "Error Léxico","Cadena no definida");
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CCLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { error();
            }
          // fall through
          case 97: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 98: break;
          case 3:
            { return symbol(NOT, yytext());
            }
          // fall through
          case 99: break;
          case 4:
            { return symbol(LPAREN, yytext());
            }
          // fall through
          case 100: break;
          case 5:
            { return symbol(RPAREN, yytext());
            }
          // fall through
          case 101: break;
          case 6:
            { return symbol(TIMES, yytext());
            }
          // fall through
          case 102: break;
          case 7:
            { return symbol(PLUS, yytext());
            }
          // fall through
          case 103: break;
          case 8:
            { return symbol(COMMA, yytext());
            }
          // fall through
          case 104: break;
          case 9:
            { return symbol(MINUS, yytext());
            }
          // fall through
          case 105: break;
          case 10:
            { return symbol(TEXT, yytext());
            }
          // fall through
          case 106: break;
          case 11:
            { return symbol(SLASH, yytext());
            }
          // fall through
          case 107: break;
          case 12:
            { return symbol(NUMBER, yytext());
            }
          // fall through
          case 108: break;
          case 13:
            { return symbol(COLON, yytext());
            }
          // fall through
          case 109: break;
          case 14:
            { return symbol(SEMICOLON, yytext());
            }
          // fall through
          case 110: break;
          case 15:
            { return symbol(LT, yytext());
            }
          // fall through
          case 111: break;
          case 16:
            { return symbol(EQUAL, yytext());
            }
          // fall through
          case 112: break;
          case 17:
            { return symbol(GT, yytext());
            }
          // fall through
          case 113: break;
          case 18:
            { return symbol(IDENTIFIER, yytext());
            }
          // fall through
          case 114: break;
          case 19:
            { return symbol(LBRACKET, yytext());
            }
          // fall through
          case 115: break;
          case 20:
            { return symbol(RBRACKET, yytext());
            }
          // fall through
          case 116: break;
          case 21:
            { ErrorsLP.addError(yytext(), yyline+1, yycolumn+1, "Error Léxico","Cadena no definida");
            }
          // fall through
          case 117: break;
          case 22:
            { return symbol(LBRACE, yytext());
            }
          // fall through
          case 118: break;
          case 23:
            { return symbol(VERTICAL_BAR, yytext());
            }
          // fall through
          case 119: break;
          case 24:
            { return symbol(RBRACE, yytext());
            }
          // fall through
          case 120: break;
          case 25:
            { /*return symbol(COMMENT, yytext());*/
            }
          // fall through
          case 121: break;
          case 26:
            { return symbol(REL_OP, yytext());
            }
          // fall through
          case 122: break;
          case 27:
            { return symbol(STRING_LITERAL, yytext());
            }
          // fall through
          case 123: break;
          case 28:
            { return symbol(AND, yytext());
            }
          // fall through
          case 124: break;
          case 29:
            { return symbol(IF, yytext());
            }
          // fall through
          case 125: break;
          case 30:
            { return symbol(ID, yytext());
            }
          // fall through
          case 126: break;
          case 31:
            { return symbol(OR, yytext());
            }
          // fall through
          case 127: break;
          case 32:
            { return symbol(CHAR_LITERAL, yytext());
            }
          // fall through
          case 128: break;
          case 33:
            { return symbol(ASC, yytext());
            }
          // fall through
          case 129: break;
          case 34:
            { return symbol(C_P, yytext());
            }
          // fall through
          case 130: break;
          case 35:
            { return symbol(END, yytext());
            }
          // fall through
          case 131: break;
          case 36:
            { return symbol(ALT, yytext());
            }
          // fall through
          case 132: break;
          case 37:
            { return symbol(SRC, yytext());
            }
          // fall through
          case 133: break;
          case 38:
            { return symbol(SIMPLE_STRING, yytext());
            }
          // fall through
          case 134: break;
          case 39:
            { return symbol(C_BR, yytext());
            }
          // fall through
          case 135: break;
          case 40:
            { return symbol(C_CC, yytext());
            }
          // fall through
          case 136: break;
          case 41:
            { return symbol(C_H1, yytext());
            }
          // fall through
          case 137: break;
          case 42:
            { return symbol(DESC, yytext());
            }
          // fall through
          case 138: break;
          case 43:
            { return symbol(ELSE, yytext());
            }
          // fall through
          case 139: break;
          case 44:
            { return symbol(EXIT, yytext());
            }
          // fall through
          case 140: break;
          case 45:
            { return symbol(INIT, yytext());
            }
          // fall through
          case 141: break;
          case 46:
            { return symbol(THEN, yytext());
            }
          // fall through
          case 142: break;
          case 47:
            { return symbol(CHAR, yytext());
            }
          // fall through
          case 143: break;
          case 48:
            { return symbol(COLS, yytext());
            }
          // fall through
          case 144: break;
          case 49:
            { return symbol(HREF, yytext());
            }
          // fall through
          case 145: break;
          case 50:
            { return symbol(NAME, yytext());
            }
          // fall through
          case 146: break;
          case 51:
            { return symbol(ROWS, yytext());
            }
          // fall through
          case 147: break;
          case 52:
            { return symbol(TRUE, yytext());
            }
          // fall through
          case 148: break;
          case 53:
            { return symbol(TYPE, yytext());
            }
          // fall through
          case 149: break;
          case 54:
            { return symbol(C_DIV, yytext());
            }
          // fall through
          case 150: break;
          case 55:
            { return symbol(C_IMG, yytext());
            }
          // fall through
          case 151: break;
          case 56:
            { return symbol(FALSE, yytext());
            }
          // fall through
          case 152: break;
          case 57:
            { return symbol(WHILE, yytext());
            }
          // fall through
          case 153: break;
          case 58:
            { return symbol(CLASS, yytext());
            }
          // fall through
          case 154: break;
          case 59:
            { return symbol(COLOR, yytext());
            }
          // fall through
          case 155: break;
          case 60:
            { return symbol(WIDTH, yytext());
            }
          // fall through
          case 156: break;
          case 61:
            { return symbol(C_BODY, yytext());
            }
          // fall through
          case 157: break;
          case 62:
            { return symbol(C_HEAD, yytext());
            }
          // fall through
          case 158: break;
          case 63:
            { return symbol(C_LINK, yytext());
            }
          // fall through
          case 159: break;
          case 64:
            { return symbol(C_SPAM, yytext());
            }
          // fall through
          case 160: break;
          case 65:
            { return symbol(HUNTIL, yytext());
            }
          // fall through
          case 161: break;
          case 66:
            { return symbol(INSERT, yytext());
            }
          // fall through
          case 162: break;
          case 67:
            { return symbol(REPEAT, yytext());
            }
          // fall through
          case 163: break;
          case 68:
            { return symbol(HEIGHT, yytext());
            }
          // fall through
          case 164: break;
          case 69:
            { return symbol(STRING, yytext());
            }
          // fall through
          case 165: break;
          case 70:
            { return symbol(GLOBAL, yytext());
            }
          // fall through
          case 166: break;
          case 71:
            { return symbol(C_INPUT, yytext());
            }
          // fall through
          case 167: break;
          case 72:
            { return symbol(C_TITLE, yytext());
            }
          // fall through
          case 168: break;
          case 73:
            { return symbol(ON_LOAD, yytext());
            }
          // fall through
          case 169: break;
          case 74:
            { return symbol(REVERSE, yytext());
            }
          // fall through
          case 170: break;
          case 75:
            { return symbol(BOOLEAN, yytext());
            }
          // fall through
          case 171: break;
          case 76:
            { return symbol(DECIMAL, yytext());
            }
          // fall through
          case 172: break;
          case 77:
            { return symbol(INTEGER, yytext());
            }
          // fall through
          case 173: break;
          case 78:
            { return symbol(ONCLICK, yytext());
            }
          // fall through
          case 174: break;
          case 79:
            { return symbol(C_BUTTON, yytext());
            }
          // fall through
          case 175: break;
          case 80:
            { return symbol(C_OPTION, yytext());
            }
          // fall through
          case 176: break;
          case 81:
            { return symbol(C_SELECT, yytext());
            }
          // fall through
          case 177: break;
          case 82:
            { return symbol(REDIRECT, yytext());
            }
          // fall through
          case 178: break;
          case 83:
            { return symbol(THENWHILE, yytext());
            }
          // fall through
          case 179: break;
          case 84:
            { return symbol(FONT_SIZE, yytext());
            }
          // fall through
          case 180: break;
          case 85:
            { return symbol(ALERT_INFO, yytext());
            }
          // fall through
          case 181: break;
          case 86:
            { return symbol(C_TEXTAREA, yytext());
            }
          // fall through
          case 182: break;
          case 87:
            { return symbol(FUNCTION_ID, yytext());
            }
          // fall through
          case 183: break;
          case 88:
            { return symbol(LETPAR_NUM, yytext());
            }
          // fall through
          case 184: break;
          case 89:
            { return symbol(BACKGROUND, yytext());
            }
          // fall through
          case 185: break;
          case 90:
            { return symbol(TEXT_ALIGN, yytext());
            }
          // fall through
          case 186: break;
          case 91:
            { return symbol(C_SCRIPTING, yytext());
            }
          // fall through
          case 187: break;
          case 92:
            { return symbol(FONT_FAMILY, yytext());
            }
          // fall through
          case 188: break;
          case 93:
            { return symbol(LETIMPAR_NUM, yytext());
            }
          // fall through
          case 189: break;
          case 94:
            { return symbol(NUM_ALEATORIO, yytext());
            }
          // fall through
          case 190: break;
          case 95:
            { return symbol(GET_ELEMENT_BY_ID, yytext());
            }
          // fall through
          case 191: break;
          case 96:
            { return symbol(CARACTER_ALEATORIO, yytext());
            }
          // fall through
          case 192: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
